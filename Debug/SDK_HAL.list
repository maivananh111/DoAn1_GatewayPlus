
SDK_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caf0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001450  0800cca0  0800cca0  0001cca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0f0  0800e0f0  000202ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0f0  0800e0f0  0001e0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0f8  0800e0f8  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0800e0f8  0800e0f8  0001e0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e11c  0800e11c  0001e11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800e124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202ac  2**0
                  CONTENTS
 10 .bss          0000b738  200002b0  200002b0  000202b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000b9e8  2000b9e8  000202b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00060a49  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a445  00000000  00000000  00080d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e68  00000000  00000000  0008b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00008880  00000000  00000000  0008cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034148  00000000  00000000  00095858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045922  00000000  00000000  000c99a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105642  00000000  00000000  0010f2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00214904  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a60  00000000  00000000  00214954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000304d3  00000000  00000000  0021c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002b0 	.word	0x200002b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cc88 	.word	0x0800cc88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002b4 	.word	0x200002b4
 80001ec:	0800cc88 	.word	0x0800cc88

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <vApplicationTickHook>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <HAL_Driver_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_Driver_Init(void){
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	2200      	movs	r2, #0
void HAL_Driver_Init(void){
 8000fd4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8000fda:	e9cd 2208 	strd	r2, r2, [sp, #32]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_Driver_Init+0xc4>)
 8000fe0:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	920a      	str	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe4:	6b19      	ldr	r1, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fe6:	4c2c      	ldr	r4, [pc, #176]	; (8001098 <HAL_Driver_Init+0xc8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_SET);
 8000fe8:	4d2c      	ldr	r5, [pc, #176]	; (800109c <HAL_Driver_Init+0xcc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	f041 0104 	orr.w	r1, r1, #4
 8000fee:	6319      	str	r1, [r3, #48]	; 0x30
 8000ff0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff2:	f001 0104 	and.w	r1, r1, #4
 8000ff6:	9101      	str	r1, [sp, #4]
 8000ff8:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	9202      	str	r2, [sp, #8]
 8000ffc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ffe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001002:	6319      	str	r1, [r3, #48]	; 0x30
 8001004:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001006:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800100a:	9102      	str	r1, [sp, #8]
 800100c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	9203      	str	r2, [sp, #12]
 8001010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001012:	f041 0101 	orr.w	r1, r1, #1
 8001016:	6319      	str	r1, [r3, #48]	; 0x30
 8001018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800101a:	f001 0101 	and.w	r1, r1, #1
 800101e:	9103      	str	r1, [sp, #12]
 8001020:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	9204      	str	r2, [sp, #16]
 8001024:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001026:	f041 0102 	orr.w	r1, r1, #2
 800102a:	6319      	str	r1, [r3, #48]	; 0x30
 800102c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800102e:	f001 0102 	and.w	r1, r1, #2
 8001032:	9104      	str	r1, [sp, #16]
 8001034:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	9205      	str	r2, [sp, #20]
 8001038:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800103a:	f041 0108 	orr.w	r1, r1, #8
 800103e:	6319      	str	r1, [r3, #48]	; 0x30
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001048:	4620      	mov	r0, r4
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104e:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001050:	f000 fc14 	bl	800187c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_SET);
 8001054:	4628      	mov	r0, r5
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7102 	mov.w	r1, #520	; 0x208
 800105c:	f000 fc0e 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001060:	2600      	movs	r6, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001064:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001068:	2301      	movs	r3, #1
 800106a:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800106e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001072:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f000 fac5 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9;
 800107a:	f44f 7202 	mov.w	r2, #520	; 0x208
 800107e:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	a906      	add	r1, sp, #24
 8001082:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9;
 8001084:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8001088:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f000 faba 	bl	8001604 <HAL_GPIO_Init>
}
 8001090:	b00d      	add	sp, #52	; 0x34
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020800 	.word	0x40020800
 800109c:	40020000 	.word	0x40020000

080010a0 <main>:
	return main_application();
 80010a0:	f008 b84a 	b.w	8009138 <main_application>

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"NonMaskable interrupt was unhandled(NMI_Handler)...");
 80010a6:	4902      	ldr	r1, [pc, #8]	; (80010b0 <NMI_Handler+0xc>)
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <NMI_Handler+0x10>)
 80010aa:	f008 fbe5 	bl	8009878 <exception_interrupt_handler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <NMI_Handler+0xa>
 80010b0:	0800cca0 	.word	0x0800cca0
 80010b4:	0800ccd4 	.word	0x0800ccd4

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Hard fault exception was unhandled(call HardFault_Handler)...");
 80010ba:	4902      	ldr	r1, [pc, #8]	; (80010c4 <HardFault_Handler+0xc>)
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <HardFault_Handler+0x10>)
 80010be:	f008 fbdb 	bl	8009878 <exception_interrupt_handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0xa>
 80010c4:	0800cce0 	.word	0x0800cce0
 80010c8:	0800cd20 	.word	0x0800cd20

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Memory management interrupt was unhandled(MemManage_Handler)...");
 80010ce:	4902      	ldr	r1, [pc, #8]	; (80010d8 <MemManage_Handler+0xc>)
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <MemManage_Handler+0x10>)
 80010d2:	f008 fbd1 	bl	8009878 <exception_interrupt_handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <MemManage_Handler+0xa>
 80010d8:	0800cd2c 	.word	0x0800cd2c
 80010dc:	0800ccd4 	.word	0x0800ccd4

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BusFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Bus fault exception was unhandled(call BusFault_Handler)...");
 80010e2:	4902      	ldr	r1, [pc, #8]	; (80010ec <BusFault_Handler+0xc>)
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <BusFault_Handler+0x10>)
 80010e6:	f008 fbc7 	bl	8009878 <exception_interrupt_handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0xa>
 80010ec:	0800cd6c 	.word	0x0800cd6c
 80010f0:	0800cd20 	.word	0x0800cd20

080010f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Usage fault exception was unhandled(call UsageFault_Handler)...");
 80010f6:	4902      	ldr	r1, [pc, #8]	; (8001100 <UsageFault_Handler+0xc>)
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <UsageFault_Handler+0x10>)
 80010fa:	f008 fbbd 	bl	8009878 <exception_interrupt_handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <UsageFault_Handler+0xa>
 8001100:	0800cda8 	.word	0x0800cda8
 8001104:	0800cd20 	.word	0x0800cd20

08001108 <DebugMon_Handler>:
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Debug monitor interrupt was unhandled(call DebugMon_Handler)...");
 8001108:	4901      	ldr	r1, [pc, #4]	; (8001110 <DebugMon_Handler+0x8>)
 800110a:	4802      	ldr	r0, [pc, #8]	; (8001114 <DebugMon_Handler+0xc>)
 800110c:	f008 bbb4 	b.w	8009878 <exception_interrupt_handler>
 8001110:	0800cde8 	.word	0x0800cde8
 8001114:	0800ccd4 	.word	0x0800ccd4

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern void app_systick_process(void);
	app_systick_process();
 800111a:	f007 f8dd 	bl	80082d8 <app_systick_process>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 f8ed 	bl	80012fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001122:	f002 fd3f 	bl	8003ba4 <xTaskGetSchedulerState>
 8001126:	2801      	cmp	r0, #1
 8001128:	d100      	bne.n	800112c <SysTick_Handler+0x14>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bd08      	pop	{r3, pc}
 800112c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8001130:	f003 b8f0 	b.w	8004314 <xPortSysTickHandler>

08001134 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001134:	4801      	ldr	r0, [pc, #4]	; (800113c <SDIO_IRQHandler+0x8>)
 8001136:	f000 bbd9 	b.w	80018ec <HAL_SD_IRQHandler>
 800113a:	bf00      	nop
 800113c:	2000038c 	.word	0x2000038c

08001140 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001140:	4801      	ldr	r0, [pc, #4]	; (8001148 <DMA2_Stream3_IRQHandler+0x8>)
 8001142:	f000 b8f9 	b.w	8001338 <HAL_DMA_IRQHandler>
 8001146:	bf00      	nop
 8001148:	200002cc 	.word	0x200002cc

0800114c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800114c:	4801      	ldr	r0, [pc, #4]	; (8001154 <ETH_IRQHandler+0x8>)
 800114e:	f000 b9e7 	b.w	8001520 <HAL_ETH_IRQHandler>
 8001152:	bf00      	nop
 8001154:	20000424 	.word	0x20000424

08001158 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001158:	4801      	ldr	r0, [pc, #4]	; (8001160 <DMA2_Stream6_IRQHandler+0x8>)
 800115a:	f000 b8ed 	b.w	8001338 <HAL_DMA_IRQHandler>
 800115e:	bf00      	nop
 8001160:	2000032c 	.word	0x2000032c

08001164 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001164:	2001      	movs	r0, #1
 8001166:	4770      	bx	lr

08001168 <_kill>:

int _kill(int pid, int sig)
{
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001168:	4b02      	ldr	r3, [pc, #8]	; (8001174 <_kill+0xc>)
 800116a:	2216      	movs	r2, #22
 800116c:	601a      	str	r2, [r3, #0]
  return -1;
}
 800116e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001172:	4770      	bx	lr
 8001174:	2000b220 	.word	0x2000b220

08001178 <_exit>:
  errno = EINVAL;
 8001178:	4b01      	ldr	r3, [pc, #4]	; (8001180 <_exit+0x8>)
 800117a:	2216      	movs	r2, #22
 800117c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800117e:	e7fe      	b.n	800117e <_exit+0x6>
 8001180:	2000b220 	.word	0x2000b220

08001184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001184:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	1e16      	subs	r6, r2, #0
 8001188:	dd07      	ble.n	800119a <_read+0x16>
 800118a:	460c      	mov	r4, r1
 800118c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800118e:	f3af 8000 	nop.w
 8001192:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	42a5      	cmp	r5, r4
 8001198:	d1f9      	bne.n	800118e <_read+0xa>
  }

  return len;
}
 800119a:	4630      	mov	r0, r6
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	bf00      	nop

080011a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	1e16      	subs	r6, r2, #0
 80011a4:	dd07      	ble.n	80011b6 <_write+0x16>
 80011a6:	460c      	mov	r4, r1
 80011a8:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80011aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80011ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	42ac      	cmp	r4, r5
 80011b4:	d1f9      	bne.n	80011aa <_write+0xa>
  }
  return len;
}
 80011b6:	4630      	mov	r0, r6
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
 80011ba:	bf00      	nop

080011bc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	604b      	str	r3, [r1, #4]
  return 0;
}
 80011ca:	2000      	movs	r0, #0
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop

080011d0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80011d0:	2001      	movs	r0, #1
 80011d2:	4770      	bx	lr

080011d4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80011d4:	2000      	movs	r0, #0
 80011d6:	4770      	bx	lr

080011d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d8:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011da:	4c0d      	ldr	r4, [pc, #52]	; (8001210 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <_sbrk+0x3c>)
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80011e0:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e2:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80011e4:	b182      	cbz	r2, 8001208 <_sbrk+0x30>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4410      	add	r0, r2
 80011e8:	4288      	cmp	r0, r1
 80011ea:	d804      	bhi.n	80011f6 <_sbrk+0x1e>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80011ec:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80011ee:	4610      	mov	r0, r2
 80011f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011f4:	4770      	bx	lr
    errno = ENOMEM;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <_sbrk+0x44>)
}
 80011f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 80011fc:	220c      	movs	r2, #12
 80011fe:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
 8001204:	4610      	mov	r0, r2
 8001206:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <_sbrk+0x48>)
 800120a:	6022      	str	r2, [r4, #0]
 800120c:	e7eb      	b.n	80011e6 <_sbrk+0xe>
 800120e:	bf00      	nop
 8001210:	20000410 	.word	0x20000410
 8001214:	20030000 	.word	0x20030000
 8001218:	00000400 	.word	0x00000400
 800121c:	2000b220 	.word	0x2000b220
 8001220:	2000b9e8 	.word	0x2000b9e8

08001224 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4a03      	ldr	r2, [pc, #12]	; (8001234 <SystemInit+0x10>)
 8001226:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800122a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001238:	4a16      	ldr	r2, [pc, #88]	; (8001294 <SystemCoreClockUpdate+0x5c>)
 800123a:	6893      	ldr	r3, [r2, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8001240:	2b04      	cmp	r3, #4
 8001242:	d00c      	beq.n	800125e <SystemCoreClockUpdate+0x26>
 8001244:	2b08      	cmp	r3, #8
 8001246:	d00c      	beq.n	8001262 <SystemCoreClockUpdate+0x2a>
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <SystemCoreClockUpdate+0x5c>)
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <SystemCoreClockUpdate+0x64>)
 800124e:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001250:	4913      	ldr	r1, [pc, #76]	; (80012a0 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001252:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001256:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 8001258:	40d3      	lsrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
}
 800125c:	4770      	bx	lr
  switch (tmp)
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <SystemCoreClockUpdate+0x6c>)
 8001260:	e7f3      	b.n	800124a <SystemCoreClockUpdate+0x12>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001262:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001264:	6851      	ldr	r1, [r2, #4]
      if (pllsource != 0)
 8001266:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800126a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800126e:	6853      	ldr	r3, [r2, #4]
 8001270:	bf14      	ite	ne
 8001272:	4a0c      	ldrne	r2, [pc, #48]	; (80012a4 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001274:	4a08      	ldreq	r2, [pc, #32]	; (8001298 <SystemCoreClockUpdate+0x60>)
 8001276:	fbb2 f1f1 	udiv	r1, r2, r1
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <SystemCoreClockUpdate+0x5c>)
 800127c:	6852      	ldr	r2, [r2, #4]
 800127e:	f3c2 4201 	ubfx	r2, r2, #16, #2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001282:	f3c3 1388 	ubfx	r3, r3, #6, #9
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001286:	3201      	adds	r2, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001288:	fb01 f303 	mul.w	r3, r1, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800128c:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 800128e:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8001292:	e7da      	b.n	800124a <SystemCoreClockUpdate+0x12>
 8001294:	40023800 	.word	0x40023800
 8001298:	00f42400 	.word	0x00f42400
 800129c:	0800ce28 	.word	0x0800ce28
 80012a0:	20000000 	.word	0x20000000
 80012a4:	017d7840 	.word	0x017d7840

080012a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ae:	490e      	ldr	r1, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c4:	4c0b      	ldr	r4, [pc, #44]	; (80012f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012d2:	f7ff ffa7 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d6:	f008 fcd7 	bl	8009c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012da:	f7ff fee1 	bl	80010a0 <main>
  bx  lr    
 80012de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	200002ac 	.word	0x200002ac
  ldr r2, =_sidata
 80012ec:	0800e124 	.word	0x0800e124
  ldr r2, =_sbss
 80012f0:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 80012f4:	2000b9e8 	.word	0x2000b9e8

080012f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC_IRQHandler>
	...

080012fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012fc:	4a03      	ldr	r2, [pc, #12]	; (800130c <HAL_IncTick+0x10>)
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <HAL_IncTick+0x14>)
 8001300:	6811      	ldr	r1, [r2, #0]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	440b      	add	r3, r1
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000414 	.word	0x20000414
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001314:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001318:	2b02      	cmp	r3, #2
 800131a:	d003      	beq.n	8001324 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001320:	2001      	movs	r0, #1
 8001322:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001324:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001326:	2305      	movs	r3, #5
 8001328:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800132c:	6813      	ldr	r3, [r2, #0]
 800132e:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 8001332:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001334:	6013      	str	r3, [r2, #0]
}
 8001336:	4770      	bx	lr

08001338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800133c:	b082      	sub	sp, #8
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 800133e:	4a74      	ldr	r2, [pc, #464]	; (8001510 <HAL_DMA_IRQHandler+0x1d8>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001340:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001342:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	9301      	str	r3, [sp, #4]

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001348:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800134a:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800134c:	2208      	movs	r2, #8
 800134e:	409a      	lsls	r2, r3
 8001350:	4222      	tst	r2, r4
{
 8001352:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001354:	d004      	beq.n	8001360 <HAL_DMA_IRQHandler+0x28>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001356:	6801      	ldr	r1, [r0, #0]
 8001358:	680f      	ldr	r7, [r1, #0]
 800135a:	0778      	lsls	r0, r7, #29
 800135c:	f100 808a 	bmi.w	8001474 <HAL_DMA_IRQHandler+0x13c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001360:	2201      	movs	r2, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	4222      	tst	r2, r4
 8001366:	d004      	beq.n	8001372 <HAL_DMA_IRQHandler+0x3a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001368:	f8d8 1000 	ldr.w	r1, [r8]
 800136c:	6949      	ldr	r1, [r1, #20]
 800136e:	0609      	lsls	r1, r1, #24
 8001370:	d478      	bmi.n	8001464 <HAL_DMA_IRQHandler+0x12c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001372:	2204      	movs	r2, #4
 8001374:	409a      	lsls	r2, r3
 8001376:	4222      	tst	r2, r4
 8001378:	d004      	beq.n	8001384 <HAL_DMA_IRQHandler+0x4c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800137a:	f8d8 1000 	ldr.w	r1, [r8]
 800137e:	6809      	ldr	r1, [r1, #0]
 8001380:	078f      	lsls	r7, r1, #30
 8001382:	d467      	bmi.n	8001454 <HAL_DMA_IRQHandler+0x11c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001384:	2210      	movs	r2, #16
 8001386:	409a      	lsls	r2, r3
 8001388:	4222      	tst	r2, r4
 800138a:	d004      	beq.n	8001396 <HAL_DMA_IRQHandler+0x5e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800138c:	f8d8 1000 	ldr.w	r1, [r8]
 8001390:	680f      	ldr	r7, [r1, #0]
 8001392:	0738      	lsls	r0, r7, #28
 8001394:	d449      	bmi.n	800142a <HAL_DMA_IRQHandler+0xf2>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001396:	2220      	movs	r2, #32
 8001398:	409a      	lsls	r2, r3
 800139a:	4222      	tst	r2, r4
 800139c:	d017      	beq.n	80013ce <HAL_DMA_IRQHandler+0x96>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800139e:	f8d8 1000 	ldr.w	r1, [r8]
 80013a2:	680c      	ldr	r4, [r1, #0]
 80013a4:	06e0      	lsls	r0, r4, #27
 80013a6:	d512      	bpl.n	80013ce <HAL_DMA_IRQHandler+0x96>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013a8:	60b2      	str	r2, [r6, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013aa:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80013ae:	2a05      	cmp	r2, #5
 80013b0:	d073      	beq.n	800149a <HAL_DMA_IRQHandler+0x162>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013b2:	680b      	ldr	r3, [r1, #0]
 80013b4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013b8:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013ba:	f000 8090 	beq.w	80014de <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013be:	0319      	lsls	r1, r3, #12
 80013c0:	f140 809b 	bpl.w	80014fa <HAL_DMA_IRQHandler+0x1c2>

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
        }

        if(hdma->XferCpltCallback != NULL)
 80013c4:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80013c8:	b10b      	cbz	r3, 80013ce <HAL_DMA_IRQHandler+0x96>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013ca:	4640      	mov	r0, r8
 80013cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013ce:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80013d2:	b33b      	cbz	r3, 8001424 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013d4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80013d8:	07da      	lsls	r2, r3, #31
 80013da:	d51b      	bpl.n	8001414 <HAL_DMA_IRQHandler+0xdc>
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013dc:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013e0:	494c      	ldr	r1, [pc, #304]	; (8001514 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80013e2:	2305      	movs	r3, #5
 80013e4:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013e8:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013ea:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80013ee:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80013f2:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e002      	b.n	80013fe <HAL_DMA_IRQHandler+0xc6>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013f8:	6813      	ldr	r3, [r2, #0]
 80013fa:	07db      	lsls	r3, r3, #31
 80013fc:	d504      	bpl.n	8001408 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 80013fe:	9b01      	ldr	r3, [sp, #4]
 8001400:	3301      	adds	r3, #1
 8001402:	42ab      	cmp	r3, r5
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	d9f7      	bls.n	80013f8 <HAL_DMA_IRQHandler+0xc0>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001408:	2201      	movs	r2, #1

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800140a:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800140c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001410:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001414:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001418:	b123      	cbz	r3, 8001424 <HAL_DMA_IRQHandler+0xec>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800141a:	4640      	mov	r0, r8
    }
  }
}
 800141c:	b002      	add	sp, #8
 800141e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8001422:	4718      	bx	r3
}
 8001424:	b002      	add	sp, #8
 8001426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800142a:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800142c:	680a      	ldr	r2, [r1, #0]
 800142e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001432:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001434:	d12a      	bne.n	800148c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001436:	05d7      	lsls	r7, r2, #23
 8001438:	d403      	bmi.n	8001442 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800143a:	680a      	ldr	r2, [r1, #0]
 800143c:	f022 0208 	bic.w	r2, r2, #8
 8001440:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001442:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8001446:	2a00      	cmp	r2, #0
 8001448:	d0a5      	beq.n	8001396 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 800144a:	4640      	mov	r0, r8
 800144c:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800144e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8001452:	e7a0      	b.n	8001396 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001454:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001456:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800145a:	f042 0204 	orr.w	r2, r2, #4
 800145e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001462:	e78f      	b.n	8001384 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001464:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001466:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800146a:	f042 0202 	orr.w	r2, r2, #2
 800146e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001472:	e77e      	b.n	8001372 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001474:	680f      	ldr	r7, [r1, #0]
 8001476:	f027 0704 	bic.w	r7, r7, #4
 800147a:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800147c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800147e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001482:	f042 0201 	orr.w	r2, r2, #1
 8001486:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800148a:	e769      	b.n	8001360 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800148c:	0312      	lsls	r2, r2, #12
 800148e:	d5d8      	bpl.n	8001442 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001490:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001494:	2a00      	cmp	r2, #0
 8001496:	d1d8      	bne.n	800144a <HAL_DMA_IRQHandler+0x112>
 8001498:	e77d      	b.n	8001396 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800149a:	680a      	ldr	r2, [r1, #0]
 800149c:	f022 0216 	bic.w	r2, r2, #22
 80014a0:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014a2:	694a      	ldr	r2, [r1, #20]
 80014a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a8:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014aa:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80014ae:	b352      	cbz	r2, 8001506 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b0:	680a      	ldr	r2, [r1, #0]
 80014b2:	f022 0208 	bic.w	r2, r2, #8
 80014b6:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b8:	223f      	movs	r2, #63	; 0x3f
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80014be:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c2:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80014c4:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80014c6:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80014c8:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80014cc:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80014d0:	2900      	cmp	r1, #0
 80014d2:	d0a7      	beq.n	8001424 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80014d4:	4640      	mov	r0, r8
}
 80014d6:	b002      	add	sp, #8
 80014d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 80014dc:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014de:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80014e2:	f47f af6f 	bne.w	80013c4 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014e6:	680a      	ldr	r2, [r1, #0]
 80014e8:	f022 0210 	bic.w	r2, r2, #16
 80014ec:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80014ee:	2201      	movs	r2, #1
 80014f0:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80014f4:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 80014f8:	e764      	b.n	80013c4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 80014fa:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f47f af63 	bne.w	80013ca <HAL_DMA_IRQHandler+0x92>
 8001504:	e763      	b.n	80013ce <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001506:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800150a:	2a00      	cmp	r2, #0
 800150c:	d1d0      	bne.n	80014b0 <HAL_DMA_IRQHandler+0x178>
 800150e:	e7d3      	b.n	80014b8 <HAL_DMA_IRQHandler+0x180>
 8001510:	20000000 	.word	0x20000000
 8001514:	1b4e81b5 	.word	0x1b4e81b5

08001518 <HAL_ETH_PMTCallback>:
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <HAL_ETH_WakeUpCallback>:
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <HAL_ETH_IRQHandler>:
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001520:	6802      	ldr	r2, [r0, #0]
 8001522:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
{
 8001526:	b510      	push	{r4, lr}
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001528:	6959      	ldr	r1, [r3, #20]
 800152a:	0649      	lsls	r1, r1, #25
{
 800152c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800152e:	d502      	bpl.n	8001536 <HAL_ETH_IRQHandler+0x16>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001530:	69d9      	ldr	r1, [r3, #28]
 8001532:	0649      	lsls	r1, r1, #25
 8001534:	d448      	bmi.n	80015c8 <HAL_ETH_IRQHandler+0xa8>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001536:	6959      	ldr	r1, [r3, #20]
 8001538:	07c9      	lsls	r1, r1, #31
 800153a:	d502      	bpl.n	8001542 <HAL_ETH_IRQHandler+0x22>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800153c:	69d9      	ldr	r1, [r3, #28]
 800153e:	07c8      	lsls	r0, r1, #31
 8001540:	d438      	bmi.n	80015b4 <HAL_ETH_IRQHandler+0x94>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001542:	6959      	ldr	r1, [r3, #20]
 8001544:	0409      	lsls	r1, r1, #16
 8001546:	d502      	bpl.n	800154e <HAL_ETH_IRQHandler+0x2e>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001548:	69d9      	ldr	r1, [r3, #28]
 800154a:	0408      	lsls	r0, r1, #16
 800154c:	d40e      	bmi.n	800156c <HAL_ETH_IRQHandler+0x4c>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800154e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001550:	0719      	lsls	r1, r3, #28
 8001552:	d423      	bmi.n	800159c <HAL_ETH_IRQHandler+0x7c>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_ETH_IRQHandler+0xd0>)
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	0312      	lsls	r2, r2, #12
 800155a:	d400      	bmi.n	800155e <HAL_ETH_IRQHandler+0x3e>
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800155c:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800155e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001562:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff ffd9 	bl	800151c <HAL_ETH_WakeUpCallback>
}
 800156a:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800156c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8001570:	f042 0208 	orr.w	r2, r2, #8
 8001574:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800157e:	695a      	ldr	r2, [r3, #20]
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001580:	d12a      	bne.n	80015d8 <HAL_ETH_IRQHandler+0xb8>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001582:	f248 6180 	movw	r1, #34432	; 0x8680
 8001586:	400a      	ands	r2, r1
 8001588:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800158c:	6159      	str	r1, [r3, #20]
      HAL_ETH_ErrorCallback(heth);
 800158e:	4620      	mov	r0, r4
 8001590:	f000 fcaa 	bl	8001ee8 <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001594:	6822      	ldr	r2, [r4, #0]
 8001596:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001598:	0719      	lsls	r1, r3, #28
 800159a:	d5db      	bpl.n	8001554 <HAL_ETH_IRQHandler+0x34>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800159c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800159e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80015a2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff ffb6 	bl	8001518 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80015b2:	e7cf      	b.n	8001554 <HAL_ETH_IRQHandler+0x34>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80015b4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80015b8:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 80015ba:	4620      	mov	r0, r4
 80015bc:	f000 fc8e 	bl	8001edc <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80015c0:	6822      	ldr	r2, [r4, #0]
 80015c2:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80015c6:	e7bc      	b.n	8001542 <HAL_ETH_IRQHandler+0x22>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_ETH_IRQHandler+0xd4>)
 80015ca:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 80015cc:	f000 fc80 	bl	8001ed0 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80015d0:	6822      	ldr	r2, [r4, #0]
 80015d2:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80015d6:	e7ae      	b.n	8001536 <HAL_ETH_IRQHandler+0x16>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80015d8:	4807      	ldr	r0, [pc, #28]	; (80015f8 <HAL_ETH_IRQHandler+0xd8>)
 80015da:	4002      	ands	r2, r0
 80015dc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80015e0:	69da      	ldr	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 80015e2:	21e0      	movs	r1, #224	; 0xe0
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80015e4:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 80015e8:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 80015ea:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80015ee:	e7ce      	b.n	800158e <HAL_ETH_IRQHandler+0x6e>
 80015f0:	40013c00 	.word	0x40013c00
 80015f4:	00010040 	.word	0x00010040
 80015f8:	007e2000 	.word	0x007e2000

080015fc <HAL_ETH_GetDMAError>:
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
  return heth->DMAErrorCode;
 80015fc:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001608:	2200      	movs	r2, #0
 800160a:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160c:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800186c <HAL_GPIO_Init+0x268>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001610:	4e8f      	ldr	r6, [pc, #572]	; (8001850 <HAL_GPIO_Init+0x24c>)
{
 8001612:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001614:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001616:	4689      	mov	r9, r1
 8001618:	e005      	b.n	8001626 <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161a:	3301      	adds	r3, #1
 800161c:	2b10      	cmp	r3, #16
 800161e:	f102 0202 	add.w	r2, r2, #2
 8001622:	f000 8094 	beq.w	800174e <HAL_GPIO_Init+0x14a>
    ioposition = 0x01U << position;
 8001626:	2101      	movs	r1, #1
 8001628:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162a:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 800162e:	43a1      	bics	r1, r4
 8001630:	d1f3      	bne.n	800161a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001632:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001636:	f00c 0103 	and.w	r1, ip, #3
 800163a:	1e4d      	subs	r5, r1, #1
 800163c:	2d01      	cmp	r5, #1
 800163e:	f240 8089 	bls.w	8001754 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001642:	2903      	cmp	r1, #3
 8001644:	f040 80c8 	bne.w	80017d8 <HAL_GPIO_Init+0x1d4>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001648:	4091      	lsls	r1, r2
 800164a:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 800164c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001650:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001652:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001656:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001658:	d0df      	beq.n	800161a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2100      	movs	r1, #0
 800165c:	9103      	str	r1, [sp, #12]
 800165e:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001662:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001666:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 800166a:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 800166e:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001672:	9103      	str	r1, [sp, #12]
 8001674:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001676:	f023 0103 	bic.w	r1, r3, #3
 800167a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800167e:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001682:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001686:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800168a:	00bf      	lsls	r7, r7, #2
 800168c:	250f      	movs	r5, #15
 800168e:	40bd      	lsls	r5, r7
 8001690:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001694:	4d6f      	ldr	r5, [pc, #444]	; (8001854 <HAL_GPIO_Init+0x250>)
 8001696:	42a8      	cmp	r0, r5
 8001698:	d02e      	beq.n	80016f8 <HAL_GPIO_Init+0xf4>
 800169a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800169e:	42a8      	cmp	r0, r5
 80016a0:	f000 809e 	beq.w	80017e0 <HAL_GPIO_Init+0x1dc>
 80016a4:	4d6c      	ldr	r5, [pc, #432]	; (8001858 <HAL_GPIO_Init+0x254>)
 80016a6:	42a8      	cmp	r0, r5
 80016a8:	f000 80a1 	beq.w	80017ee <HAL_GPIO_Init+0x1ea>
 80016ac:	4d6b      	ldr	r5, [pc, #428]	; (800185c <HAL_GPIO_Init+0x258>)
 80016ae:	42a8      	cmp	r0, r5
 80016b0:	f000 80a4 	beq.w	80017fc <HAL_GPIO_Init+0x1f8>
 80016b4:	4d6a      	ldr	r5, [pc, #424]	; (8001860 <HAL_GPIO_Init+0x25c>)
 80016b6:	42a8      	cmp	r0, r5
 80016b8:	f000 80a7 	beq.w	800180a <HAL_GPIO_Init+0x206>
 80016bc:	4d69      	ldr	r5, [pc, #420]	; (8001864 <HAL_GPIO_Init+0x260>)
 80016be:	42a8      	cmp	r0, r5
 80016c0:	f000 80b1 	beq.w	8001826 <HAL_GPIO_Init+0x222>
 80016c4:	4d68      	ldr	r5, [pc, #416]	; (8001868 <HAL_GPIO_Init+0x264>)
 80016c6:	42a8      	cmp	r0, r5
 80016c8:	f000 80b4 	beq.w	8001834 <HAL_GPIO_Init+0x230>
 80016cc:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8001870 <HAL_GPIO_Init+0x26c>
 80016d0:	4570      	cmp	r0, lr
 80016d2:	f000 80a1 	beq.w	8001818 <HAL_GPIO_Init+0x214>
 80016d6:	f8df e19c 	ldr.w	lr, [pc, #412]	; 8001874 <HAL_GPIO_Init+0x270>
 80016da:	4570      	cmp	r0, lr
 80016dc:	f000 80b1 	beq.w	8001842 <HAL_GPIO_Init+0x23e>
 80016e0:	f8df e194 	ldr.w	lr, [pc, #404]	; 8001878 <HAL_GPIO_Init+0x274>
 80016e4:	4570      	cmp	r0, lr
 80016e6:	bf0c      	ite	eq
 80016e8:	f04f 0e09 	moveq.w	lr, #9
 80016ec:	f04f 0e0a 	movne.w	lr, #10
 80016f0:	fa0e f707 	lsl.w	r7, lr, r7
 80016f4:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f8:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 80016fc:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001702:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001706:	bf0c      	ite	eq
 8001708:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 800170a:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 800170e:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8001710:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001712:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001716:	bf0c      	ite	eq
 8001718:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800171a:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 800171e:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8001720:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001722:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001726:	bf0c      	ite	eq
 8001728:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800172a:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 800172e:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001730:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001732:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800173a:	bf0c      	ite	eq
 800173c:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 800173e:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001742:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8001744:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	f102 0202 	add.w	r2, r2, #2
 800174a:	f47f af6c 	bne.w	8001626 <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 800174e:	b005      	add	sp, #20
 8001750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001754:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8001758:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800175a:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800175e:	2503      	movs	r5, #3
 8001760:	fa05 fe02 	lsl.w	lr, r5, r2
 8001764:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001768:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 800176c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800176e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001770:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001774:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001778:	f3cc 1700 	ubfx	r7, ip, #4, #1
 800177c:	409f      	lsls	r7, r3
 800177e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001782:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001784:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001786:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178a:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800178e:	4097      	lsls	r7, r2
 8001790:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001794:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8001796:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001798:	fa01 f102 	lsl.w	r1, r1, r2
 800179c:	f47f af56 	bne.w	800164c <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 80017a0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80017a4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a8:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80017ac:	f8de 7020 	ldr.w	r7, [lr, #32]
 80017b0:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b2:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b6:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ba:	fa07 f708 	lsl.w	r7, r7, r8
 80017be:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c0:	270f      	movs	r7, #15
 80017c2:	fa07 f808 	lsl.w	r8, r7, r8
 80017c6:	9f00      	ldr	r7, [sp, #0]
 80017c8:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017cc:	9f01      	ldr	r7, [sp, #4]
 80017ce:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80017d2:	f8ce 7020 	str.w	r7, [lr, #32]
 80017d6:	e739      	b.n	800164c <HAL_GPIO_Init+0x48>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d8:	2503      	movs	r5, #3
 80017da:	4095      	lsls	r5, r2
 80017dc:	43ed      	mvns	r5, r5
 80017de:	e7d1      	b.n	8001784 <HAL_GPIO_Init+0x180>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e0:	f04f 0e01 	mov.w	lr, #1
 80017e4:	fa0e f707 	lsl.w	r7, lr, r7
 80017e8:	ea48 0807 	orr.w	r8, r8, r7
 80017ec:	e784      	b.n	80016f8 <HAL_GPIO_Init+0xf4>
 80017ee:	f04f 0e02 	mov.w	lr, #2
 80017f2:	fa0e f707 	lsl.w	r7, lr, r7
 80017f6:	ea48 0807 	orr.w	r8, r8, r7
 80017fa:	e77d      	b.n	80016f8 <HAL_GPIO_Init+0xf4>
 80017fc:	f04f 0e03 	mov.w	lr, #3
 8001800:	fa0e f707 	lsl.w	r7, lr, r7
 8001804:	ea48 0807 	orr.w	r8, r8, r7
 8001808:	e776      	b.n	80016f8 <HAL_GPIO_Init+0xf4>
 800180a:	f04f 0e04 	mov.w	lr, #4
 800180e:	fa0e f707 	lsl.w	r7, lr, r7
 8001812:	ea48 0807 	orr.w	r8, r8, r7
 8001816:	e76f      	b.n	80016f8 <HAL_GPIO_Init+0xf4>
 8001818:	f04f 0e07 	mov.w	lr, #7
 800181c:	fa0e f707 	lsl.w	r7, lr, r7
 8001820:	ea48 0807 	orr.w	r8, r8, r7
 8001824:	e768      	b.n	80016f8 <HAL_GPIO_Init+0xf4>
 8001826:	f04f 0e05 	mov.w	lr, #5
 800182a:	fa0e f707 	lsl.w	r7, lr, r7
 800182e:	ea48 0807 	orr.w	r8, r8, r7
 8001832:	e761      	b.n	80016f8 <HAL_GPIO_Init+0xf4>
 8001834:	f04f 0e06 	mov.w	lr, #6
 8001838:	fa0e f707 	lsl.w	r7, lr, r7
 800183c:	ea48 0807 	orr.w	r8, r8, r7
 8001840:	e75a      	b.n	80016f8 <HAL_GPIO_Init+0xf4>
 8001842:	f04f 0e08 	mov.w	lr, #8
 8001846:	fa0e f707 	lsl.w	r7, lr, r7
 800184a:	ea48 0807 	orr.w	r8, r8, r7
 800184e:	e753      	b.n	80016f8 <HAL_GPIO_Init+0xf4>
 8001850:	40013c00 	.word	0x40013c00
 8001854:	40020000 	.word	0x40020000
 8001858:	40020800 	.word	0x40020800
 800185c:	40020c00 	.word	0x40020c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40021400 	.word	0x40021400
 8001868:	40021800 	.word	0x40021800
 800186c:	40023800 	.word	0x40023800
 8001870:	40021c00 	.word	0x40021c00
 8001874:	40022000 	.word	0x40022000
 8001878:	40022400 	.word	0x40022400

0800187c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800187c:	b902      	cbnz	r2, 8001880 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	0409      	lsls	r1, r1, #16
 8001880:	6181      	str	r1, [r0, #24]
  }
}
 8001882:	4770      	bx	lr

08001884 <HAL_SD_ErrorCallback>:
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8001888:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800188a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  {
    return HAL_SD_ERROR_PARAM;
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800188c:	6d21      	ldr	r1, [r4, #80]	; 0x50
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800188e:	6820      	ldr	r0, [r4, #0]
 8001890:	f240 533a 	movw	r3, #1338	; 0x53a
 8001894:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001896:	0409      	lsls	r1, r1, #16
 8001898:	f000 fa44 	bl	8001d24 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800189c:	4605      	mov	r5, r0
 800189e:	b180      	cbz	r0, 80018c2 <SD_DMATxAbort+0x3a>
    hsd->ErrorCode |= errorstate;
 80018a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80018a2:	2201      	movs	r2, #1
    hsd->ErrorCode |= errorstate;
 80018a4:	4328      	orrs	r0, r5
  hsd->Context = SD_CONTEXT_NONE;
 80018a6:	2300      	movs	r3, #0
    hsd->ErrorCode |= errorstate;
 80018a8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80018aa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80018ae:	6323      	str	r3, [r4, #48]	; 0x30
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80018b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 80018b2:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80018b4:	b913      	cbnz	r3, 80018bc <SD_DMATxAbort+0x34>
    HAL_SD_AbortCallback(hsd);
 80018b6:	f000 fad7 	bl	8001e68 <HAL_SD_AbortCallback>
}
 80018ba:	bd38      	pop	{r3, r4, r5, pc}
    HAL_SD_ErrorCallback(hsd);
 80018bc:	f7ff ffe2 	bl	8001884 <HAL_SD_ErrorCallback>
}
 80018c0:	bd38      	pop	{r3, r4, r5, pc}
  {
    return errorstate;
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80018c2:	6820      	ldr	r0, [r4, #0]
 80018c4:	4629      	mov	r1, r5
 80018c6:	f000 f983 	bl	8001bd0 <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80018ca:	f3c0 2043 	ubfx	r0, r0, #9, #4
  hsd->State = HAL_SD_STATE_READY;
 80018ce:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80018d0:	3805      	subs	r0, #5
 80018d2:	4298      	cmp	r0, r3
  hsd->State = HAL_SD_STATE_READY;
 80018d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80018d8:	6325      	str	r5, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80018da:	d8e9      	bhi.n	80018b0 <SD_DMATxAbort+0x28>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80018dc:	6820      	ldr	r0, [r4, #0]
 80018de:	f000 f97b 	bl	8001bd8 <SDMMC_CmdStopTransfer>
 80018e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018e4:	4318      	orrs	r0, r3
 80018e6:	63a0      	str	r0, [r4, #56]	; 0x38
 80018e8:	e7e2      	b.n	80018b0 <SD_DMATxAbort+0x28>
 80018ea:	bf00      	nop

080018ec <HAL_SD_IRQHandler>:
{
 80018ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018f0:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80018f2:	6800      	ldr	r0, [r0, #0]
  uint32_t context = hsd->Context;
 80018f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80018f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018f8:	041a      	lsls	r2, r3, #16
{
 80018fa:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80018fc:	d51d      	bpl.n	800193a <HAL_SD_IRQHandler+0x4e>
 80018fe:	072b      	lsls	r3, r5, #28
 8001900:	f100 80c0 	bmi.w	8001a84 <HAL_SD_IRQHandler+0x198>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8001904:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001906:	05db      	lsls	r3, r3, #23
 8001908:	d56b      	bpl.n	80019e2 <HAL_SD_IRQHandler+0xf6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800190a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001910:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001912:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8001916:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800191a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800191c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	62c3      	str	r3, [r0, #44]	; 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 8001924:	0629      	lsls	r1, r5, #24
 8001926:	d505      	bpl.n	8001934 <HAL_SD_IRQHandler+0x48>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8001928:	06aa      	lsls	r2, r5, #26
 800192a:	f100 80fa 	bmi.w	8001b22 <HAL_SD_IRQHandler+0x236>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800192e:	07ab      	lsls	r3, r5, #30
 8001930:	f000 80c9 	beq.w	8001ac6 <HAL_SD_IRQHandler+0x1da>
}
 8001934:	b002      	add	sp, #8
 8001936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800193a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800193c:	05df      	lsls	r7, r3, #23
 800193e:	d523      	bpl.n	8001988 <HAL_SD_IRQHandler+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8001940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001944:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001946:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001948:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800194c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001950:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8001952:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8001954:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 800195c:	d5e2      	bpl.n	8001924 <HAL_SD_IRQHandler+0x38>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800195e:	f015 0f22 	tst.w	r5, #34	; 0x22
 8001962:	f040 80be 	bne.w	8001ae2 <HAL_SD_IRQHandler+0x1f6>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001966:	f240 533a 	movw	r3, #1338	; 0x53a
 800196a:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800196c:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800196e:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8001970:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        HAL_SD_RxCpltCallback(hsd);
 8001974:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8001976:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8001978:	07ac      	lsls	r4, r5, #30
 800197a:	f000 80ad 	beq.w	8001ad8 <HAL_SD_IRQHandler+0x1ec>
        HAL_SD_RxCpltCallback(hsd);
 800197e:	f000 fa7b 	bl	8001e78 <HAL_SD_RxCpltCallback>
}
 8001982:	b002      	add	sp, #8
 8001984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001988:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800198a:	045f      	lsls	r7, r3, #17
 800198c:	d52a      	bpl.n	80019e4 <HAL_SD_IRQHandler+0xf8>
 800198e:	072e      	lsls	r6, r5, #28
 8001990:	d528      	bpl.n	80019e4 <HAL_SD_IRQHandler+0xf8>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8001992:	6a66      	ldr	r6, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 8001994:	2e00      	cmp	r6, #0
 8001996:	d0cd      	beq.n	8001934 <HAL_SD_IRQHandler+0x48>
  tmp = hsd->pTxBuffPtr;
 8001998:	6a27      	ldr	r7, [r4, #32]
 800199a:	f107 0804 	add.w	r8, r7, #4
 800199e:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80019a2:	e000      	b.n	80019a6 <HAL_SD_IRQHandler+0xba>
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80019a4:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 80019a6:	f818 3c04 	ldrb.w	r3, [r8, #-4]
 80019aa:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80019ac:	f818 2c03 	ldrb.w	r2, [r8, #-3]
 80019b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019b4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80019b6:	f818 2c02 	ldrb.w	r2, [r8, #-2]
 80019ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019be:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80019c0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80019c4:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 80019c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    for(count = 0U; count < 8U; count++)
 80019ca:	f108 0804 	add.w	r8, r8, #4
      data |= ((uint32_t)(*tmp) << 24U);
 80019ce:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80019d0:	f000 f8f8 	bl	8001bc4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80019d4:	45a8      	cmp	r8, r5
 80019d6:	d1e5      	bne.n	80019a4 <HAL_SD_IRQHandler+0xb8>
      tmp++;
 80019d8:	3720      	adds	r7, #32
      dataremaining--;
 80019da:	3e20      	subs	r6, #32
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
 80019dc:	e9c4 7608 	strd	r7, r6, [r4, #32]
  }
}
 80019e0:	e7a8      	b.n	8001934 <HAL_SD_IRQHandler+0x48>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80019e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80019e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80019e6:	f240 233a 	movw	r3, #570	; 0x23a
 80019ea:	421a      	tst	r2, r3
 80019ec:	d0a2      	beq.n	8001934 <HAL_SD_IRQHandler+0x48>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80019ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019f0:	0799      	lsls	r1, r3, #30
 80019f2:	d503      	bpl.n	80019fc <HAL_SD_IRQHandler+0x110>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80019f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80019fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019fe:	071a      	lsls	r2, r3, #28
 8001a00:	d503      	bpl.n	8001a0a <HAL_SD_IRQHandler+0x11e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001a02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8001a0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a0c:	069b      	lsls	r3, r3, #26
 8001a0e:	d503      	bpl.n	8001a18 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001a10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a12:	f043 0320 	orr.w	r3, r3, #32
 8001a16:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8001a18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a1a:	06df      	lsls	r7, r3, #27
 8001a1c:	d503      	bpl.n	8001a26 <HAL_SD_IRQHandler+0x13a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a20:	f043 0310 	orr.w	r3, r3, #16
 8001a24:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8001a26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a28:	059e      	lsls	r6, r3, #22
 8001a2a:	d503      	bpl.n	8001a34 <HAL_SD_IRQHandler+0x148>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001a2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8001a34:	f240 733a 	movw	r3, #1850	; 0x73a
 8001a38:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001a3a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001a3c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8001a40:	f023 0302 	bic.w	r3, r3, #2
 8001a44:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001a46:	f000 f8c7 	bl	8001bd8 <SDMMC_CmdStopTransfer>
 8001a4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8001a4c:	0729      	lsls	r1, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001a4e:	ea40 0003 	orr.w	r0, r0, r3
 8001a52:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8001a54:	d44b      	bmi.n	8001aee <HAL_SD_IRQHandler+0x202>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8001a56:	062a      	lsls	r2, r5, #24
 8001a58:	f57f af6c 	bpl.w	8001934 <HAL_SD_IRQHandler+0x48>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8001a5c:	f015 0f30 	tst.w	r5, #48	; 0x30
 8001a60:	d155      	bne.n	8001b0e <HAL_SD_IRQHandler+0x222>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8001a62:	f015 0503 	ands.w	r5, r5, #3
 8001a66:	d069      	beq.n	8001b3c <HAL_SD_IRQHandler+0x250>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8001a68:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001a6a:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <HAL_SD_IRQHandler+0x264>)
 8001a6c:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8001a6e:	f7ff fc51 	bl	8001314 <HAL_DMA_Abort_IT>
 8001a72:	2800      	cmp	r0, #0
 8001a74:	f43f af5e 	beq.w	8001934 <HAL_SD_IRQHandler+0x48>
          SD_DMARxAbort(hsd->hdmarx);
 8001a78:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 8001a7a:	b002      	add	sp, #8
 8001a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 8001a80:	f7ff bf02 	b.w	8001888 <SD_DMATxAbort>
  dataremaining = hsd->RxXferSize;
 8001a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  if (dataremaining > 0U)
 8001a86:	2e00      	cmp	r6, #0
 8001a88:	f43f af54 	beq.w	8001934 <HAL_SD_IRQHandler+0x48>
  tmp = hsd->pRxBuffPtr;
 8001a8c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001a8e:	f107 0804 	add.w	r8, r7, #4
 8001a92:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8001a96:	e000      	b.n	8001a9a <HAL_SD_IRQHandler+0x1ae>
      data = SDIO_ReadFIFO(hsd->Instance);
 8001a98:	6820      	ldr	r0, [r4, #0]
 8001a9a:	f000 f88f 	bl	8001bbc <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8001a9e:	f808 0c04 	strb.w	r0, [r8, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8001aa2:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8001aa4:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8001aa6:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8001aa8:	f808 2c03 	strb.w	r2, [r8, #-3]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8001aac:	f808 3c02 	strb.w	r3, [r8, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8001ab0:	f808 0c01 	strb.w	r0, [r8, #-1]
    for(count = 0U; count < 8U; count++)
 8001ab4:	f108 0804 	add.w	r8, r8, #4
 8001ab8:	45a8      	cmp	r8, r5
 8001aba:	d1ed      	bne.n	8001a98 <HAL_SD_IRQHandler+0x1ac>
      tmp++;
 8001abc:	3720      	adds	r7, #32
      dataremaining--;
 8001abe:	3e20      	subs	r6, #32
    hsd->RxXferSize = dataremaining;
 8001ac0:	e9c4 760a 	strd	r7, r6, [r4, #40]	; 0x28
 8001ac4:	e736      	b.n	8001934 <HAL_SD_IRQHandler+0x48>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8001aca:	2101      	movs	r1, #1
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8001acc:	f023 0308 	bic.w	r3, r3, #8
 8001ad0:	62d3      	str	r3, [r2, #44]	; 0x2c
        HAL_SD_TxCpltCallback(hsd);
 8001ad2:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8001ad4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8001ad8:	f000 f9ca 	bl	8001e70 <HAL_SD_TxCpltCallback>
}
 8001adc:	b002      	add	sp, #8
 8001ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ae2:	f000 f879 	bl	8001bd8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b950      	cbnz	r0, 8001b00 <HAL_SD_IRQHandler+0x214>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001aea:	6820      	ldr	r0, [r4, #0]
 8001aec:	e73b      	b.n	8001966 <HAL_SD_IRQHandler+0x7a>
      hsd->State = HAL_SD_STATE_READY;
 8001aee:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8001af0:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8001af2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8001af6:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8001af8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8001afa:	f7ff fec3 	bl	8001884 <HAL_SD_ErrorCallback>
 8001afe:	e719      	b.n	8001934 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8001b00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b02:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 8001b04:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8001b06:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8001b08:	f7ff febc 	bl	8001884 <HAL_SD_ErrorCallback>
 8001b0c:	e7ed      	b.n	8001aea <HAL_SD_IRQHandler+0x1fe>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8001b0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_SD_IRQHandler+0x268>)
 8001b12:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8001b14:	f7ff fbfe 	bl	8001314 <HAL_DMA_Abort_IT>
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	f43f af0b 	beq.w	8001934 <HAL_SD_IRQHandler+0x48>
          SD_DMATxAbort(hsd->hdmatx);
 8001b1e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001b20:	e7ab      	b.n	8001a7a <HAL_SD_IRQHandler+0x18e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001b22:	f000 f859 	bl	8001bd8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001b26:	4603      	mov	r3, r0
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	f43f af00 	beq.w	800192e <HAL_SD_IRQHandler+0x42>
          hsd->ErrorCode |= errorstate;
 8001b2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b30:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 8001b32:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8001b34:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8001b36:	f7ff fea5 	bl	8001884 <HAL_SD_ErrorCallback>
 8001b3a:	e6f8      	b.n	800192e <HAL_SD_IRQHandler+0x42>
        hsd->State = HAL_SD_STATE_READY;
 8001b3c:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001b3e:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8001b40:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8001b42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001b46:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8001b48:	f000 f98e 	bl	8001e68 <HAL_SD_AbortCallback>
}
 8001b4c:	e6f2      	b.n	8001934 <HAL_SD_IRQHandler+0x48>
 8001b4e:	bf00      	nop
 8001b50:	08001b59 	.word	0x08001b59
 8001b54:	08001889 	.word	0x08001889

08001b58 <SD_DMARxAbort>:
 8001b58:	b538      	push	{r3, r4, r5, lr}
 8001b5a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001b5c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001b5e:	6820      	ldr	r0, [r4, #0]
 8001b60:	f240 533a 	movw	r3, #1338	; 0x53a
 8001b64:	6383      	str	r3, [r0, #56]	; 0x38
 8001b66:	0409      	lsls	r1, r1, #16
 8001b68:	f000 f8dc 	bl	8001d24 <SDMMC_CmdSendStatus>
 8001b6c:	4605      	mov	r5, r0
 8001b6e:	b180      	cbz	r0, 8001b92 <SD_DMARxAbort+0x3a>
 8001b70:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b72:	2201      	movs	r2, #1
 8001b74:	4328      	orrs	r0, r5
 8001b76:	2300      	movs	r3, #0
 8001b78:	63a0      	str	r0, [r4, #56]	; 0x38
 8001b7a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8001b7e:	6323      	str	r3, [r4, #48]	; 0x30
 8001b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b82:	4620      	mov	r0, r4
 8001b84:	b913      	cbnz	r3, 8001b8c <SD_DMARxAbort+0x34>
 8001b86:	f000 f96f 	bl	8001e68 <HAL_SD_AbortCallback>
 8001b8a:	bd38      	pop	{r3, r4, r5, pc}
 8001b8c:	f7ff fe7a 	bl	8001884 <HAL_SD_ErrorCallback>
 8001b90:	bd38      	pop	{r3, r4, r5, pc}
 8001b92:	6820      	ldr	r0, [r4, #0]
 8001b94:	4629      	mov	r1, r5
 8001b96:	f000 f81b 	bl	8001bd0 <SDIO_GetResponse>
 8001b9a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	3805      	subs	r0, #5
 8001ba2:	4298      	cmp	r0, r3
 8001ba4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001ba8:	6325      	str	r5, [r4, #48]	; 0x30
 8001baa:	d8e9      	bhi.n	8001b80 <SD_DMARxAbort+0x28>
 8001bac:	6820      	ldr	r0, [r4, #0]
 8001bae:	f000 f813 	bl	8001bd8 <SDMMC_CmdStopTransfer>
 8001bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bb4:	4318      	orrs	r0, r3
 8001bb6:	63a0      	str	r0, [r4, #56]	; 0x38
 8001bb8:	e7e2      	b.n	8001b80 <SD_DMARxAbort+0x28>
 8001bba:	bf00      	nop

08001bbc <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8001bbc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop

08001bc4 <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8001bc4:	680b      	ldr	r3, [r1, #0]
 8001bc6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8001bca:	2000      	movs	r0, #0
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop

08001bd0 <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8001bd0:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8001bd2:	5840      	ldr	r0, [r0, r1]
}  
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <SDMMC_CmdStopTransfer>:
  SDIOx->ARG = Command->Argument;
 8001bd8:	2300      	movs	r3, #0
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8001bda:	b410      	push	{r4}
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001bdc:	4a4d      	ldr	r2, [pc, #308]	; (8001d14 <SDMMC_CmdStopTransfer+0x13c>)
  SDIOx->ARG = Command->Argument;
 8001bde:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001be0:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	4c4c      	ldr	r4, [pc, #304]	; (8001d18 <SDMMC_CmdStopTransfer+0x140>)
 8001be6:	494d      	ldr	r1, [pc, #308]	; (8001d1c <SDMMC_CmdStopTransfer+0x144>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001be8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001bec:	f023 030f 	bic.w	r3, r3, #15
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001bf0:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001bf4:	f443 6389 	orr.w	r3, r3, #1096	; 0x448
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001bf8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001bfe:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001c02:	60c3      	str	r3, [r0, #12]
  
  do
  {
    if (count-- == 0U)
 8001c04:	1e53      	subs	r3, r2, #1
 8001c06:	b14a      	cbz	r2, 8001c1c <SDMMC_CmdStopTransfer+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8001c08:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8001c0a:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8001c0e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8001c12:	d001      	beq.n	8001c18 <SDMMC_CmdStopTransfer+0x40>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8001c14:	0512      	lsls	r2, r2, #20
 8001c16:	d507      	bpl.n	8001c28 <SDMMC_CmdStopTransfer+0x50>
    if (count-- == 0U)
 8001c18:	1c59      	adds	r1, r3, #1
 8001c1a:	d1f5      	bne.n	8001c08 <SDMMC_CmdStopTransfer+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8001c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c26:	4770      	bx	lr
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8001c28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c2a:	075c      	lsls	r4, r3, #29
 8001c2c:	d43d      	bmi.n	8001caa <SDMMC_CmdStopTransfer+0xd2>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8001c2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c30:	f013 0301 	ands.w	r3, r3, #1
 8001c34:	d134      	bne.n	8001ca0 <SDMMC_CmdStopTransfer+0xc8>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8001c36:	23c5      	movs	r3, #197	; 0xc5
 8001c38:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8001c3a:	6903      	ldr	r3, [r0, #16]
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d131      	bne.n	8001ca6 <SDMMC_CmdStopTransfer+0xce>
  return (*(__IO uint32_t *) tmp);
 8001c42:	6942      	ldr	r2, [r0, #20]
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <SDMMC_CmdStopTransfer+0x148>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0e9      	beq.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	db2f      	blt.n	8001cb0 <SDMMC_CmdStopTransfer+0xd8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8001c50:	0051      	lsls	r1, r2, #1
 8001c52:	d430      	bmi.n	8001cb6 <SDMMC_CmdStopTransfer+0xde>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8001c54:	0094      	lsls	r4, r2, #2
 8001c56:	d430      	bmi.n	8001cba <SDMMC_CmdStopTransfer+0xe2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8001c58:	00d0      	lsls	r0, r2, #3
 8001c5a:	d430      	bmi.n	8001cbe <SDMMC_CmdStopTransfer+0xe6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8001c5c:	0111      	lsls	r1, r2, #4
 8001c5e:	d431      	bmi.n	8001cc4 <SDMMC_CmdStopTransfer+0xec>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	d432      	bmi.n	8001cca <SDMMC_CmdStopTransfer+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8001c64:	01d0      	lsls	r0, r2, #7
 8001c66:	d433      	bmi.n	8001cd0 <SDMMC_CmdStopTransfer+0xf8>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8001c68:	0211      	lsls	r1, r2, #8
 8001c6a:	d434      	bmi.n	8001cd6 <SDMMC_CmdStopTransfer+0xfe>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8001c6c:	0254      	lsls	r4, r2, #9
 8001c6e:	d435      	bmi.n	8001cdc <SDMMC_CmdStopTransfer+0x104>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8001c70:	0290      	lsls	r0, r2, #10
 8001c72:	d43f      	bmi.n	8001cf4 <SDMMC_CmdStopTransfer+0x11c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8001c74:	02d1      	lsls	r1, r2, #11
 8001c76:	d43a      	bmi.n	8001cee <SDMMC_CmdStopTransfer+0x116>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8001c78:	0354      	lsls	r4, r2, #13
 8001c7a:	d435      	bmi.n	8001ce8 <SDMMC_CmdStopTransfer+0x110>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8001c7c:	0390      	lsls	r0, r2, #14
 8001c7e:	d430      	bmi.n	8001ce2 <SDMMC_CmdStopTransfer+0x10a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8001c80:	03d1      	lsls	r1, r2, #15
 8001c82:	d443      	bmi.n	8001d0c <SDMMC_CmdStopTransfer+0x134>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8001c84:	0414      	lsls	r4, r2, #16
 8001c86:	d43e      	bmi.n	8001d06 <SDMMC_CmdStopTransfer+0x12e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8001c88:	0450      	lsls	r0, r2, #17
 8001c8a:	d439      	bmi.n	8001d00 <SDMMC_CmdStopTransfer+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8001c8c:	0491      	lsls	r1, r2, #18
 8001c8e:	d434      	bmi.n	8001cfa <SDMMC_CmdStopTransfer+0x122>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8001c90:	f012 0f08 	tst.w	r2, #8
 8001c94:	bf14      	ite	ne
 8001c96:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8001c9a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001c9e:	e7bf      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8001ca4:	e7bc      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e7ba      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8001caa:	2304      	movs	r3, #4
 8001cac:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8001cae:	e7b7      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8001cb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb4:	e7b4      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8001cb6:	2340      	movs	r3, #64	; 0x40
 8001cb8:	e7b2      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	e7b0      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8001cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc2:	e7ad      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8001cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc8:	e7aa      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8001cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cce:	e7a7      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8001cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cd4:	e7a4      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8001cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cda:	e7a1      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8001cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce0:	e79e      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8001ce2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ce6:	e79b      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8001ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cec:	e798      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CC_ERR;
 8001cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf2:	e795      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8001cf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cf8:	e792      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ERASE_RESET;
 8001cfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cfe:	e78f      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8001d00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d04:	e78c      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8001d06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d0a:	e789      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8001d0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d10:	e786      	b.n	8001c20 <SDMMC_CmdStopTransfer+0x48>
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000
 8001d18:	10624dd3 	.word	0x10624dd3
 8001d1c:	05f5e100 	.word	0x05f5e100
 8001d20:	fdffe008 	.word	0xfdffe008

08001d24 <SDMMC_CmdSendStatus>:
  SDIOx->ARG = Command->Argument;
 8001d24:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001d26:	4a4c      	ldr	r2, [pc, #304]	; (8001e58 <SDMMC_CmdSendStatus+0x134>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001d28:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001d2a:	494c      	ldr	r1, [pc, #304]	; (8001e5c <SDMMC_CmdSendStatus+0x138>)
 8001d2c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001d2e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001d32:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001d36:	f023 030f 	bic.w	r3, r3, #15
 8001d3a:	f443 6389 	orr.w	r3, r3, #1096	; 0x448
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001d3e:	0a52      	lsrs	r2, r2, #9
 8001d40:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001d44:	f043 0305 	orr.w	r3, r3, #5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001d48:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001d4c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8001d4e:	1e53      	subs	r3, r2, #1
 8001d50:	b14a      	cbz	r2, 8001d66 <SDMMC_CmdSendStatus+0x42>
    sta_reg = SDIOx->STA;
 8001d52:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8001d54:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8001d58:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8001d5c:	d001      	beq.n	8001d62 <SDMMC_CmdSendStatus+0x3e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8001d5e:	0512      	lsls	r2, r2, #20
 8001d60:	d505      	bpl.n	8001d6e <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 8001d62:	1c59      	adds	r1, r3, #1
 8001d64:	d1f5      	bne.n	8001d52 <SDMMC_CmdSendStatus+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8001d66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8001d6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d70:	075b      	lsls	r3, r3, #29
 8001d72:	d43d      	bmi.n	8001df0 <SDMMC_CmdSendStatus+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8001d74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d76:	f013 0301 	ands.w	r3, r3, #1
 8001d7a:	d134      	bne.n	8001de6 <SDMMC_CmdSendStatus+0xc2>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8001d7c:	23c5      	movs	r3, #197	; 0xc5
 8001d7e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8001d80:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b0d      	cmp	r3, #13
 8001d86:	d131      	bne.n	8001dec <SDMMC_CmdSendStatus+0xc8>
  return (*(__IO uint32_t *) tmp);
 8001d88:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8001d8a:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <SDMMC_CmdSendStatus+0x13c>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0eb      	beq.n	8001d6a <SDMMC_CmdSendStatus+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	db2f      	blt.n	8001df6 <SDMMC_CmdSendStatus+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8001d96:	0050      	lsls	r0, r2, #1
 8001d98:	d430      	bmi.n	8001dfc <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8001d9a:	0091      	lsls	r1, r2, #2
 8001d9c:	d430      	bmi.n	8001e00 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8001d9e:	00d0      	lsls	r0, r2, #3
 8001da0:	d430      	bmi.n	8001e04 <SDMMC_CmdSendStatus+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8001da2:	0111      	lsls	r1, r2, #4
 8001da4:	d431      	bmi.n	8001e0a <SDMMC_CmdSendStatus+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8001da6:	0150      	lsls	r0, r2, #5
 8001da8:	d432      	bmi.n	8001e10 <SDMMC_CmdSendStatus+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8001daa:	01d1      	lsls	r1, r2, #7
 8001dac:	d433      	bmi.n	8001e16 <SDMMC_CmdSendStatus+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8001dae:	0210      	lsls	r0, r2, #8
 8001db0:	d434      	bmi.n	8001e1c <SDMMC_CmdSendStatus+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8001db2:	0251      	lsls	r1, r2, #9
 8001db4:	d435      	bmi.n	8001e22 <SDMMC_CmdSendStatus+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8001db6:	0290      	lsls	r0, r2, #10
 8001db8:	d43f      	bmi.n	8001e3a <SDMMC_CmdSendStatus+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8001dba:	02d1      	lsls	r1, r2, #11
 8001dbc:	d43a      	bmi.n	8001e34 <SDMMC_CmdSendStatus+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8001dbe:	0350      	lsls	r0, r2, #13
 8001dc0:	d435      	bmi.n	8001e2e <SDMMC_CmdSendStatus+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8001dc2:	0391      	lsls	r1, r2, #14
 8001dc4:	d430      	bmi.n	8001e28 <SDMMC_CmdSendStatus+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8001dc6:	03d0      	lsls	r0, r2, #15
 8001dc8:	d443      	bmi.n	8001e52 <SDMMC_CmdSendStatus+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8001dca:	0411      	lsls	r1, r2, #16
 8001dcc:	d43e      	bmi.n	8001e4c <SDMMC_CmdSendStatus+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8001dce:	0450      	lsls	r0, r2, #17
 8001dd0:	d439      	bmi.n	8001e46 <SDMMC_CmdSendStatus+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8001dd2:	0491      	lsls	r1, r2, #18
 8001dd4:	d434      	bmi.n	8001e40 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8001dd6:	f012 0f08 	tst.w	r2, #8
 8001dda:	bf14      	ite	ne
 8001ddc:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8001de0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001de4:	e7c1      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001de6:	2201      	movs	r2, #1
 8001de8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8001dea:	e7be      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e7bc      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8001df0:	2304      	movs	r3, #4
 8001df2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8001df4:	e7b9      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8001df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfa:	e7b6      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8001dfc:	2340      	movs	r3, #64	; 0x40
 8001dfe:	e7b4      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	e7b2      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8001e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e08:	e7af      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8001e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0e:	e7ac      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8001e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e14:	e7a9      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8001e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e1a:	e7a6      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8001e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e20:	e7a3      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8001e22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e26:	e7a0      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8001e28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e2c:	e79d      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8001e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e32:	e79a      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_CC_ERR;
 8001e34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e38:	e797      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8001e3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e3e:	e794      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 8001e40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e44:	e791      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8001e46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e4a:	e78e      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8001e4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e50:	e78b      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8001e52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e56:	e788      	b.n	8001d6a <SDMMC_CmdSendStatus+0x46>
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	10624dd3 	.word	0x10624dd3
 8001e60:	fdffe008 	.word	0xfdffe008

08001e64 <BSP_SD_AbortCallback>:
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8001e68:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8001e6a:	f7ff fffb 	bl	8001e64 <BSP_SD_AbortCallback>
}
 8001e6e:	bd08      	pop	{r3, pc}

08001e70 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001e70:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8001e72:	f000 f805 	bl	8001e80 <BSP_SD_WriteCpltCallback>
}
 8001e76:	bd08      	pop	{r3, pc}

08001e78 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001e78:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8001e7a:	f000 f815 	bl	8001ea8 <BSP_SD_ReadCpltCallback>
}
 8001e7e:	bd08      	pop	{r3, pc}

08001e80 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8001e80:	b500      	push	{lr}
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <BSP_SD_WriteCpltCallback+0x24>)
{
 8001e84:	b083      	sub	sp, #12
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8001e86:	2300      	movs	r3, #0
   const uint16_t msg = WRITE_CPLT_MSG;
 8001e88:	f04f 0c02 	mov.w	ip, #2
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8001e8c:	6810      	ldr	r0, [r2, #0]
   const uint16_t msg = WRITE_CPLT_MSG;
 8001e8e:	f8ad c006 	strh.w	ip, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8001e92:	461a      	mov	r2, r3
 8001e94:	f10d 0106 	add.w	r1, sp, #6
 8001e98:	f000 f860 	bl	8001f5c <osMessageQueuePut>
#endif
}
 8001e9c:	b003      	add	sp, #12
 8001e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ea2:	bf00      	nop
 8001ea4:	20000418 	.word	0x20000418

08001ea8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8001ea8:	b500      	push	{lr}
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <BSP_SD_ReadCpltCallback+0x24>)
{
 8001eac:	b083      	sub	sp, #12
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8001eae:	2300      	movs	r3, #0
   const uint16_t msg = READ_CPLT_MSG;
 8001eb0:	f04f 0c01 	mov.w	ip, #1
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8001eb4:	6810      	ldr	r0, [r2, #0]
   const uint16_t msg = READ_CPLT_MSG;
 8001eb6:	f8ad c006 	strh.w	ip, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f10d 0106 	add.w	r1, sp, #6
 8001ec0:	f000 f84c 	bl	8001f5c <osMessageQueuePut>
#endif
}
 8001ec4:	b003      	add	sp, #12
 8001ec6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eca:	bf00      	nop
 8001ecc:	20000418 	.word	0x20000418

08001ed0 <HAL_ETH_RxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(RxPktSemaphore);
 8001ed0:	4b01      	ldr	r3, [pc, #4]	; (8001ed8 <HAL_ETH_RxCpltCallback+0x8>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	f000 b816 	b.w	8001f04 <osSemaphoreRelease>
 8001ed8:	2000041c 	.word	0x2000041c

08001edc <HAL_ETH_TxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(TxPktSemaphore);
 8001edc:	4b01      	ldr	r3, [pc, #4]	; (8001ee4 <HAL_ETH_TxCpltCallback+0x8>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	f000 b810 	b.w	8001f04 <osSemaphoreRelease>
 8001ee4:	20000420 	.word	0x20000420

08001ee8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8001ee8:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8001eea:	f7ff fb87 	bl	80015fc <HAL_ETH_GetDMAError>
 8001eee:	0603      	lsls	r3, r0, #24
 8001ef0:	d400      	bmi.n	8001ef4 <HAL_ETH_ErrorCallback+0xc>
  {
     osSemaphoreRelease(RxPktSemaphore);
  }
}
 8001ef2:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_ETH_ErrorCallback+0x18>)
 8001ef6:	6818      	ldr	r0, [r3, #0]
}
 8001ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8001efc:	f000 b802 	b.w	8001f04 <osSemaphoreRelease>
 8001f00:	2000041c 	.word	0x2000041c

08001f04 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8001f04:	b330      	cbz	r0, 8001f54 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001f06:	b510      	push	{r4, lr}
 8001f08:	b082      	sub	sp, #8
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f0a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8001f0e:	b1ab      	cbz	r3, 8001f3c <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8001f10:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001f12:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8001f14:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001f16:	f000 fbcf 	bl	80026b8 <xQueueGiveFromISR>
 8001f1a:	2801      	cmp	r0, #1
 8001f1c:	d117      	bne.n	8001f4e <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8001f1e:	9b01      	ldr	r3, [sp, #4]
 8001f20:	b193      	cbz	r3, 8001f48 <osSemaphoreRelease+0x44>
 8001f22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001f2e:	f3bf 8f4f 	dsb	sy
 8001f32:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8001f36:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f000 f99e 	bl	8002280 <xQueueGenericSend>
 8001f44:	2801      	cmp	r0, #1
 8001f46:	d102      	bne.n	8001f4e <osSemaphoreRelease+0x4a>
  stat = osOK;
 8001f48:	2000      	movs	r0, #0
}
 8001f4a:	b002      	add	sp, #8
 8001f4c:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 8001f4e:	f06f 0002 	mvn.w	r0, #2
 8001f52:	e7fa      	b.n	8001f4a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8001f54:	f06f 0003 	mvn.w	r0, #3
}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop

08001f5c <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001f5c:	b570      	push	{r4, r5, r6, lr}
 8001f5e:	461c      	mov	r4, r3
 8001f60:	b082      	sub	sp, #8
 8001f62:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8001f66:	b1be      	cbz	r6, 8001f98 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001f68:	b350      	cbz	r0, 8001fc0 <osMessageQueuePut+0x64>
 8001f6a:	b349      	cbz	r1, 8001fc0 <osMessageQueuePut+0x64>
 8001f6c:	bb43      	cbnz	r3, 8001fc0 <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001f6e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8001f70:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001f72:	f000 fb3b 	bl	80025ec <xQueueGenericSendFromISR>
 8001f76:	2801      	cmp	r0, #1
 8001f78:	d11e      	bne.n	8001fb8 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8001f7a:	9b01      	ldr	r3, [sp, #4]
 8001f7c:	b1cb      	cbz	r3, 8001fb2 <osMessageQueuePut+0x56>
 8001f7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f86:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001f8a:	f3bf 8f4f 	dsb	sy
 8001f8e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8001f92:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 8001f94:	b002      	add	sp, #8
 8001f96:	bd70      	pop	{r4, r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001f98:	b190      	cbz	r0, 8001fc0 <osMessageQueuePut+0x64>
 8001f9a:	b189      	cbz	r1, 8001fc0 <osMessageQueuePut+0x64>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001f9c:	4633      	mov	r3, r6
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	f000 f96e 	bl	8002280 <xQueueGenericSend>
 8001fa4:	2801      	cmp	r0, #1
 8001fa6:	d004      	beq.n	8001fb2 <osMessageQueuePut+0x56>
        if (timeout != 0U) {
 8001fa8:	b134      	cbz	r4, 8001fb8 <osMessageQueuePut+0x5c>
          stat = osErrorTimeout;
 8001faa:	f06f 0001 	mvn.w	r0, #1
}
 8001fae:	b002      	add	sp, #8
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
  stat = osOK;
 8001fb2:	2000      	movs	r0, #0
}
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd70      	pop	{r4, r5, r6, pc}
          stat = osErrorResource;
 8001fb8:	f06f 0002 	mvn.w	r0, #2
}
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
      stat = osErrorParameter;
 8001fc0:	f06f 0003 	mvn.w	r0, #3
 8001fc4:	e7e6      	b.n	8001f94 <osMessageQueuePut+0x38>
 8001fc6:	bf00      	nop

08001fc8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <vApplicationGetIdleTaskMemory+0x14>)
 8001fca:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fcc:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fce:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001fd0:	4c03      	ldr	r4, [pc, #12]	; (8001fe0 <vApplicationGetIdleTaskMemory+0x18>)
 8001fd2:	600c      	str	r4, [r1, #0]
}
 8001fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fd8:	6013      	str	r3, [r2, #0]
}
 8001fda:	4770      	bx	lr
 8001fdc:	200006d4 	.word	0x200006d4
 8001fe0:	200004d4 	.word	0x200004d4

08001fe4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <vApplicationGetTimerTaskMemory+0x18>)
 8001fe6:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001fe8:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001fea:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001fee:	4c04      	ldr	r4, [pc, #16]	; (8002000 <vApplicationGetTimerTaskMemory+0x1c>)
 8001ff0:	600c      	str	r4, [r1, #0]
}
 8001ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000b30 	.word	0x20000b30
 8002000:	20000730 	.word	0x20000730

08002004 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002004:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002008:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800200c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800200e:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002012:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002016:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop

0800201c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800201c:	2300      	movs	r3, #0
 800201e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop

08002024 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002024:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800202a:	6802      	ldr	r2, [r0, #0]
{
 800202c:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800202e:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002030:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8002032:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002034:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002036:	6099      	str	r1, [r3, #8]
}
 8002038:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800203c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800203e:	6002      	str	r2, [r0, #0]
}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002044:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002046:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002048:	1c6b      	adds	r3, r5, #1
 800204a:	d010      	beq.n	800206e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800204c:	f100 0308 	add.w	r3, r0, #8
 8002050:	461c      	mov	r4, r3
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	42aa      	cmp	r2, r5
 8002058:	d9fa      	bls.n	8002050 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800205a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800205c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800205e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002060:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002062:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002064:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8002066:	6108      	str	r0, [r1, #16]
}
 8002068:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800206a:	6002      	str	r2, [r0, #0]
}
 800206c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800206e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8002070:	6863      	ldr	r3, [r4, #4]
 8002072:	e7f2      	b.n	800205a <vListInsert+0x16>

08002074 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002074:	6903      	ldr	r3, [r0, #16]
{
 8002076:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002078:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800207c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800207e:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8002080:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002082:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002084:	bf08      	it	eq
 8002086:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8002088:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800208a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800208e:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8002090:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8002092:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002094:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8002096:	6818      	ldr	r0, [r3, #0]
}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop

0800209c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020a0:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020a4:	b920      	cbnz	r0, 80020b0 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020a6:	6825      	ldr	r5, [r4, #0]
 80020a8:	b34d      	cbz	r5, 80020fe <prvCopyDataToQueue+0x62>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020aa:	3601      	adds	r6, #1
 80020ac:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80020b0:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020b2:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 80020b4:	b97d      	cbnz	r5, 80020d6 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020b6:	6860      	ldr	r0, [r4, #4]
 80020b8:	f007 fe1a 	bl	8009cf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020bc:	6863      	ldr	r3, [r4, #4]
 80020be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020c0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020c2:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020c4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020c6:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80020c8:	bf24      	itt	cs
 80020ca:	6823      	ldrcs	r3, [r4, #0]
 80020cc:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020ce:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80020d0:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020d2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80020d6:	68e0      	ldr	r0, [r4, #12]
 80020d8:	f007 fe0a 	bl	8009cf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80020dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020de:	68e3      	ldr	r3, [r4, #12]
 80020e0:	4251      	negs	r1, r2
 80020e2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020e4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80020e6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d202      	bcs.n	80020f2 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80020ec:	68a3      	ldr	r3, [r4, #8]
 80020ee:	440b      	add	r3, r1
 80020f0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80020f2:	2d02      	cmp	r5, #2
 80020f4:	d008      	beq.n	8002108 <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020f6:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80020f8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020fa:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020fe:	68a0      	ldr	r0, [r4, #8]
 8002100:	f001 fda6 	bl	8003c50 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002104:	60a5      	str	r5, [r4, #8]
 8002106:	e7d0      	b.n	80020aa <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002108:	2e01      	cmp	r6, #1
 800210a:	bf38      	it	cc
 800210c:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 800210e:	2000      	movs	r0, #0
 8002110:	e7cc      	b.n	80020ac <prvCopyDataToQueue+0x10>
 8002112:	bf00      	nop

08002114 <xQueueGenericCreateStatic>:
	{
 8002114:	b530      	push	{r4, r5, lr}
 8002116:	b083      	sub	sp, #12
 8002118:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800211c:	b940      	cbnz	r0, 8002130 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	e7fe      	b.n	800212e <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8002130:	461d      	mov	r5, r3
 8002132:	b17b      	cbz	r3, 8002154 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002134:	b302      	cbz	r2, 8002178 <xQueueGenericCreateStatic+0x64>
 8002136:	b1b1      	cbz	r1, 8002166 <xQueueGenericCreateStatic+0x52>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002138:	2350      	movs	r3, #80	; 0x50
 800213a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800213c:	9b01      	ldr	r3, [sp, #4]
 800213e:	2b50      	cmp	r3, #80	; 0x50
 8002140:	d027      	beq.n	8002192 <xQueueGenericCreateStatic+0x7e>
 8002142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	e7fe      	b.n	8002152 <xQueueGenericCreateStatic+0x3e>
 8002154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8002164:	e7fe      	b.n	8002164 <xQueueGenericCreateStatic+0x50>
 8002166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216a:	f383 8811 	msr	BASEPRI, r3
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002176:	e7fe      	b.n	8002176 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002178:	2900      	cmp	r1, #0
 800217a:	d135      	bne.n	80021e8 <xQueueGenericCreateStatic+0xd4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800217c:	2250      	movs	r2, #80	; 0x50
 800217e:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002180:	9a01      	ldr	r2, [sp, #4]
 8002182:	2a50      	cmp	r2, #80	; 0x50
 8002184:	d1dd      	bne.n	8002142 <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002186:	2201      	movs	r2, #1
 8002188:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800218c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800218e:	462a      	mov	r2, r5
 8002190:	e004      	b.n	800219c <xQueueGenericCreateStatic+0x88>
 8002192:	f04f 0c01 	mov.w	ip, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002196:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002198:	f885 c046 	strb.w	ip, [r5, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800219c:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
 80021a0:	602a      	str	r2, [r5, #0]
	taskENTER_CRITICAL();
 80021a2:	f002 f84f 	bl	8004244 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021a6:	e9d5 120f 	ldrd	r1, r2, [r5, #60]	; 0x3c
 80021aa:	6828      	ldr	r0, [r5, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021ac:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ae:	fb02 f101 	mul.w	r1, r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021b2:	1a8a      	subs	r2, r1, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021b4:	4401      	add	r1, r0
 80021b6:	60a9      	str	r1, [r5, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021b8:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ba:	4402      	add	r2, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021bc:	63a9      	str	r1, [r5, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80021be:	21ff      	movs	r1, #255	; 0xff
 80021c0:	f885 1044 	strb.w	r1, [r5, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021c4:	60ea      	str	r2, [r5, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 80021c6:	f885 1045 	strb.w	r1, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021ca:	f105 0010 	add.w	r0, r5, #16
 80021ce:	f7ff ff19 	bl	8002004 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80021d6:	f7ff ff15 	bl	8002004 <vListInitialise>
	taskEXIT_CRITICAL();
 80021da:	f002 f855 	bl	8004288 <vPortExitCritical>
	}
 80021de:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 80021e0:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 80021e4:	b003      	add	sp, #12
 80021e6:	bd30      	pop	{r4, r5, pc}
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	f383 8811 	msr	BASEPRI, r3
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021f8:	e7fe      	b.n	80021f8 <xQueueGenericCreateStatic+0xe4>
 80021fa:	bf00      	nop

080021fc <xQueueGenericCreate>:
	{
 80021fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021fe:	b940      	cbnz	r0, 8002212 <xQueueGenericCreate+0x16>
 8002200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	e7fe      	b.n	8002210 <xQueueGenericCreate+0x14>
 8002212:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002214:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002218:	3050      	adds	r0, #80	; 0x50
 800221a:	460e      	mov	r6, r1
 800221c:	4617      	mov	r7, r2
 800221e:	f002 f971 	bl	8004504 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002222:	4604      	mov	r4, r0
 8002224:	b340      	cbz	r0, 8002278 <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002226:	2300      	movs	r3, #0
 8002228:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800222c:	b336      	cbz	r6, 800227c <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800222e:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002232:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8002234:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8002238:	f002 f804 	bl	8004244 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800223c:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8002240:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002242:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002244:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002248:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800224a:	440a      	add	r2, r1
 800224c:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800224e:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002250:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002252:	63a2      	str	r2, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002254:	22ff      	movs	r2, #255	; 0xff
 8002256:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800225a:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 800225c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002260:	f104 0010 	add.w	r0, r4, #16
 8002264:	f7ff fece 	bl	8002004 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002268:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800226c:	f7ff feca 	bl	8002004 <vListInitialise>
	taskEXIT_CRITICAL();
 8002270:	f002 f80a 	bl	8004288 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8002274:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8002278:	4620      	mov	r0, r4
 800227a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800227c:	4603      	mov	r3, r0
 800227e:	e7d8      	b.n	8002232 <xQueueGenericCreate+0x36>

08002280 <xQueueGenericSend>:
{
 8002280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002284:	b085      	sub	sp, #20
 8002286:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002288:	2800      	cmp	r0, #0
 800228a:	f000 80a4 	beq.w	80023d6 <xQueueGenericSend+0x156>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800228e:	4688      	mov	r8, r1
 8002290:	461f      	mov	r7, r3
 8002292:	4604      	mov	r4, r0
 8002294:	2900      	cmp	r1, #0
 8002296:	f000 8091 	beq.w	80023bc <xQueueGenericSend+0x13c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800229a:	2f02      	cmp	r7, #2
 800229c:	d10b      	bne.n	80022b6 <xQueueGenericSend+0x36>
 800229e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d008      	beq.n	80022b6 <xQueueGenericSend+0x36>
 80022a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	e7fe      	b.n	80022b4 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022b6:	f001 fc75 	bl	8003ba4 <xTaskGetSchedulerState>
 80022ba:	4605      	mov	r5, r0
 80022bc:	2800      	cmp	r0, #0
 80022be:	f000 8093 	beq.w	80023e8 <xQueueGenericSend+0x168>
 80022c2:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022c4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 80022c8:	f001 ffbc 	bl	8004244 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80022ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f0c0 80ef 	bcc.w	80024b4 <xQueueGenericSend+0x234>
 80022d6:	2f02      	cmp	r7, #2
 80022d8:	f000 80ec 	beq.w	80024b4 <xQueueGenericSend+0x234>
				if( xTicksToWait == ( TickType_t ) 0 )
 80022dc:	9801      	ldr	r0, [sp, #4]
 80022de:	2800      	cmp	r0, #0
 80022e0:	f000 8101 	beq.w	80024e6 <xQueueGenericSend+0x266>
				else if( xEntryTimeSet == pdFALSE )
 80022e4:	2d00      	cmp	r5, #0
 80022e6:	f000 80e1 	beq.w	80024ac <xQueueGenericSend+0x22c>
		taskEXIT_CRITICAL();
 80022ea:	f001 ffcd 	bl	8004288 <vPortExitCritical>
		vTaskSuspendAll();
 80022ee:	f001 f91b 	bl	8003528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022f2:	f001 ffa7 	bl	8004244 <vPortEnterCritical>
 80022f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80022fa:	2bff      	cmp	r3, #255	; 0xff
 80022fc:	bf04      	itt	eq
 80022fe:	2300      	moveq	r3, #0
 8002300:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8002304:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002308:	2bff      	cmp	r3, #255	; 0xff
 800230a:	bf04      	itt	eq
 800230c:	2300      	moveq	r3, #0
 800230e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8002312:	f001 ffb9 	bl	8004288 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002316:	a901      	add	r1, sp, #4
 8002318:	a802      	add	r0, sp, #8
 800231a:	f001 fbf5 	bl	8003b08 <xTaskCheckForTimeOut>
 800231e:	2800      	cmp	r0, #0
 8002320:	f040 80e6 	bne.w	80024f0 <xQueueGenericSend+0x270>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002324:	f001 ff8e 	bl	8004244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002328:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800232a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800232c:	429a      	cmp	r2, r3
 800232e:	d068      	beq.n	8002402 <xQueueGenericSend+0x182>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002330:	f001 ffaa 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002334:	f001 ff86 	bl	8004244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002338:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800233c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800233e:	2d00      	cmp	r5, #0
 8002340:	dc04      	bgt.n	800234c <xQueueGenericSend+0xcc>
 8002342:	e011      	b.n	8002368 <xQueueGenericSend+0xe8>
			--cTxLock;
 8002344:	1e6a      	subs	r2, r5, #1
 8002346:	b2d3      	uxtb	r3, r2
 8002348:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800234a:	b16b      	cbz	r3, 8002368 <xQueueGenericSend+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800234c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800234e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002350:	b153      	cbz	r3, 8002368 <xQueueGenericSend+0xe8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002352:	f001 fb85 	bl	8003a60 <xTaskRemoveFromEventList>
 8002356:	2800      	cmp	r0, #0
 8002358:	d0f4      	beq.n	8002344 <xQueueGenericSend+0xc4>
						vTaskMissedYield();
 800235a:	f001 fc1d 	bl	8003b98 <vTaskMissedYield>
			--cTxLock;
 800235e:	1e6a      	subs	r2, r5, #1
 8002360:	b2d3      	uxtb	r3, r2
 8002362:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f1      	bne.n	800234c <xQueueGenericSend+0xcc>
		pxQueue->cTxLock = queueUNLOCKED;
 8002368:	23ff      	movs	r3, #255	; 0xff
 800236a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800236e:	f001 ff8b 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002372:	f001 ff67 	bl	8004244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002376:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800237a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800237c:	2d00      	cmp	r5, #0
 800237e:	dd14      	ble.n	80023aa <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002380:	f104 0910 	add.w	r9, r4, #16
 8002384:	e003      	b.n	800238e <xQueueGenericSend+0x10e>
				--cRxLock;
 8002386:	1e6a      	subs	r2, r5, #1
 8002388:	b2d3      	uxtb	r3, r2
 800238a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800238c:	b16b      	cbz	r3, 80023aa <xQueueGenericSend+0x12a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800238e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002390:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002392:	b153      	cbz	r3, 80023aa <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002394:	f001 fb64 	bl	8003a60 <xTaskRemoveFromEventList>
 8002398:	2800      	cmp	r0, #0
 800239a:	d0f4      	beq.n	8002386 <xQueueGenericSend+0x106>
					vTaskMissedYield();
 800239c:	f001 fbfc 	bl	8003b98 <vTaskMissedYield>
				--cRxLock;
 80023a0:	1e6a      	subs	r2, r5, #1
 80023a2:	b2d3      	uxtb	r3, r2
 80023a4:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f1      	bne.n	800238e <xQueueGenericSend+0x10e>
		pxQueue->cRxLock = queueUNLOCKED;
 80023aa:	23ff      	movs	r3, #255	; 0xff
 80023ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80023b0:	f001 ff6a 	bl	8004288 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80023b4:	f001 fa14 	bl	80037e0 <xTaskResumeAll>
 80023b8:	2501      	movs	r5, #1
 80023ba:	e785      	b.n	80022c8 <xQueueGenericSend+0x48>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f43f af6b 	beq.w	800229a <xQueueGenericSend+0x1a>
 80023c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	e7fe      	b.n	80023d4 <xQueueGenericSend+0x154>
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80023e6:	e7fe      	b.n	80023e6 <xQueueGenericSend+0x166>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023e8:	9b01      	ldr	r3, [sp, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f43f af6a 	beq.w	80022c4 <xQueueGenericSend+0x44>
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	e7fe      	b.n	8002400 <xQueueGenericSend+0x180>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002402:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8002406:	f001 ff3f 	bl	8004288 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800240a:	9901      	ldr	r1, [sp, #4]
 800240c:	4648      	mov	r0, r9
 800240e:	f001 fa99 	bl	8003944 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002412:	f001 ff17 	bl	8004244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002416:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800241a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800241c:	2d00      	cmp	r5, #0
 800241e:	dc04      	bgt.n	800242a <xQueueGenericSend+0x1aa>
 8002420:	e011      	b.n	8002446 <xQueueGenericSend+0x1c6>
			--cTxLock;
 8002422:	1e6b      	subs	r3, r5, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002428:	b16a      	cbz	r2, 8002446 <xQueueGenericSend+0x1c6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800242a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800242c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800242e:	b153      	cbz	r3, 8002446 <xQueueGenericSend+0x1c6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002430:	f001 fb16 	bl	8003a60 <xTaskRemoveFromEventList>
 8002434:	2800      	cmp	r0, #0
 8002436:	d0f4      	beq.n	8002422 <xQueueGenericSend+0x1a2>
						vTaskMissedYield();
 8002438:	f001 fbae 	bl	8003b98 <vTaskMissedYield>
			--cTxLock;
 800243c:	1e6b      	subs	r3, r5, #1
 800243e:	b2da      	uxtb	r2, r3
 8002440:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002442:	2a00      	cmp	r2, #0
 8002444:	d1f1      	bne.n	800242a <xQueueGenericSend+0x1aa>
		pxQueue->cTxLock = queueUNLOCKED;
 8002446:	23ff      	movs	r3, #255	; 0xff
 8002448:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800244c:	f001 ff1c 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002450:	f001 fef8 	bl	8004244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002454:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002458:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800245a:	2d00      	cmp	r5, #0
 800245c:	dc04      	bgt.n	8002468 <xQueueGenericSend+0x1e8>
 800245e:	e011      	b.n	8002484 <xQueueGenericSend+0x204>
				--cRxLock;
 8002460:	1e6b      	subs	r3, r5, #1
 8002462:	b2da      	uxtb	r2, r3
 8002464:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002466:	b16a      	cbz	r2, 8002484 <xQueueGenericSend+0x204>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002468:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800246c:	b153      	cbz	r3, 8002484 <xQueueGenericSend+0x204>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246e:	f001 faf7 	bl	8003a60 <xTaskRemoveFromEventList>
 8002472:	2800      	cmp	r0, #0
 8002474:	d0f4      	beq.n	8002460 <xQueueGenericSend+0x1e0>
					vTaskMissedYield();
 8002476:	f001 fb8f 	bl	8003b98 <vTaskMissedYield>
				--cRxLock;
 800247a:	1e6b      	subs	r3, r5, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002480:	2a00      	cmp	r2, #0
 8002482:	d1f1      	bne.n	8002468 <xQueueGenericSend+0x1e8>
		pxQueue->cRxLock = queueUNLOCKED;
 8002484:	23ff      	movs	r3, #255	; 0xff
 8002486:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800248a:	f001 fefd 	bl	8004288 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800248e:	f001 f9a7 	bl	80037e0 <xTaskResumeAll>
 8002492:	2800      	cmp	r0, #0
 8002494:	d190      	bne.n	80023b8 <xQueueGenericSend+0x138>
					portYIELD_WITHIN_API();
 8002496:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800249a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	e785      	b.n	80023b8 <xQueueGenericSend+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024ac:	a802      	add	r0, sp, #8
 80024ae:	f001 fb1f 	bl	8003af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024b2:	e71a      	b.n	80022ea <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024b4:	463a      	mov	r2, r7
 80024b6:	4641      	mov	r1, r8
 80024b8:	4620      	mov	r0, r4
 80024ba:	f7ff fdef 	bl	800209c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d153      	bne.n	800256c <xQueueGenericSend+0x2ec>
					else if( xYieldRequired != pdFALSE )
 80024c4:	b148      	cbz	r0, 80024da <xQueueGenericSend+0x25a>
						queueYIELD_IF_USING_PREEMPTION();
 80024c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80024ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80024da:	f001 fed5 	bl	8004288 <vPortExitCritical>
				return pdPASS;
 80024de:	2001      	movs	r0, #1
}
 80024e0:	b005      	add	sp, #20
 80024e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024e6:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
 80024e8:	f001 fece 	bl	8004288 <vPortExitCritical>
					return errQUEUE_FULL;
 80024ec:	9800      	ldr	r0, [sp, #0]
 80024ee:	e7f7      	b.n	80024e0 <xQueueGenericSend+0x260>
	taskENTER_CRITICAL();
 80024f0:	f001 fea8 	bl	8004244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80024f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80024f8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024fa:	2d00      	cmp	r5, #0
 80024fc:	dd10      	ble.n	8002520 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024fe:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8002502:	e003      	b.n	800250c <xQueueGenericSend+0x28c>
			--cTxLock;
 8002504:	1e6b      	subs	r3, r5, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800250a:	b14a      	cbz	r2, 8002520 <xQueueGenericSend+0x2a0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800250c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800250e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002510:	b133      	cbz	r3, 8002520 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002512:	f001 faa5 	bl	8003a60 <xTaskRemoveFromEventList>
 8002516:	2800      	cmp	r0, #0
 8002518:	d0f4      	beq.n	8002504 <xQueueGenericSend+0x284>
						vTaskMissedYield();
 800251a:	f001 fb3d 	bl	8003b98 <vTaskMissedYield>
 800251e:	e7f1      	b.n	8002504 <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 8002520:	23ff      	movs	r3, #255	; 0xff
 8002522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002526:	f001 feaf 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 800252a:	f001 fe8b 	bl	8004244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800252e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002532:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002534:	2d00      	cmp	r5, #0
 8002536:	dd10      	ble.n	800255a <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002538:	f104 0610 	add.w	r6, r4, #16
 800253c:	e003      	b.n	8002546 <xQueueGenericSend+0x2c6>
				--cRxLock;
 800253e:	1e6b      	subs	r3, r5, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002544:	b14a      	cbz	r2, 800255a <xQueueGenericSend+0x2da>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002546:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002548:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800254a:	b133      	cbz	r3, 800255a <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800254c:	f001 fa88 	bl	8003a60 <xTaskRemoveFromEventList>
 8002550:	2800      	cmp	r0, #0
 8002552:	d0f4      	beq.n	800253e <xQueueGenericSend+0x2be>
					vTaskMissedYield();
 8002554:	f001 fb20 	bl	8003b98 <vTaskMissedYield>
 8002558:	e7f1      	b.n	800253e <xQueueGenericSend+0x2be>
		pxQueue->cRxLock = queueUNLOCKED;
 800255a:	23ff      	movs	r3, #255	; 0xff
 800255c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002560:	f001 fe92 	bl	8004288 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8002564:	f001 f93c 	bl	80037e0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8002568:	2000      	movs	r0, #0
 800256a:	e7b9      	b.n	80024e0 <xQueueGenericSend+0x260>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800256c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002570:	f001 fa76 	bl	8003a60 <xTaskRemoveFromEventList>
 8002574:	2800      	cmp	r0, #0
 8002576:	d0b0      	beq.n	80024da <xQueueGenericSend+0x25a>
 8002578:	e7a5      	b.n	80024c6 <xQueueGenericSend+0x246>
 800257a:	bf00      	nop

0800257c <xQueueCreateMutex>:
	{
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002580:	2050      	movs	r0, #80	; 0x50
 8002582:	f001 ffbf 	bl	8004504 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002586:	4604      	mov	r4, r0
 8002588:	b370      	cbz	r0, 80025e8 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800258a:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800258c:	2301      	movs	r3, #1
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800258e:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002592:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8002594:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 8002598:	f001 fe54 	bl	8004244 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800259c:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 80025a0:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025a2:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025a4:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ac:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ae:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025b0:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b2:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025b4:	63a5      	str	r5, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025b6:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 80025ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025c2:	f7ff fd1f 	bl	8002004 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025ca:	f7ff fd1b 	bl	8002004 <vListInitialise>
	taskEXIT_CRITICAL();
 80025ce:	f001 fe5b 	bl	8004288 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 80025d2:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80025d6:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80025d8:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80025da:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80025dc:	462b      	mov	r3, r5
 80025de:	462a      	mov	r2, r5
 80025e0:	4629      	mov	r1, r5
 80025e2:	4620      	mov	r0, r4
 80025e4:	f7ff fe4c 	bl	8002280 <xQueueGenericSend>
	}
 80025e8:	4620      	mov	r0, r4
 80025ea:	bd70      	pop	{r4, r5, r6, pc}

080025ec <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 80025ec:	2800      	cmp	r0, #0
 80025ee:	d04b      	beq.n	8002688 <xQueueGenericSendFromISR+0x9c>
{
 80025f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f4:	460e      	mov	r6, r1
 80025f6:	4617      	mov	r7, r2
 80025f8:	461d      	mov	r5, r3
 80025fa:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025fc:	b321      	cbz	r1, 8002648 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025fe:	2d02      	cmp	r5, #2
 8002600:	d10b      	bne.n	800261a <xQueueGenericSendFromISR+0x2e>
 8002602:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d008      	beq.n	800261a <xQueueGenericSendFromISR+0x2e>
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	e7fe      	b.n	8002618 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800261a:	f001 ff45 	bl	80044a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800261e:	f3ef 8811 	mrs	r8, BASEPRI
 8002622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	f3bf 8f6f 	isb	sy
 800262e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002632:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002634:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002636:	429a      	cmp	r2, r3
 8002638:	d312      	bcc.n	8002660 <xQueueGenericSendFromISR+0x74>
 800263a:	2d02      	cmp	r5, #2
 800263c:	d010      	beq.n	8002660 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 800263e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002640:	f388 8811 	msr	BASEPRI, r8
}
 8002644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002648:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0d7      	beq.n	80025fe <xQueueGenericSendFromISR+0x12>
	__asm volatile
 800264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002652:	f383 8811 	msr	BASEPRI, r3
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	e7fe      	b.n	800265e <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002660:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8002662:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002668:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 800266a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800266c:	4620      	mov	r0, r4
 800266e:	f7ff fd15 	bl	800209c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	d011      	beq.n	800269a <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002676:	1c6b      	adds	r3, r5, #1
 8002678:	b25b      	sxtb	r3, r3
 800267a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800267e:	2001      	movs	r0, #1
	__asm volatile
 8002680:	f388 8811 	msr	BASEPRI, r8
}
 8002684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002698:	e7fe      	b.n	8002698 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800269a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ee      	beq.n	800267e <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026a4:	f001 f9dc 	bl	8003a60 <xTaskRemoveFromEventList>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d0e8      	beq.n	800267e <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 80026ac:	2f00      	cmp	r7, #0
 80026ae:	d0e6      	beq.n	800267e <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026b0:	2001      	movs	r0, #1
 80026b2:	6038      	str	r0, [r7, #0]
 80026b4:	e7c4      	b.n	8002640 <xQueueGenericSendFromISR+0x54>
 80026b6:	bf00      	nop

080026b8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80026b8:	b370      	cbz	r0, 8002718 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 80026ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	4606      	mov	r6, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80026c0:	b143      	cbz	r3, 80026d4 <xQueueGiveFromISR+0x1c>
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	e7fe      	b.n	80026d2 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80026d4:	6803      	ldr	r3, [r0, #0]
 80026d6:	460c      	mov	r4, r1
 80026d8:	b33b      	cbz	r3, 800272a <xQueueGiveFromISR+0x72>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026da:	f001 fee5 	bl	80044a8 <vPortValidateInterruptPriority>
	__asm volatile
 80026de:	f3ef 8511 	mrs	r5, BASEPRI
 80026e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e6:	f383 8811 	msr	BASEPRI, r3
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026f2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80026f4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d923      	bls.n	8002742 <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 80026fa:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026fe:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8002700:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002702:	63b3      	str	r3, [r6, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8002704:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8002706:	d020      	beq.n	800274a <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002708:	3301      	adds	r3, #1
 800270a:	b25b      	sxtb	r3, r3
 800270c:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
			xReturn = pdPASS;
 8002710:	2001      	movs	r0, #1
	__asm volatile
 8002712:	f385 8811 	msr	BASEPRI, r5
}
 8002716:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002728:	e7fe      	b.n	8002728 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800272a:	6883      	ldr	r3, [r0, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0d4      	beq.n	80026da <xQueueGiveFromISR+0x22>
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	e7fe      	b.n	8002740 <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
 8002742:	2000      	movs	r0, #0
	__asm volatile
 8002744:	f385 8811 	msr	BASEPRI, r5
}
 8002748:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800274a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0df      	beq.n	8002710 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002750:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8002754:	f001 f984 	bl	8003a60 <xTaskRemoveFromEventList>
 8002758:	2800      	cmp	r0, #0
 800275a:	d0d9      	beq.n	8002710 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 800275c:	2c00      	cmp	r4, #0
 800275e:	d0d7      	beq.n	8002710 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002760:	2001      	movs	r0, #1
 8002762:	6020      	str	r0, [r4, #0]
 8002764:	e7ee      	b.n	8002744 <xQueueGiveFromISR+0x8c>
 8002766:	bf00      	nop

08002768 <xQueueReceive>:
{
 8002768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800276c:	b085      	sub	sp, #20
 800276e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002770:	2800      	cmp	r0, #0
 8002772:	f000 815f 	beq.w	8002a34 <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002776:	460f      	mov	r7, r1
 8002778:	4604      	mov	r4, r0
 800277a:	2900      	cmp	r1, #0
 800277c:	f000 8094 	beq.w	80028a8 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002780:	f001 fa10 	bl	8003ba4 <xTaskGetSchedulerState>
 8002784:	2800      	cmp	r0, #0
 8002786:	f000 809c 	beq.w	80028c2 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800278a:	f001 fd5b 	bl	8004244 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800278e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002790:	2d00      	cmp	r5, #0
 8002792:	d172      	bne.n	800287a <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002794:	9b01      	ldr	r3, [sp, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80f1 	beq.w	800297e <xQueueReceive+0x216>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800279c:	a802      	add	r0, sp, #8
 800279e:	f001 f9a7 	bl	8003af0 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 80027a2:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 80027a8:	f001 fd6e 	bl	8004288 <vPortExitCritical>
		vTaskSuspendAll();
 80027ac:	f000 febc 	bl	8003528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027b0:	f001 fd48 	bl	8004244 <vPortEnterCritical>
 80027b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80027b8:	2bff      	cmp	r3, #255	; 0xff
 80027ba:	bf08      	it	eq
 80027bc:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80027c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80027c4:	2bff      	cmp	r3, #255	; 0xff
 80027c6:	bf08      	it	eq
 80027c8:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80027cc:	f001 fd5c 	bl	8004288 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d0:	a901      	add	r1, sp, #4
 80027d2:	a802      	add	r0, sp, #8
 80027d4:	f001 f998 	bl	8003b08 <xTaskCheckForTimeOut>
 80027d8:	2800      	cmp	r0, #0
 80027da:	d17f      	bne.n	80028dc <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 80027dc:	f001 fd32 	bl	8004244 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80027e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80d1 	beq.w	800298a <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 80027e8:	f001 fd4e 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 80027ec:	f001 fd2a 	bl	8004244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80027f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80027f4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027f6:	2d00      	cmp	r5, #0
 80027f8:	dc04      	bgt.n	8002804 <xQueueReceive+0x9c>
 80027fa:	e011      	b.n	8002820 <xQueueReceive+0xb8>
			--cTxLock;
 80027fc:	1e6b      	subs	r3, r5, #1
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002802:	b16a      	cbz	r2, 8002820 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002804:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002806:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002808:	b153      	cbz	r3, 8002820 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800280a:	f001 f929 	bl	8003a60 <xTaskRemoveFromEventList>
 800280e:	2800      	cmp	r0, #0
 8002810:	d0f4      	beq.n	80027fc <xQueueReceive+0x94>
						vTaskMissedYield();
 8002812:	f001 f9c1 	bl	8003b98 <vTaskMissedYield>
			--cTxLock;
 8002816:	1e6b      	subs	r3, r5, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800281c:	2a00      	cmp	r2, #0
 800281e:	d1f1      	bne.n	8002804 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 8002820:	23ff      	movs	r3, #255	; 0xff
 8002822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002826:	f001 fd2f 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 800282a:	f001 fd0b 	bl	8004244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800282e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002832:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002834:	2d00      	cmp	r5, #0
 8002836:	dd14      	ble.n	8002862 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002838:	f104 0910 	add.w	r9, r4, #16
 800283c:	e003      	b.n	8002846 <xQueueReceive+0xde>
				--cRxLock;
 800283e:	1e6b      	subs	r3, r5, #1
 8002840:	b2da      	uxtb	r2, r3
 8002842:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002844:	b16a      	cbz	r2, 8002862 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002846:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002848:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800284a:	b153      	cbz	r3, 8002862 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800284c:	f001 f908 	bl	8003a60 <xTaskRemoveFromEventList>
 8002850:	2800      	cmp	r0, #0
 8002852:	d0f4      	beq.n	800283e <xQueueReceive+0xd6>
					vTaskMissedYield();
 8002854:	f001 f9a0 	bl	8003b98 <vTaskMissedYield>
				--cRxLock;
 8002858:	1e6b      	subs	r3, r5, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800285e:	2a00      	cmp	r2, #0
 8002860:	d1f1      	bne.n	8002846 <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 8002862:	23ff      	movs	r3, #255	; 0xff
 8002864:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002868:	f001 fd0e 	bl	8004288 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800286c:	f000 ffb8 	bl	80037e0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002870:	f001 fce8 	bl	8004244 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002874:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002876:	2d00      	cmp	r5, #0
 8002878:	d07d      	beq.n	8002976 <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800287a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800287c:	b152      	cbz	r2, 8002894 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800287e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002880:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002882:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002884:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002886:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002888:	bf24      	itt	cs
 800288a:	6821      	ldrcs	r1, [r4, #0]
 800288c:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800288e:	4638      	mov	r0, r7
 8002890:	f007 fa2e 	bl	8009cf0 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002894:	3d01      	subs	r5, #1
 8002896:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002898:	6923      	ldr	r3, [r4, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 80d3 	bne.w	8002a46 <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 80028a0:	f001 fcf2 	bl	8004288 <vPortExitCritical>
				return pdPASS;
 80028a4:	2001      	movs	r0, #1
 80028a6:	e06d      	b.n	8002984 <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f43f af68 	beq.w	8002780 <xQueueReceive+0x18>
	__asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	e7fe      	b.n	80028c0 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028c2:	9b01      	ldr	r3, [sp, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f43f af60 	beq.w	800278a <xQueueReceive+0x22>
 80028ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	e7fe      	b.n	80028da <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 80028dc:	f001 fcb2 	bl	8004244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80028e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80028e4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028e6:	2d00      	cmp	r5, #0
 80028e8:	dc04      	bgt.n	80028f4 <xQueueReceive+0x18c>
 80028ea:	e011      	b.n	8002910 <xQueueReceive+0x1a8>
			--cTxLock;
 80028ec:	1e6b      	subs	r3, r5, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028f2:	b16a      	cbz	r2, 8002910 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028f8:	b153      	cbz	r3, 8002910 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028fa:	f001 f8b1 	bl	8003a60 <xTaskRemoveFromEventList>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d0f4      	beq.n	80028ec <xQueueReceive+0x184>
						vTaskMissedYield();
 8002902:	f001 f949 	bl	8003b98 <vTaskMissedYield>
			--cTxLock;
 8002906:	1e6b      	subs	r3, r5, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800290c:	2a00      	cmp	r2, #0
 800290e:	d1f1      	bne.n	80028f4 <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 8002910:	23ff      	movs	r3, #255	; 0xff
 8002912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002916:	f001 fcb7 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 800291a:	f001 fc93 	bl	8004244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800291e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002922:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002924:	2d00      	cmp	r5, #0
 8002926:	dd14      	ble.n	8002952 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002928:	f104 0910 	add.w	r9, r4, #16
 800292c:	e003      	b.n	8002936 <xQueueReceive+0x1ce>
				--cRxLock;
 800292e:	1e6b      	subs	r3, r5, #1
 8002930:	b2da      	uxtb	r2, r3
 8002932:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002934:	b16a      	cbz	r2, 8002952 <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002936:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002938:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800293a:	b153      	cbz	r3, 8002952 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800293c:	f001 f890 	bl	8003a60 <xTaskRemoveFromEventList>
 8002940:	2800      	cmp	r0, #0
 8002942:	d0f4      	beq.n	800292e <xQueueReceive+0x1c6>
					vTaskMissedYield();
 8002944:	f001 f928 	bl	8003b98 <vTaskMissedYield>
				--cRxLock;
 8002948:	1e6b      	subs	r3, r5, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800294e:	2a00      	cmp	r2, #0
 8002950:	d1f1      	bne.n	8002936 <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8002952:	23ff      	movs	r3, #255	; 0xff
 8002954:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002958:	f001 fc96 	bl	8004288 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800295c:	f000 ff40 	bl	80037e0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8002960:	f001 fc70 	bl	8004244 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002964:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002966:	b153      	cbz	r3, 800297e <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 8002968:	f001 fc8e 	bl	8004288 <vPortExitCritical>
		taskENTER_CRITICAL();
 800296c:	f001 fc6a 	bl	8004244 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002970:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002972:	2d00      	cmp	r5, #0
 8002974:	d181      	bne.n	800287a <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002976:	9b01      	ldr	r3, [sp, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f47f af15 	bne.w	80027a8 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 800297e:	f001 fc83 	bl	8004288 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002982:	2000      	movs	r0, #0
}
 8002984:	b005      	add	sp, #20
 8002986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800298a:	f001 fc7d 	bl	8004288 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800298e:	9901      	ldr	r1, [sp, #4]
 8002990:	4630      	mov	r0, r6
 8002992:	f000 ffd7 	bl	8003944 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002996:	f001 fc55 	bl	8004244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800299a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800299e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029a0:	2d00      	cmp	r5, #0
 80029a2:	dc04      	bgt.n	80029ae <xQueueReceive+0x246>
 80029a4:	e011      	b.n	80029ca <xQueueReceive+0x262>
			--cTxLock;
 80029a6:	1e6b      	subs	r3, r5, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029ac:	b16a      	cbz	r2, 80029ca <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029b0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029b2:	b153      	cbz	r3, 80029ca <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029b4:	f001 f854 	bl	8003a60 <xTaskRemoveFromEventList>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d0f4      	beq.n	80029a6 <xQueueReceive+0x23e>
						vTaskMissedYield();
 80029bc:	f001 f8ec 	bl	8003b98 <vTaskMissedYield>
			--cTxLock;
 80029c0:	1e6b      	subs	r3, r5, #1
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029c6:	2a00      	cmp	r2, #0
 80029c8:	d1f1      	bne.n	80029ae <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 80029ca:	23ff      	movs	r3, #255	; 0xff
 80029cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80029d0:	f001 fc5a 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 80029d4:	f001 fc36 	bl	8004244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80029d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80029dc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029de:	2d00      	cmp	r5, #0
 80029e0:	dd14      	ble.n	8002a0c <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029e2:	f104 0910 	add.w	r9, r4, #16
 80029e6:	e003      	b.n	80029f0 <xQueueReceive+0x288>
				--cRxLock;
 80029e8:	1e6b      	subs	r3, r5, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029ee:	b16a      	cbz	r2, 8002a0c <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f4:	b153      	cbz	r3, 8002a0c <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f6:	f001 f833 	bl	8003a60 <xTaskRemoveFromEventList>
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d0f4      	beq.n	80029e8 <xQueueReceive+0x280>
					vTaskMissedYield();
 80029fe:	f001 f8cb 	bl	8003b98 <vTaskMissedYield>
				--cRxLock;
 8002a02:	1e6b      	subs	r3, r5, #1
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a08:	2a00      	cmp	r2, #0
 8002a0a:	d1f1      	bne.n	80029f0 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8002a0c:	23ff      	movs	r3, #255	; 0xff
 8002a0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002a12:	f001 fc39 	bl	8004288 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002a16:	f000 fee3 	bl	80037e0 <xTaskResumeAll>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d1a6      	bne.n	800296c <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 8002a1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a26:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8002a32:	e79b      	b.n	800296c <xQueueReceive+0x204>
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002a44:	e7fe      	b.n	8002a44 <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a46:	f104 0010 	add.w	r0, r4, #16
 8002a4a:	f001 f809 	bl	8003a60 <xTaskRemoveFromEventList>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	f43f af26 	beq.w	80028a0 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8002a54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	e71a      	b.n	80028a0 <xQueueReceive+0x138>
 8002a6a:	bf00      	nop

08002a6c <xQueueSemaphoreTake>:
{
 8002a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d05c      	beq.n	8002b32 <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002a78:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	b147      	cbz	r7, 8002a90 <xQueueSemaphoreTake+0x24>
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	e7fe      	b.n	8002a8e <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a90:	f001 f888 	bl	8003ba4 <xTaskGetSchedulerState>
 8002a94:	4605      	mov	r5, r0
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d054      	beq.n	8002b44 <xQueueSemaphoreTake+0xd8>
 8002a9a:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a9c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8002aa0:	f001 fbd0 	bl	8004244 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002aa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 8148 	bne.w	8002d3c <xQueueSemaphoreTake+0x2d0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aac:	9b01      	ldr	r3, [sp, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 813a 	beq.w	8002d28 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
 8002ab4:	2d00      	cmp	r5, #0
 8002ab6:	f000 809d 	beq.w	8002bf4 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
 8002aba:	f001 fbe5 	bl	8004288 <vPortExitCritical>
		vTaskSuspendAll();
 8002abe:	f000 fd33 	bl	8003528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ac2:	f001 fbbf 	bl	8004244 <vPortEnterCritical>
 8002ac6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002aca:	2bff      	cmp	r3, #255	; 0xff
 8002acc:	bf04      	itt	eq
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8002ad4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002ad8:	2bff      	cmp	r3, #255	; 0xff
 8002ada:	bf04      	itt	eq
 8002adc:	2300      	moveq	r3, #0
 8002ade:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8002ae2:	f001 fbd1 	bl	8004288 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ae6:	a901      	add	r1, sp, #4
 8002ae8:	a802      	add	r0, sp, #8
 8002aea:	f001 f80d 	bl	8003b08 <xTaskCheckForTimeOut>
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d135      	bne.n	8002b5e <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
 8002af2:	f001 fba7 	bl	8004244 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002af6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a4 	beq.w	8002c46 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
 8002afe:	f001 fbc3 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002b02:	f001 fb9f 	bl	8004244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002b06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002b0a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b0c:	2d00      	cmp	r5, #0
 8002b0e:	dc05      	bgt.n	8002b1c <xQueueSemaphoreTake+0xb0>
 8002b10:	e074      	b.n	8002bfc <xQueueSemaphoreTake+0x190>
			--cTxLock;
 8002b12:	1e6b      	subs	r3, r5, #1
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d06f      	beq.n	8002bfc <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b1e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d06b      	beq.n	8002bfc <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b24:	f000 ff9c 	bl	8003a60 <xTaskRemoveFromEventList>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	d0f2      	beq.n	8002b12 <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
 8002b2c:	f001 f834 	bl	8003b98 <vTaskMissedYield>
 8002b30:	e7ef      	b.n	8002b12 <xQueueSemaphoreTake+0xa6>
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002b42:	e7fe      	b.n	8002b42 <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b44:	9b01      	ldr	r3, [sp, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80d4 	beq.w	8002cf4 <xQueueSemaphoreTake+0x288>
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	e7fe      	b.n	8002b5c <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
 8002b5e:	f001 fb71 	bl	8004244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002b62:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002b66:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b68:	2d00      	cmp	r5, #0
 8002b6a:	dc04      	bgt.n	8002b76 <xQueueSemaphoreTake+0x10a>
 8002b6c:	e011      	b.n	8002b92 <xQueueSemaphoreTake+0x126>
			--cTxLock;
 8002b6e:	1e6b      	subs	r3, r5, #1
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b74:	b16a      	cbz	r2, 8002b92 <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b78:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b7a:	b153      	cbz	r3, 8002b92 <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b7c:	f000 ff70 	bl	8003a60 <xTaskRemoveFromEventList>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d0f4      	beq.n	8002b6e <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
 8002b84:	f001 f808 	bl	8003b98 <vTaskMissedYield>
			--cTxLock;
 8002b88:	1e6b      	subs	r3, r5, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b8e:	2a00      	cmp	r2, #0
 8002b90:	d1f1      	bne.n	8002b76 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
 8002b92:	23ff      	movs	r3, #255	; 0xff
 8002b94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002b98:	f001 fb76 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002b9c:	f001 fb52 	bl	8004244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002ba0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002ba4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ba6:	2d00      	cmp	r5, #0
 8002ba8:	dd14      	ble.n	8002bd4 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002baa:	f104 0810 	add.w	r8, r4, #16
 8002bae:	e003      	b.n	8002bb8 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
 8002bb0:	1e6b      	subs	r3, r5, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bb6:	b16a      	cbz	r2, 8002bd4 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bb8:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bba:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bbc:	b153      	cbz	r3, 8002bd4 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bbe:	f000 ff4f 	bl	8003a60 <xTaskRemoveFromEventList>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d0f4      	beq.n	8002bb0 <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
 8002bc6:	f000 ffe7 	bl	8003b98 <vTaskMissedYield>
				--cRxLock;
 8002bca:	1e6b      	subs	r3, r5, #1
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bd0:	2a00      	cmp	r2, #0
 8002bd2:	d1f1      	bne.n	8002bb8 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
 8002bd4:	23ff      	movs	r3, #255	; 0xff
 8002bd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002bda:	f001 fb55 	bl	8004288 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8002bde:	f000 fdff 	bl	80037e0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8002be2:	f001 fb2f 	bl	8004244 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d07c      	beq.n	8002ce6 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
 8002bec:	f001 fb4c 	bl	8004288 <vPortExitCritical>
	return xReturn;
 8002bf0:	2501      	movs	r5, #1
 8002bf2:	e755      	b.n	8002aa0 <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bf4:	a802      	add	r0, sp, #8
 8002bf6:	f000 ff7b 	bl	8003af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bfa:	e75e      	b.n	8002aba <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002bfc:	23ff      	movs	r3, #255	; 0xff
 8002bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002c02:	f001 fb41 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002c06:	f001 fb1d 	bl	8004244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002c0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002c0e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c10:	2d00      	cmp	r5, #0
 8002c12:	dd10      	ble.n	8002c36 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c14:	f104 0810 	add.w	r8, r4, #16
 8002c18:	e003      	b.n	8002c22 <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
 8002c1a:	1e6b      	subs	r3, r5, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c20:	b14a      	cbz	r2, 8002c36 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c22:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c24:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c26:	b133      	cbz	r3, 8002c36 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c28:	f000 ff1a 	bl	8003a60 <xTaskRemoveFromEventList>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d0f4      	beq.n	8002c1a <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
 8002c30:	f000 ffb2 	bl	8003b98 <vTaskMissedYield>
 8002c34:	e7f1      	b.n	8002c1a <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
 8002c36:	23ff      	movs	r3, #255	; 0xff
 8002c38:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002c3c:	f001 fb24 	bl	8004288 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8002c40:	f000 fdce 	bl	80037e0 <xTaskResumeAll>
 8002c44:	e7d4      	b.n	8002bf0 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 8002c46:	f001 fb1f 	bl	8004288 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d062      	beq.n	8002d16 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c50:	9901      	ldr	r1, [sp, #4]
 8002c52:	4630      	mov	r0, r6
 8002c54:	f000 fe76 	bl	8003944 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002c58:	f001 faf4 	bl	8004244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002c5c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002c60:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c62:	2d00      	cmp	r5, #0
 8002c64:	dc04      	bgt.n	8002c70 <xQueueSemaphoreTake+0x204>
 8002c66:	e00d      	b.n	8002c84 <xQueueSemaphoreTake+0x218>
			--cTxLock;
 8002c68:	1e6b      	subs	r3, r5, #1
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c6e:	b14a      	cbz	r2, 8002c84 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c72:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c74:	b133      	cbz	r3, 8002c84 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c76:	f000 fef3 	bl	8003a60 <xTaskRemoveFromEventList>
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d0f4      	beq.n	8002c68 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
 8002c7e:	f000 ff8b 	bl	8003b98 <vTaskMissedYield>
 8002c82:	e7f1      	b.n	8002c68 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
 8002c84:	23ff      	movs	r3, #255	; 0xff
 8002c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002c8a:	f001 fafd 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002c8e:	f001 fad9 	bl	8004244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002c92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002c96:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c98:	2d00      	cmp	r5, #0
 8002c9a:	dd10      	ble.n	8002cbe <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c9c:	f104 0810 	add.w	r8, r4, #16
 8002ca0:	e003      	b.n	8002caa <xQueueSemaphoreTake+0x23e>
				--cRxLock;
 8002ca2:	1e6b      	subs	r3, r5, #1
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ca8:	b14a      	cbz	r2, 8002cbe <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002caa:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cac:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cae:	b133      	cbz	r3, 8002cbe <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cb0:	f000 fed6 	bl	8003a60 <xTaskRemoveFromEventList>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d0f4      	beq.n	8002ca2 <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
 8002cb8:	f000 ff6e 	bl	8003b98 <vTaskMissedYield>
 8002cbc:	e7f1      	b.n	8002ca2 <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
 8002cbe:	23ff      	movs	r3, #255	; 0xff
 8002cc0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002cc4:	f001 fae0 	bl	8004288 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002cc8:	f000 fd8a 	bl	80037e0 <xTaskResumeAll>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	d18f      	bne.n	8002bf0 <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
 8002cd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	e784      	b.n	8002bf0 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 8002ce6:	f001 facf 	bl	8004288 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8002cea:	b92f      	cbnz	r7, 8002cf8 <xQueueSemaphoreTake+0x28c>
}
 8002cec:	4638      	mov	r0, r7
 8002cee:	b004      	add	sp, #16
 8002cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cf4:	4607      	mov	r7, r0
 8002cf6:	e6d1      	b.n	8002a9c <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 8002cf8:	f001 faa4 	bl	8004244 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002cfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002cfe:	b119      	cbz	r1, 8002d08 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002d00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002d08:	68a0      	ldr	r0, [r4, #8]
 8002d0a:	f000 ffe7 	bl	8003cdc <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002d0e:	2700      	movs	r7, #0
						taskEXIT_CRITICAL();
 8002d10:	f001 faba 	bl	8004288 <vPortExitCritical>
 8002d14:	e7ea      	b.n	8002cec <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
 8002d16:	f001 fa95 	bl	8004244 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d1a:	68a0      	ldr	r0, [r4, #8]
 8002d1c:	f000 ff52 	bl	8003bc4 <xTaskPriorityInherit>
 8002d20:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 8002d22:	f001 fab1 	bl	8004288 <vPortExitCritical>
 8002d26:	e793      	b.n	8002c50 <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002d28:	b197      	cbz	r7, 8002d50 <xQueueSemaphoreTake+0x2e4>
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	e7fe      	b.n	8002d3a <xQueueSemaphoreTake+0x2ce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d3c:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d42:	b1ca      	cbz	r2, 8002d78 <xQueueSemaphoreTake+0x30c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d44:	6923      	ldr	r3, [r4, #16]
 8002d46:	b933      	cbnz	r3, 8002d56 <xQueueSemaphoreTake+0x2ea>
				taskEXIT_CRITICAL();
 8002d48:	f001 fa9e 	bl	8004288 <vPortExitCritical>
				return pdPASS;
 8002d4c:	2701      	movs	r7, #1
 8002d4e:	e7cd      	b.n	8002cec <xQueueSemaphoreTake+0x280>
					taskEXIT_CRITICAL();
 8002d50:	f001 fa9a 	bl	8004288 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002d54:	e7ca      	b.n	8002cec <xQueueSemaphoreTake+0x280>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d56:	f104 0010 	add.w	r0, r4, #16
 8002d5a:	f000 fe81 	bl	8003a60 <xTaskRemoveFromEventList>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d0f2      	beq.n	8002d48 <xQueueSemaphoreTake+0x2dc>
						queueYIELD_IF_USING_PREEMPTION();
 8002d62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	e7e7      	b.n	8002d48 <xQueueSemaphoreTake+0x2dc>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002d78:	f001 f804 	bl	8003d84 <pvTaskIncrementMutexHeldCount>
 8002d7c:	60a0      	str	r0, [r4, #8]
 8002d7e:	e7e1      	b.n	8002d44 <xQueueSemaphoreTake+0x2d8>

08002d80 <xQueueReceiveFromISR>:
{
 8002d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002d84:	b310      	cbz	r0, 8002dcc <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d86:	460e      	mov	r6, r1
 8002d88:	4617      	mov	r7, r2
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	b191      	cbz	r1, 8002db4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d8e:	f001 fb8b 	bl	80044a8 <vPortValidateInterruptPriority>
	__asm volatile
 8002d92:	f3ef 8911 	mrs	r9, BASEPRI
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002da6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002da8:	b9cd      	cbnz	r5, 8002dde <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8002daa:	4628      	mov	r0, r5
	__asm volatile
 8002dac:	f389 8811 	msr	BASEPRI, r9
}
 8002db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002db4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0e9      	beq.n	8002d8e <xQueueReceiveFromISR+0xe>
	__asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	e7fe      	b.n	8002dca <xQueueReceiveFromISR+0x4a>
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002ddc:	e7fe      	b.n	8002ddc <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002dde:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002de2:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8002de4:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002de8:	b152      	cbz	r2, 8002e00 <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dea:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002dec:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dee:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002df0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002df2:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002df4:	bf24      	itt	cs
 8002df6:	6821      	ldrcs	r1, [r4, #0]
 8002df8:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dfa:	4630      	mov	r0, r6
 8002dfc:	f006 ff78 	bl	8009cf0 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e00:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8002e02:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e06:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002e08:	d009      	beq.n	8002e1e <xQueueReceiveFromISR+0x9e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e0a:	f108 0301 	add.w	r3, r8, #1
 8002e0e:	b25b      	sxtb	r3, r3
 8002e10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8002e14:	2001      	movs	r0, #1
	__asm volatile
 8002e16:	f389 8811 	msr	BASEPRI, r9
}
 8002e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e1e:	6923      	ldr	r3, [r4, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f7      	beq.n	8002e14 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e24:	f104 0010 	add.w	r0, r4, #16
 8002e28:	f000 fe1a 	bl	8003a60 <xTaskRemoveFromEventList>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d0f1      	beq.n	8002e14 <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 8002e30:	2f00      	cmp	r7, #0
 8002e32:	d0ef      	beq.n	8002e14 <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e34:	2001      	movs	r0, #1
 8002e36:	6038      	str	r0, [r7, #0]
 8002e38:	e7b8      	b.n	8002dac <xQueueReceiveFromISR+0x2c>
 8002e3a:	bf00      	nop

08002e3c <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <vQueueAddToRegistry+0x4c>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	b17a      	cbz	r2, 8002e62 <vQueueAddToRegistry+0x26>
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	b162      	cbz	r2, 8002e60 <vQueueAddToRegistry+0x24>
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	b192      	cbz	r2, 8002e70 <vQueueAddToRegistry+0x34>
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	b192      	cbz	r2, 8002e74 <vQueueAddToRegistry+0x38>
 8002e4e:	6a1a      	ldr	r2, [r3, #32]
 8002e50:	b192      	cbz	r2, 8002e78 <vQueueAddToRegistry+0x3c>
 8002e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e54:	b192      	cbz	r2, 8002e7c <vQueueAddToRegistry+0x40>
 8002e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e58:	b192      	cbz	r2, 8002e80 <vQueueAddToRegistry+0x44>
 8002e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5c:	b192      	cbz	r2, 8002e84 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e5e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e60:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e62:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e6a:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8002e6e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e70:	2202      	movs	r2, #2
 8002e72:	e7f6      	b.n	8002e62 <vQueueAddToRegistry+0x26>
 8002e74:	2203      	movs	r2, #3
 8002e76:	e7f4      	b.n	8002e62 <vQueueAddToRegistry+0x26>
 8002e78:	2204      	movs	r2, #4
 8002e7a:	e7f2      	b.n	8002e62 <vQueueAddToRegistry+0x26>
 8002e7c:	2205      	movs	r2, #5
 8002e7e:	e7f0      	b.n	8002e62 <vQueueAddToRegistry+0x26>
 8002e80:	2206      	movs	r2, #6
 8002e82:	e7ee      	b.n	8002e62 <vQueueAddToRegistry+0x26>
 8002e84:	2207      	movs	r2, #7
 8002e86:	e7ec      	b.n	8002e62 <vQueueAddToRegistry+0x26>
 8002e88:	20000b90 	.word	0x20000b90

08002e8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	4605      	mov	r5, r0
 8002e90:	460e      	mov	r6, r1
 8002e92:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e94:	f001 f9d6 	bl	8004244 <vPortEnterCritical>
 8002e98:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8002e9c:	2bff      	cmp	r3, #255	; 0xff
 8002e9e:	bf04      	itt	eq
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 8002ea6:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8002eaa:	2bff      	cmp	r3, #255	; 0xff
 8002eac:	bf04      	itt	eq
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 8002eb4:	f001 f9e8 	bl	8004288 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002eb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d043      	beq.n	8002f46 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 8002ebe:	f001 f9c1 	bl	8004244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002ec2:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8002ec6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ec8:	2c00      	cmp	r4, #0
 8002eca:	dd14      	ble.n	8002ef6 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ecc:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8002ed0:	e003      	b.n	8002eda <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 8002ed2:	1e63      	subs	r3, r4, #1
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ed8:	b16a      	cbz	r2, 8002ef6 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002edc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ede:	b153      	cbz	r3, 8002ef6 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ee0:	f000 fdbe 	bl	8003a60 <xTaskRemoveFromEventList>
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d0f4      	beq.n	8002ed2 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8002ee8:	f000 fe56 	bl	8003b98 <vTaskMissedYield>
			--cTxLock;
 8002eec:	1e63      	subs	r3, r4, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d1f1      	bne.n	8002eda <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002ef6:	23ff      	movs	r3, #255	; 0xff
 8002ef8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002efc:	f001 f9c4 	bl	8004288 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002f00:	f001 f9a0 	bl	8004244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002f04:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8002f08:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f0a:	2c00      	cmp	r4, #0
 8002f0c:	dd14      	ble.n	8002f38 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f0e:	f105 0610 	add.w	r6, r5, #16
 8002f12:	e003      	b.n	8002f1c <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 8002f14:	1e63      	subs	r3, r4, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f1a:	b16a      	cbz	r2, 8002f38 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f1c:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f1e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f20:	b153      	cbz	r3, 8002f38 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f22:	f000 fd9d 	bl	8003a60 <xTaskRemoveFromEventList>
 8002f26:	2800      	cmp	r0, #0
 8002f28:	d0f4      	beq.n	8002f14 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 8002f2a:	f000 fe35 	bl	8003b98 <vTaskMissedYield>
				--cRxLock;
 8002f2e:	1e63      	subs	r3, r4, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f34:	2a00      	cmp	r2, #0
 8002f36:	d1f1      	bne.n	8002f1c <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8002f38:	23ff      	movs	r3, #255	; 0xff
 8002f3a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8002f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002f42:	f001 b9a1 	b.w	8004288 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f46:	4622      	mov	r2, r4
 8002f48:	4631      	mov	r1, r6
 8002f4a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002f4e:	f000 fd3d 	bl	80039cc <vTaskPlaceOnEventListRestricted>
 8002f52:	e7b4      	b.n	8002ebe <vQueueWaitForMessageRestricted+0x32>

08002f54 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f58:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f5a:	f001 f973 	bl	8004244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f5e:	4a34      	ldr	r2, [pc, #208]	; (8003030 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8002f60:	4e34      	ldr	r6, [pc, #208]	; (8003034 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f68:	6833      	ldr	r3, [r6, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d032      	beq.n	8002fd4 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f6e:	4c32      	ldr	r4, [pc, #200]	; (8003038 <prvAddNewTaskToReadyList+0xe4>)
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	b33b      	cbz	r3, 8002fc4 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f74:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002f76:	4f31      	ldr	r7, [pc, #196]	; (800303c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8002f78:	4a31      	ldr	r2, [pc, #196]	; (8003040 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8002f7a:	4932      	ldr	r1, [pc, #200]	; (8003044 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8002f7c:	6813      	ldr	r3, [r2, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f82:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8002f84:	680b      	ldr	r3, [r1, #0]
 8002f86:	4283      	cmp	r3, r0
 8002f88:	bf38      	it	cc
 8002f8a:	6008      	strcc	r0, [r1, #0]
 8002f8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f90:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8002f94:	1d29      	adds	r1, r5, #4
 8002f96:	f7ff f845 	bl	8002024 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f9a:	f001 f975 	bl	8004288 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	b173      	cbz	r3, 8002fc0 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fa2:	6832      	ldr	r2, [r6, #0]
 8002fa4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002fa6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d209      	bcs.n	8002fc0 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fc4:	6833      	ldr	r3, [r6, #0]
 8002fc6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	4f1c      	ldr	r7, [pc, #112]	; (800303c <prvAddNewTaskToReadyList+0xe8>)
 8002fcc:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8002fce:	bf98      	it	ls
 8002fd0:	6035      	strls	r5, [r6, #0]
 8002fd2:	e7d1      	b.n	8002f78 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8002fd4:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d003      	beq.n	8002fe4 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8002fdc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002fde:	4f17      	ldr	r7, [pc, #92]	; (800303c <prvAddNewTaskToReadyList+0xe8>)
 8002fe0:	4c15      	ldr	r4, [pc, #84]	; (8003038 <prvAddNewTaskToReadyList+0xe4>)
 8002fe2:	e7c9      	b.n	8002f78 <prvAddNewTaskToReadyList+0x24>
 8002fe4:	4f15      	ldr	r7, [pc, #84]	; (800303c <prvAddNewTaskToReadyList+0xe8>)
 8002fe6:	463c      	mov	r4, r7
 8002fe8:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fec:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fee:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ff0:	f7ff f808 	bl	8002004 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ff4:	45a0      	cmp	r8, r4
 8002ff6:	d1f9      	bne.n	8002fec <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ff8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800305c <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8002ffc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8003060 <prvAddNewTaskToReadyList+0x10c>
 8003000:	4c0d      	ldr	r4, [pc, #52]	; (8003038 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8003002:	4648      	mov	r0, r9
 8003004:	f7fe fffe 	bl	8002004 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003008:	4640      	mov	r0, r8
 800300a:	f7fe fffb 	bl	8002004 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800300e:	480e      	ldr	r0, [pc, #56]	; (8003048 <prvAddNewTaskToReadyList+0xf4>)
 8003010:	f7fe fff8 	bl	8002004 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003014:	480d      	ldr	r0, [pc, #52]	; (800304c <prvAddNewTaskToReadyList+0xf8>)
 8003016:	f7fe fff5 	bl	8002004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800301a:	480d      	ldr	r0, [pc, #52]	; (8003050 <prvAddNewTaskToReadyList+0xfc>)
 800301c:	f7fe fff2 	bl	8002004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 8003022:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8003024:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <prvAddNewTaskToReadyList+0x104>)
 800302a:	f8c3 8000 	str.w	r8, [r3]
}
 800302e:	e7a3      	b.n	8002f78 <prvAddNewTaskToReadyList+0x24>
 8003030:	2000103c 	.word	0x2000103c
 8003034:	20000bd0 	.word	0x20000bd0
 8003038:	20001098 	.word	0x20001098
 800303c:	20000bdc 	.word	0x20000bdc
 8003040:	20001048 	.word	0x20001048
 8003044:	2000104c 	.word	0x2000104c
 8003048:	20001084 	.word	0x20001084
 800304c:	200010b0 	.word	0x200010b0
 8003050:	2000109c 	.word	0x2000109c
 8003054:	20000bd4 	.word	0x20000bd4
 8003058:	20000bd8 	.word	0x20000bd8
 800305c:	20001050 	.word	0x20001050
 8003060:	20001064 	.word	0x20001064

08003064 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003068:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800306a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800306e:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8003072:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003074:	4606      	mov	r6, r0
 8003076:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003078:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800307a:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800307c:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800307e:	f006 fe5f 	bl	8009d40 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003082:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003084:	f1a9 0904 	sub.w	r9, r9, #4
 8003088:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800308a:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800308e:	2d00      	cmp	r5, #0
 8003090:	d07d      	beq.n	800318e <prvInitialiseNewTask.constprop.0+0x12a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003092:	782b      	ldrb	r3, [r5, #0]
 8003094:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8003098:	782b      	ldrb	r3, [r5, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d04d      	beq.n	800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800309e:	786b      	ldrb	r3, [r5, #1]
 80030a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80030a4:	786b      	ldrb	r3, [r5, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d047      	beq.n	800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030aa:	78ab      	ldrb	r3, [r5, #2]
 80030ac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80030b0:	78ab      	ldrb	r3, [r5, #2]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d041      	beq.n	800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030b6:	78eb      	ldrb	r3, [r5, #3]
 80030b8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 80030bc:	78eb      	ldrb	r3, [r5, #3]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d03b      	beq.n	800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030c2:	792b      	ldrb	r3, [r5, #4]
 80030c4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 80030c8:	792b      	ldrb	r3, [r5, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d035      	beq.n	800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030ce:	796b      	ldrb	r3, [r5, #5]
 80030d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 80030d4:	796b      	ldrb	r3, [r5, #5]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d02f      	beq.n	800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030da:	79ab      	ldrb	r3, [r5, #6]
 80030dc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 80030e0:	79ab      	ldrb	r3, [r5, #6]
 80030e2:	b353      	cbz	r3, 800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030e4:	79eb      	ldrb	r3, [r5, #7]
 80030e6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80030ea:	79eb      	ldrb	r3, [r5, #7]
 80030ec:	b32b      	cbz	r3, 800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030ee:	7a2b      	ldrb	r3, [r5, #8]
 80030f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80030f4:	7a2b      	ldrb	r3, [r5, #8]
 80030f6:	b303      	cbz	r3, 800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030f8:	7a6b      	ldrb	r3, [r5, #9]
 80030fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 80030fe:	7a6b      	ldrb	r3, [r5, #9]
 8003100:	b1db      	cbz	r3, 800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003102:	7aab      	ldrb	r3, [r5, #10]
 8003104:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8003108:	7aab      	ldrb	r3, [r5, #10]
 800310a:	b1b3      	cbz	r3, 800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800310c:	7aeb      	ldrb	r3, [r5, #11]
 800310e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8003112:	7aeb      	ldrb	r3, [r5, #11]
 8003114:	b18b      	cbz	r3, 800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003116:	7b2b      	ldrb	r3, [r5, #12]
 8003118:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800311c:	7b2b      	ldrb	r3, [r5, #12]
 800311e:	b163      	cbz	r3, 800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003120:	7b6b      	ldrb	r3, [r5, #13]
 8003122:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8003126:	7b6b      	ldrb	r3, [r5, #13]
 8003128:	b13b      	cbz	r3, 800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800312a:	7bab      	ldrb	r3, [r5, #14]
 800312c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8003130:	7bab      	ldrb	r3, [r5, #14]
 8003132:	b113      	cbz	r3, 800313a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003134:	7beb      	ldrb	r3, [r5, #15]
 8003136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800313a:	2300      	movs	r3, #0
 800313c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003140:	9d08      	ldr	r5, [sp, #32]
 8003142:	2d37      	cmp	r5, #55	; 0x37
 8003144:	bf28      	it	cs
 8003146:	2537      	movcs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8003148:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800314c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800314e:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003150:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8003152:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003156:	f7fe ff61 	bl	800201c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800315a:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800315e:	f104 0018 	add.w	r0, r4, #24
 8003162:	f7fe ff5b 	bl	800201c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003166:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316a:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800316c:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003170:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003172:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003174:	463a      	mov	r2, r7
 8003176:	4631      	mov	r1, r6
 8003178:	4648      	mov	r0, r9
 800317a:	f001 f83b 	bl	80041f4 <pxPortInitialiseStack>
 800317e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8003180:	f1b8 0f00 	cmp.w	r8, #0
 8003184:	d001      	beq.n	800318a <prvInitialiseNewTask.constprop.0+0x126>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003186:	f8c8 4000 	str.w	r4, [r8]
}
 800318a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800318e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8003192:	e7d5      	b.n	8003140 <prvInitialiseNewTask.constprop.0+0xdc>

08003194 <prvIdleTask>:
{
 8003194:	b580      	push	{r7, lr}
 8003196:	4c22      	ldr	r4, [pc, #136]	; (8003220 <prvIdleTask+0x8c>)
 8003198:	4e22      	ldr	r6, [pc, #136]	; (8003224 <prvIdleTask+0x90>)
 800319a:	4d23      	ldr	r5, [pc, #140]	; (8003228 <prvIdleTask+0x94>)
 800319c:	4f23      	ldr	r7, [pc, #140]	; (800322c <prvIdleTask+0x98>)
				taskYIELD();
 800319e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80031a2:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	b353      	cbz	r3, 8003200 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 80031aa:	f001 f84b 	bl	8004244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ae:	68f3      	ldr	r3, [r6, #12]
 80031b0:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b4:	f10a 0004 	add.w	r0, sl, #4
 80031b8:	f7fe ff5c 	bl	8002074 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031bc:	682b      	ldr	r3, [r5, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 80031c8:	f001 f85e 	bl	8004288 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031cc:	f89a 3059 	ldrb.w	r3, [sl, #89]	; 0x59
 80031d0:	b163      	cbz	r3, 80031ec <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d020      	beq.n	8003218 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d0e5      	beq.n	80031a6 <prvIdleTask+0x12>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	e7fe      	b.n	80031ea <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 80031ec:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 80031f0:	f001 fa42 	bl	8004678 <vPortFree>
				vPortFree( pxTCB );
 80031f4:	4650      	mov	r0, sl
 80031f6:	f001 fa3f 	bl	8004678 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1d4      	bne.n	80031aa <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d905      	bls.n	8003212 <prvIdleTask+0x7e>
				taskYIELD();
 8003206:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8003212:	f006 f8c3 	bl	800939c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003216:	e7c6      	b.n	80031a6 <prvIdleTask+0x12>
				vPortFree( pxTCB );
 8003218:	4650      	mov	r0, sl
 800321a:	f001 fa2d 	bl	8004678 <vPortFree>
 800321e:	e7c2      	b.n	80031a6 <prvIdleTask+0x12>
 8003220:	20001040 	.word	0x20001040
 8003224:	200010b0 	.word	0x200010b0
 8003228:	2000103c 	.word	0x2000103c
 800322c:	20000bdc 	.word	0x20000bdc

08003230 <xTaskCreateStatic>:
	{
 8003230:	b530      	push	{r4, r5, lr}
 8003232:	b087      	sub	sp, #28
 8003234:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8003236:	b1c4      	cbz	r4, 800326a <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8003238:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800323a:	b16d      	cbz	r5, 8003258 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 800323c:	255c      	movs	r5, #92	; 0x5c
 800323e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003240:	9d05      	ldr	r5, [sp, #20]
 8003242:	2d5c      	cmp	r5, #92	; 0x5c
 8003244:	d01a      	beq.n	800327c <xTaskCreateStatic+0x4c>
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	e7fe      	b.n	8003256 <xTaskCreateStatic+0x26>
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8003268:	e7fe      	b.n	8003268 <xTaskCreateStatic+0x38>
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800327a:	e7fe      	b.n	800327a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800327c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800327e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003280:	2402      	movs	r4, #2
 8003282:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003286:	ac04      	add	r4, sp, #16
 8003288:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800328c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800328e:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003290:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003292:	f7ff fee7 	bl	8003064 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003296:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003298:	f7ff fe5c 	bl	8002f54 <prvAddNewTaskToReadyList>
	}
 800329c:	9804      	ldr	r0, [sp, #16]
 800329e:	b007      	add	sp, #28
 80032a0:	bd30      	pop	{r4, r5, pc}
 80032a2:	bf00      	nop

080032a4 <xTaskCreate>:
	{
 80032a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032a8:	4607      	mov	r7, r0
 80032aa:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032ac:	0090      	lsls	r0, r2, #2
	{
 80032ae:	4615      	mov	r5, r2
 80032b0:	4688      	mov	r8, r1
 80032b2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032b4:	f001 f926 	bl	8004504 <pvPortMalloc>
			if( pxStack != NULL )
 80032b8:	b1d8      	cbz	r0, 80032f2 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032ba:	4604      	mov	r4, r0
 80032bc:	205c      	movs	r0, #92	; 0x5c
 80032be:	f001 f921 	bl	8004504 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80032c2:	4606      	mov	r6, r0
 80032c4:	b1d0      	cbz	r0, 80032fc <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 80032c6:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032c8:	2400      	movs	r4, #0
 80032ca:	f886 4059 	strb.w	r4, [r6, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80032d0:	9401      	str	r4, [sp, #4]
 80032d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80032d4:	9602      	str	r6, [sp, #8]
 80032d6:	464b      	mov	r3, r9
 80032d8:	462a      	mov	r2, r5
 80032da:	4641      	mov	r1, r8
 80032dc:	4638      	mov	r0, r7
 80032de:	9400      	str	r4, [sp, #0]
 80032e0:	f7ff fec0 	bl	8003064 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032e4:	4630      	mov	r0, r6
 80032e6:	f7ff fe35 	bl	8002f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032ea:	2001      	movs	r0, #1
	}
 80032ec:	b005      	add	sp, #20
 80032ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 80032f6:	b005      	add	sp, #20
 80032f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80032fc:	4620      	mov	r0, r4
 80032fe:	f001 f9bb 	bl	8004678 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003306:	e7f1      	b.n	80032ec <xTaskCreate+0x48>

08003308 <vTaskDelete>:
	{
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800330c:	4d36      	ldr	r5, [pc, #216]	; (80033e8 <vTaskDelete+0xe0>)
		taskENTER_CRITICAL();
 800330e:	f000 ff99 	bl	8004244 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003312:	2c00      	cmp	r4, #0
 8003314:	d044      	beq.n	80033a0 <vTaskDelete+0x98>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003316:	1d26      	adds	r6, r4, #4
 8003318:	4630      	mov	r0, r6
 800331a:	f7fe feab 	bl	8002074 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800331e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003320:	b11b      	cbz	r3, 800332a <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003322:	f104 0018 	add.w	r0, r4, #24
 8003326:	f7fe fea5 	bl	8002074 <uxListRemove>
			uxTaskNumber++;
 800332a:	4a30      	ldr	r2, [pc, #192]	; (80033ec <vTaskDelete+0xe4>)
 800332c:	6813      	ldr	r3, [r2, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8003332:	682b      	ldr	r3, [r5, #0]
 8003334:	42a3      	cmp	r3, r4
 8003336:	d02a      	beq.n	800338e <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 8003338:	492d      	ldr	r1, [pc, #180]	; (80033f0 <vTaskDelete+0xe8>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800333a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
				--uxCurrentNumberOfTasks;
 800333e:	680b      	ldr	r3, [r1, #0]
 8003340:	3b01      	subs	r3, #1
 8003342:	600b      	str	r3, [r1, #0]
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003344:	b162      	cbz	r2, 8003360 <vTaskDelete+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003346:	2a01      	cmp	r2, #1
 8003348:	d03f      	beq.n	80033ca <vTaskDelete+0xc2>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800334a:	2a02      	cmp	r2, #2
 800334c:	d00e      	beq.n	800336c <vTaskDelete+0x64>
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	e7fe      	b.n	800335e <vTaskDelete+0x56>
				vPortFree( pxTCB->pxStack );
 8003360:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003362:	f001 f989 	bl	8004678 <vPortFree>
				vPortFree( pxTCB );
 8003366:	4620      	mov	r0, r4
 8003368:	f001 f986 	bl	8004678 <vPortFree>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <vTaskDelete+0xec>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	b9ba      	cbnz	r2, 80033a4 <vTaskDelete+0x9c>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003374:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <vTaskDelete+0xf0>)
 8003376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800337a:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 800337c:	f000 ff84 	bl	8004288 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <vTaskDelete+0xf4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	b113      	cbz	r3, 800338c <vTaskDelete+0x84>
			if( pxTCB == pxCurrentTCB )
 8003386:	682b      	ldr	r3, [r5, #0]
 8003388:	42a3      	cmp	r3, r4
 800338a:	d012      	beq.n	80033b2 <vTaskDelete+0xaa>
	}
 800338c:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800338e:	481c      	ldr	r0, [pc, #112]	; (8003400 <vTaskDelete+0xf8>)
 8003390:	4631      	mov	r1, r6
 8003392:	f7fe fe47 	bl	8002024 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8003396:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <vTaskDelete+0xfc>)
 8003398:	6813      	ldr	r3, [r2, #0]
 800339a:	3301      	adds	r3, #1
 800339c:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 800339e:	e7ed      	b.n	800337c <vTaskDelete+0x74>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80033a0:	682c      	ldr	r4, [r5, #0]
 80033a2:	e7b8      	b.n	8003316 <vTaskDelete+0xe>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a4:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <vTaskDelete+0xf0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033aa:	68d2      	ldr	r2, [r2, #12]
 80033ac:	6852      	ldr	r2, [r2, #4]
 80033ae:	601a      	str	r2, [r3, #0]
	}
}
 80033b0:	e7e4      	b.n	800337c <vTaskDelete+0x74>
				configASSERT( uxSchedulerSuspended == 0 );
 80033b2:	4b15      	ldr	r3, [pc, #84]	; (8003408 <vTaskDelete+0x100>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	b163      	cbz	r3, 80033d2 <vTaskDelete+0xca>
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	e7fe      	b.n	80033c8 <vTaskDelete+0xc0>
				vPortFree( pxTCB );
 80033ca:	4620      	mov	r0, r4
 80033cc:	f001 f954 	bl	8004678 <vPortFree>
 80033d0:	e7cc      	b.n	800336c <vTaskDelete+0x64>
				portYIELD_WITHIN_API();
 80033d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80033d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	f3bf 8f6f 	isb	sy
	}
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	20000bd0 	.word	0x20000bd0
 80033ec:	20001048 	.word	0x20001048
 80033f0:	2000103c 	.word	0x2000103c
 80033f4:	20000bd4 	.word	0x20000bd4
 80033f8:	20001078 	.word	0x20001078
 80033fc:	20001098 	.word	0x20001098
 8003400:	200010b0 	.word	0x200010b0
 8003404:	20001040 	.word	0x20001040
 8003408:	20001044 	.word	0x20001044

0800340c <vTaskStartScheduler>:
{
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003410:	4668      	mov	r0, sp
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003412:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003414:	aa02      	add	r2, sp, #8
 8003416:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003418:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800341c:	f7fe fdd4 	bl	8001fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003420:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 8003422:	b1c8      	cbz	r0, 8003458 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003424:	9d00      	ldr	r5, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 8003426:	b175      	cbz	r5, 8003446 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003428:	235c      	movs	r3, #92	; 0x5c
 800342a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 800342c:	9a03      	ldr	r2, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800342e:	9e02      	ldr	r6, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003430:	429a      	cmp	r2, r3
 8003432:	d01a      	beq.n	800346a <vTaskStartScheduler+0x5e>
 8003434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	e7fe      	b.n	8003444 <vTaskStartScheduler+0x38>
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8003456:	e7fe      	b.n	8003456 <vTaskStartScheduler+0x4a>
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8003468:	e7fe      	b.n	8003468 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800346a:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800346c:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800346e:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003470:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003474:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003476:	6328      	str	r0, [r5, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003478:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800347a:	f006 fc61 	bl	8009d40 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800347e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003480:	4924      	ldr	r1, [pc, #144]	; (8003514 <vTaskStartScheduler+0x108>)
 8003482:	6369      	str	r1, [r5, #52]	; 0x34
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003484:	1f33      	subs	r3, r6, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003486:	1d28      	adds	r0, r5, #4
		pxNewTCB->uxMutexesHeld = 0;
 8003488:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800348c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003490:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8003494:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003496:	18d6      	adds	r6, r2, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003498:	f7fe fdc0 	bl	800201c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800349c:	f105 0018 	add.w	r0, r5, #24
 80034a0:	f7fe fdbc 	bl	800201c <vListInitialiseItem>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034a4:	f026 0607 	bic.w	r6, r6, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a8:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034aa:	491b      	ldr	r1, [pc, #108]	; (8003518 <vTaskStartScheduler+0x10c>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ac:	61ab      	str	r3, [r5, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034ae:	4622      	mov	r2, r4
		pxNewTCB->ulNotifiedValue = 0;
 80034b0:	656c      	str	r4, [r5, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034b2:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034b4:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034b6:	f885 4058 	strb.w	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034ba:	4630      	mov	r0, r6
 80034bc:	f000 fe9a 	bl	80041f4 <pxPortInitialiseStack>
 80034c0:	6028      	str	r0, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80034c2:	4628      	mov	r0, r5
 80034c4:	f7ff fd46 	bl	8002f54 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 80034c8:	f000 fdf8 	bl	80040bc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80034cc:	2801      	cmp	r0, #1
 80034ce:	d00c      	beq.n	80034ea <vTaskStartScheduler+0xde>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034d0:	3001      	adds	r0, #1
 80034d2:	d001      	beq.n	80034d8 <vTaskStartScheduler+0xcc>
}
 80034d4:	b004      	add	sp, #16
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034e8:	e7fe      	b.n	80034e8 <vTaskStartScheduler+0xdc>
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80034fa:	4908      	ldr	r1, [pc, #32]	; (800351c <vTaskStartScheduler+0x110>)
		xSchedulerRunning = pdTRUE;
 80034fc:	4a08      	ldr	r2, [pc, #32]	; (8003520 <vTaskStartScheduler+0x114>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <vTaskStartScheduler+0x118>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8003500:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003504:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8003506:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003508:	601c      	str	r4, [r3, #0]
}
 800350a:	b004      	add	sp, #16
 800350c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003510:	f000 bf2a 	b.w	8004368 <xPortStartScheduler>
 8003514:	454c4449 	.word	0x454c4449
 8003518:	08003195 	.word	0x08003195
 800351c:	20001078 	.word	0x20001078
 8003520:	20001098 	.word	0x20001098
 8003524:	200010c4 	.word	0x200010c4

08003528 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003528:	4a02      	ldr	r2, [pc, #8]	; (8003534 <vTaskSuspendAll+0xc>)
 800352a:	6813      	ldr	r3, [r2, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20001044 	.word	0x20001044

08003538 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003538:	4b01      	ldr	r3, [pc, #4]	; (8003540 <xTaskGetTickCount+0x8>)
 800353a:	6818      	ldr	r0, [r3, #0]
}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	200010c4 	.word	0x200010c4

08003544 <xTaskIncrementTick>:
{
 8003544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003548:	4b52      	ldr	r3, [pc, #328]	; (8003694 <xTaskIncrementTick+0x150>)
 800354a:	681b      	ldr	r3, [r3, #0]
{
 800354c:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800354e:	2b00      	cmp	r3, #0
 8003550:	d15f      	bne.n	8003612 <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003552:	4b51      	ldr	r3, [pc, #324]	; (8003698 <xTaskIncrementTick+0x154>)
 8003554:	681e      	ldr	r6, [r3, #0]
 8003556:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8003558:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800355a:	2e00      	cmp	r6, #0
 800355c:	d040      	beq.n	80035e0 <xTaskIncrementTick+0x9c>
 800355e:	f8df b150 	ldr.w	fp, [pc, #336]	; 80036b0 <xTaskIncrementTick+0x16c>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003562:	f8db 3000 	ldr.w	r3, [fp]
 8003566:	429e      	cmp	r6, r3
 8003568:	d35e      	bcc.n	8003628 <xTaskIncrementTick+0xe4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800356a:	4f4c      	ldr	r7, [pc, #304]	; (800369c <xTaskIncrementTick+0x158>)
 800356c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 80036b4 <xTaskIncrementTick+0x170>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	f8df a144 	ldr.w	sl, [pc, #324]	; 80036b8 <xTaskIncrementTick+0x174>
 8003576:	681d      	ldr	r5, [r3, #0]
 8003578:	2d00      	cmp	r5, #0
 800357a:	d07d      	beq.n	8003678 <xTaskIncrementTick+0x134>
					prvAddTaskToReadyList( pxTCB );
 800357c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80036bc <xTaskIncrementTick+0x178>
BaseType_t xSwitchRequired = pdFALSE;
 8003580:	2500      	movs	r5, #0
 8003582:	e022      	b.n	80035ca <xTaskIncrementTick+0x86>
 8003584:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003586:	f7fe fd75 	bl	8002074 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800358a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800358c:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800358e:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003592:	b113      	cbz	r3, 800359a <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003594:	f7fe fd6e 	bl	8002074 <uxListRemove>
 8003598:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800359a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800359c:	f8d8 2000 	ldr.w	r2, [r8]
 80035a0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80035a4:	4293      	cmp	r3, r2
 80035a6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80035aa:	bf88      	it	hi
 80035ac:	f8c8 3000 	strhi.w	r3, [r8]
 80035b0:	f7fe fd38 	bl	8002024 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035b4:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035b8:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80035bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035be:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 80035c0:	4291      	cmp	r1, r2
 80035c2:	bf28      	it	cs
 80035c4:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d056      	beq.n	8003678 <xTaskIncrementTick+0x134>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035d0:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035d2:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 80035d4:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035d6:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80035d8:	d2d4      	bcs.n	8003584 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 80035da:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035de:	e028      	b.n	8003632 <xTaskIncrementTick+0xee>
			taskSWITCH_DELAYED_LISTS();
 80035e0:	4b2e      	ldr	r3, [pc, #184]	; (800369c <xTaskIncrementTick+0x158>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	2a00      	cmp	r2, #0
 80035e8:	d13a      	bne.n	8003660 <xTaskIncrementTick+0x11c>
 80035ea:	4a2d      	ldr	r2, [pc, #180]	; (80036a0 <xTaskIncrementTick+0x15c>)
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	6811      	ldr	r1, [r2, #0]
 80035f0:	6019      	str	r1, [r3, #0]
 80035f2:	492c      	ldr	r1, [pc, #176]	; (80036a4 <xTaskIncrementTick+0x160>)
 80035f4:	6010      	str	r0, [r2, #0]
 80035f6:	680a      	ldr	r2, [r1, #0]
 80035f8:	3201      	adds	r2, #1
 80035fa:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	2a00      	cmp	r2, #0
 8003602:	d13e      	bne.n	8003682 <xTaskIncrementTick+0x13e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003604:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 80036b0 <xTaskIncrementTick+0x16c>
 8003608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800360c:	f8cb 3000 	str.w	r3, [fp]
 8003610:	e7a7      	b.n	8003562 <xTaskIncrementTick+0x1e>
		++xPendedTicks;
 8003612:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <xTaskIncrementTick+0x164>)
 8003614:	6813      	ldr	r3, [r2, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
 800361a:	f7fd fcd7 	bl	8000fcc <vApplicationTickHook>
BaseType_t xSwitchRequired = pdFALSE;
 800361e:	2500      	movs	r5, #0
}
 8003620:	4628      	mov	r0, r5
 8003622:	b003      	add	sp, #12
 8003624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003628:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80036b4 <xTaskIncrementTick+0x170>
 800362c:	f8df a088 	ldr.w	sl, [pc, #136]	; 80036b8 <xTaskIncrementTick+0x174>
BaseType_t xSwitchRequired = pdFALSE;
 8003630:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003632:	f8da 3000 	ldr.w	r3, [sl]
			if( xPendedTicks == ( TickType_t ) 0 )
 8003636:	491c      	ldr	r1, [pc, #112]	; (80036a8 <xTaskIncrementTick+0x164>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xPendedTicks == ( TickType_t ) 0 )
 8003644:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8003646:	2a02      	cmp	r2, #2
 8003648:	bf28      	it	cs
 800364a:	2501      	movcs	r5, #1
			if( xPendedTicks == ( TickType_t ) 0 )
 800364c:	b18b      	cbz	r3, 8003672 <xTaskIncrementTick+0x12e>
			if( xYieldPending != pdFALSE )
 800364e:	4b17      	ldr	r3, [pc, #92]	; (80036ac <xTaskIncrementTick+0x168>)
 8003650:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf18      	it	ne
 8003656:	2501      	movne	r5, #1
}
 8003658:	4628      	mov	r0, r5
 800365a:	b003      	add	sp, #12
 800365c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
			taskSWITCH_DELAYED_LISTS();
 8003670:	e7fe      	b.n	8003670 <xTaskIncrementTick+0x12c>
				vApplicationTickHook();
 8003672:	f7fd fcab 	bl	8000fcc <vApplicationTickHook>
 8003676:	e7ea      	b.n	800364e <xTaskIncrementTick+0x10a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800367c:	f8cb 3000 	str.w	r3, [fp]
					break;
 8003680:	e7d7      	b.n	8003632 <xTaskIncrementTick+0xee>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003682:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003684:	f8df b028 	ldr.w	fp, [pc, #40]	; 80036b0 <xTaskIncrementTick+0x16c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003688:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f8cb 3000 	str.w	r3, [fp]
}
 8003692:	e766      	b.n	8003562 <xTaskIncrementTick+0x1e>
 8003694:	20001044 	.word	0x20001044
 8003698:	200010c4 	.word	0x200010c4
 800369c:	20000bd4 	.word	0x20000bd4
 80036a0:	20000bd8 	.word	0x20000bd8
 80036a4:	2000107c 	.word	0x2000107c
 80036a8:	20001080 	.word	0x20001080
 80036ac:	200010c8 	.word	0x200010c8
 80036b0:	20001078 	.word	0x20001078
 80036b4:	20000bdc 	.word	0x20000bdc
 80036b8:	20000bd0 	.word	0x20000bd0
 80036bc:	2000104c 	.word	0x2000104c

080036c0 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80036c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c4:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80036c6:	f000 fdbd 	bl	8004244 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80036ca:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <xTaskResumeAll.part.0+0xf8>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	3a01      	subs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d156      	bne.n	8003786 <xTaskResumeAll.part.0+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036d8:	4b38      	ldr	r3, [pc, #224]	; (80037bc <xTaskResumeAll.part.0+0xfc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d052      	beq.n	8003786 <xTaskResumeAll.part.0+0xc6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036e0:	4d37      	ldr	r5, [pc, #220]	; (80037c0 <xTaskResumeAll.part.0+0x100>)
 80036e2:	682b      	ldr	r3, [r5, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d063      	beq.n	80037b0 <xTaskResumeAll.part.0+0xf0>
 80036e8:	4e36      	ldr	r6, [pc, #216]	; (80037c4 <xTaskResumeAll.part.0+0x104>)
 80036ea:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80037d8 <xTaskResumeAll.part.0+0x118>
 80036ee:	4f36      	ldr	r7, [pc, #216]	; (80037c8 <xTaskResumeAll.part.0+0x108>)
 80036f0:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80037dc <xTaskResumeAll.part.0+0x11c>
						xYieldPending = pdTRUE;
 80036f4:	f04f 0a01 	mov.w	sl, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f8:	68eb      	ldr	r3, [r5, #12]
 80036fa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036fc:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003700:	f104 0018 	add.w	r0, r4, #24
 8003704:	f7fe fcb6 	bl	8002074 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003708:	4658      	mov	r0, fp
 800370a:	f7fe fcb3 	bl	8002074 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800370e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003710:	6832      	ldr	r2, [r6, #0]
 8003712:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8003716:	4293      	cmp	r3, r2
 8003718:	4659      	mov	r1, fp
 800371a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800371e:	bf88      	it	hi
 8003720:	6033      	strhi	r3, [r6, #0]
 8003722:	f7fe fc7f 	bl	8002024 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	429a      	cmp	r2, r3
 800372e:	d332      	bcc.n	8003796 <xTaskResumeAll.part.0+0xd6>
						xYieldPending = pdTRUE;
 8003730:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1de      	bne.n	80036f8 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800373a:	4b24      	ldr	r3, [pc, #144]	; (80037cc <xTaskResumeAll.part.0+0x10c>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	2a00      	cmp	r2, #0
 8003742:	d030      	beq.n	80037a6 <xTaskResumeAll.part.0+0xe6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003744:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003746:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <xTaskResumeAll.part.0+0x110>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003748:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800374a:	68d2      	ldr	r2, [r2, #12]
 800374c:	6852      	ldr	r2, [r2, #4]
 800374e:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003750:	4e20      	ldr	r6, [pc, #128]	; (80037d4 <xTaskResumeAll.part.0+0x114>)
 8003752:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8003754:	b144      	cbz	r4, 8003768 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8003756:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003758:	f7ff fef4 	bl	8003544 <xTaskIncrementTick>
 800375c:	b108      	cbz	r0, 8003762 <xTaskResumeAll.part.0+0xa2>
								xYieldPending = pdTRUE;
 800375e:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003762:	3c01      	subs	r4, #1
 8003764:	d1f8      	bne.n	8003758 <xTaskResumeAll.part.0+0x98>
						xPendedTicks = 0;
 8003766:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8003768:	f8d9 3000 	ldr.w	r3, [r9]
 800376c:	b15b      	cbz	r3, 8003786 <xTaskResumeAll.part.0+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
 800376e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003776:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003782:	2001      	movs	r0, #1
 8003784:	e000      	b.n	8003788 <xTaskResumeAll.part.0+0xc8>
BaseType_t xAlreadyYielded = pdFALSE;
 8003786:	2000      	movs	r0, #0
 8003788:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 800378a:	f000 fd7d 	bl	8004288 <vPortExitCritical>
}
 800378e:	9801      	ldr	r0, [sp, #4]
 8003790:	b003      	add	sp, #12
 8003792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003796:	682b      	ldr	r3, [r5, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ad      	bne.n	80036f8 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <xTaskResumeAll.part.0+0x10c>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	d1ce      	bne.n	8003744 <xTaskResumeAll.part.0+0x84>
		xNextTaskUnblockTime = portMAX_DELAY;
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <xTaskResumeAll.part.0+0x110>)
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e7cf      	b.n	8003750 <xTaskResumeAll.part.0+0x90>
 80037b0:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80037dc <xTaskResumeAll.part.0+0x11c>
 80037b4:	e7cc      	b.n	8003750 <xTaskResumeAll.part.0+0x90>
 80037b6:	bf00      	nop
 80037b8:	20001044 	.word	0x20001044
 80037bc:	2000103c 	.word	0x2000103c
 80037c0:	20001084 	.word	0x20001084
 80037c4:	2000104c 	.word	0x2000104c
 80037c8:	20000bd0 	.word	0x20000bd0
 80037cc:	20000bd4 	.word	0x20000bd4
 80037d0:	20001078 	.word	0x20001078
 80037d4:	20001080 	.word	0x20001080
 80037d8:	20000bdc 	.word	0x20000bdc
 80037dc:	200010c8 	.word	0x200010c8

080037e0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <xTaskResumeAll+0x1c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b943      	cbnz	r3, 80037f8 <xTaskResumeAll+0x18>
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	e7fe      	b.n	80037f6 <xTaskResumeAll+0x16>
 80037f8:	f7ff bf62 	b.w	80036c0 <xTaskResumeAll.part.0>
 80037fc:	20001044 	.word	0x20001044

08003800 <vTaskDelay>:
	{
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003802:	b950      	cbnz	r0, 800381a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8003804:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	f3bf 8f6f 	isb	sy
	}
 8003818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800381a:	4d1e      	ldr	r5, [pc, #120]	; (8003894 <vTaskDelay+0x94>)
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	b143      	cbz	r3, 8003832 <vTaskDelay+0x32>
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	e7fe      	b.n	8003830 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8003832:	682b      	ldr	r3, [r5, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	4604      	mov	r4, r0
 8003838:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800383c:	4e17      	ldr	r6, [pc, #92]	; (800389c <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
 800383e:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003840:	6830      	ldr	r0, [r6, #0]
 8003842:	3004      	adds	r0, #4
 8003844:	f7fe fc16 	bl	8002074 <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003848:	6833      	ldr	r3, [r6, #0]
 800384a:	19e4      	adds	r4, r4, r7
 800384c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800384e:	d310      	bcc.n	8003872 <vTaskDelay+0x72>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <vTaskDelay+0xa0>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	6831      	ldr	r1, [r6, #0]
 8003856:	3104      	adds	r1, #4
 8003858:	f7fe fbf4 	bl	8002044 <vListInsert>
	configASSERT( uxSchedulerSuspended );
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b9a3      	cbnz	r3, 800388a <vTaskDelay+0x8a>
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	e7fe      	b.n	8003870 <vTaskDelay+0x70>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <vTaskDelay+0xa4>)
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	6831      	ldr	r1, [r6, #0]
 8003878:	3104      	adds	r1, #4
 800387a:	f7fe fbe3 	bl	8002044 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <vTaskDelay+0xa8>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003884:	bf38      	it	cc
 8003886:	601c      	strcc	r4, [r3, #0]
 8003888:	e7e8      	b.n	800385c <vTaskDelay+0x5c>
 800388a:	f7ff ff19 	bl	80036c0 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800388e:	2800      	cmp	r0, #0
 8003890:	d0b8      	beq.n	8003804 <vTaskDelay+0x4>
	}
 8003892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003894:	20001044 	.word	0x20001044
 8003898:	200010c4 	.word	0x200010c4
 800389c:	20000bd0 	.word	0x20000bd0
 80038a0:	20000bd8 	.word	0x20000bd8
 80038a4:	20000bd4 	.word	0x20000bd4
 80038a8:	20001078 	.word	0x20001078

080038ac <vTaskSwitchContext>:
{
 80038ac:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <vTaskSwitchContext+0x84>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	b11b      	cbz	r3, 80038bc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80038b4:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <vTaskSwitchContext+0x88>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
}
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 80038bc:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <vTaskSwitchContext+0x88>)
		taskCHECK_FOR_STACK_OVERFLOW();
 80038be:	4c1e      	ldr	r4, [pc, #120]	; (8003938 <vTaskSwitchContext+0x8c>)
		xYieldPending = pdFALSE;
 80038c0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80038c2:	6822      	ldr	r2, [r4, #0]
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d92a      	bls.n	8003924 <vTaskSwitchContext+0x78>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ce:	4d1b      	ldr	r5, [pc, #108]	; (800393c <vTaskSwitchContext+0x90>)
 80038d0:	491b      	ldr	r1, [pc, #108]	; (8003940 <vTaskSwitchContext+0x94>)
 80038d2:	682b      	ldr	r3, [r5, #0]
 80038d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80038d8:	0092      	lsls	r2, r2, #2
 80038da:	0098      	lsls	r0, r3, #2
 80038dc:	588a      	ldr	r2, [r1, r2]
 80038de:	b942      	cbnz	r2, 80038f2 <vTaskSwitchContext+0x46>
 80038e0:	b1bb      	cbz	r3, 8003912 <vTaskSwitchContext+0x66>
 80038e2:	3b01      	subs	r3, #1
 80038e4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80038e8:	0098      	lsls	r0, r3, #2
 80038ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80038ee:	2a00      	cmp	r2, #0
 80038f0:	d0f6      	beq.n	80038e0 <vTaskSwitchContext+0x34>
 80038f2:	18c2      	adds	r2, r0, r3
 80038f4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80038f8:	4602      	mov	r2, r0
 80038fa:	6841      	ldr	r1, [r0, #4]
 80038fc:	6849      	ldr	r1, [r1, #4]
 80038fe:	6041      	str	r1, [r0, #4]
 8003900:	3208      	adds	r2, #8
 8003902:	4291      	cmp	r1, r2
 8003904:	bf04      	itt	eq
 8003906:	6849      	ldreq	r1, [r1, #4]
 8003908:	6041      	streq	r1, [r0, #4]
 800390a:	68ca      	ldr	r2, [r1, #12]
 800390c:	6022      	str	r2, [r4, #0]
 800390e:	602b      	str	r3, [r5, #0]
}
 8003910:	bd38      	pop	{r3, r4, r5, pc}
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003922:	e7fe      	b.n	8003922 <vTaskSwitchContext+0x76>
		taskCHECK_FOR_STACK_OVERFLOW();
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	6821      	ldr	r1, [r4, #0]
 8003928:	3134      	adds	r1, #52	; 0x34
 800392a:	f005 fd3f 	bl	80093ac <vApplicationStackOverflowHook>
 800392e:	e7ce      	b.n	80038ce <vTaskSwitchContext+0x22>
 8003930:	20001044 	.word	0x20001044
 8003934:	200010c8 	.word	0x200010c8
 8003938:	20000bd0 	.word	0x20000bd0
 800393c:	2000104c 	.word	0x2000104c
 8003940:	20000bdc 	.word	0x20000bdc

08003944 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003944:	b1d0      	cbz	r0, 800397c <vTaskPlaceOnEventList+0x38>
{
 8003946:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003948:	4d1a      	ldr	r5, [pc, #104]	; (80039b4 <vTaskPlaceOnEventList+0x70>)
 800394a:	460c      	mov	r4, r1
 800394c:	6829      	ldr	r1, [r5, #0]
 800394e:	3118      	adds	r1, #24
 8003950:	f7fe fb78 	bl	8002044 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8003954:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <vTaskPlaceOnEventList+0x74>)
 8003956:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003958:	6828      	ldr	r0, [r5, #0]
 800395a:	3004      	adds	r0, #4
 800395c:	f7fe fb8a 	bl	8002074 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003960:	1c63      	adds	r3, r4, #1
 8003962:	d014      	beq.n	800398e <vTaskPlaceOnEventList+0x4a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	19a4      	adds	r4, r4, r6
 8003968:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800396a:	d317      	bcc.n	800399c <vTaskPlaceOnEventList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <vTaskPlaceOnEventList+0x78>)
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	6829      	ldr	r1, [r5, #0]
}
 8003972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003976:	3104      	adds	r1, #4
 8003978:	f7fe bb64 	b.w	8002044 <vListInsert>
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800398c:	e7fe      	b.n	800398c <vTaskPlaceOnEventList+0x48>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800398e:	6829      	ldr	r1, [r5, #0]
 8003990:	480b      	ldr	r0, [pc, #44]	; (80039c0 <vTaskPlaceOnEventList+0x7c>)
}
 8003992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003996:	3104      	adds	r1, #4
 8003998:	f7fe bb44 	b.w	8002024 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <vTaskPlaceOnEventList+0x80>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	6829      	ldr	r1, [r5, #0]
 80039a2:	3104      	adds	r1, #4
 80039a4:	f7fe fb4e 	bl	8002044 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <vTaskPlaceOnEventList+0x84>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80039ae:	bf38      	it	cc
 80039b0:	601c      	strcc	r4, [r3, #0]
}
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	20000bd0 	.word	0x20000bd0
 80039b8:	200010c4 	.word	0x200010c4
 80039bc:	20000bd8 	.word	0x20000bd8
 80039c0:	2000109c 	.word	0x2000109c
 80039c4:	20000bd4 	.word	0x20000bd4
 80039c8:	20001078 	.word	0x20001078

080039cc <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 80039cc:	b330      	cbz	r0, 8003a1c <vTaskPlaceOnEventListRestricted+0x50>
	{
 80039ce:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039d0:	4e1d      	ldr	r6, [pc, #116]	; (8003a48 <vTaskPlaceOnEventListRestricted+0x7c>)
 80039d2:	460c      	mov	r4, r1
 80039d4:	6831      	ldr	r1, [r6, #0]
 80039d6:	4615      	mov	r5, r2
 80039d8:	3118      	adds	r1, #24
 80039da:	f7fe fb23 	bl	8002024 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 80039de:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <vTaskPlaceOnEventListRestricted+0x80>)
		if( xWaitIndefinitely != pdFALSE )
 80039e0:	b985      	cbnz	r5, 8003a04 <vTaskPlaceOnEventListRestricted+0x38>
const TickType_t xConstTickCount = xTickCount;
 80039e2:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039e4:	6830      	ldr	r0, [r6, #0]
 80039e6:	3004      	adds	r0, #4
 80039e8:	f7fe fb44 	bl	8002074 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039ec:	6833      	ldr	r3, [r6, #0]
 80039ee:	1964      	adds	r4, r4, r5
 80039f0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039f2:	d31c      	bcc.n	8003a2e <vTaskPlaceOnEventListRestricted+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039f4:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <vTaskPlaceOnEventListRestricted+0x84>)
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	6831      	ldr	r1, [r6, #0]
	}
 80039fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039fe:	3104      	adds	r1, #4
 8003a00:	f7fe bb20 	b.w	8002044 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8003a04:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a06:	6830      	ldr	r0, [r6, #0]
 8003a08:	3004      	adds	r0, #4
 8003a0a:	f7fe fb33 	bl	8002074 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a0e:	6831      	ldr	r1, [r6, #0]
 8003a10:	4810      	ldr	r0, [pc, #64]	; (8003a54 <vTaskPlaceOnEventListRestricted+0x88>)
	}
 8003a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a16:	3104      	adds	r1, #4
 8003a18:	f7fe bb04 	b.w	8002024 <vListInsertEnd>
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8003a2c:	e7fe      	b.n	8003a2c <vTaskPlaceOnEventListRestricted+0x60>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	6831      	ldr	r1, [r6, #0]
 8003a34:	3104      	adds	r1, #4
 8003a36:	f7fe fb05 	bl	8002044 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <vTaskPlaceOnEventListRestricted+0x90>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003a40:	bf38      	it	cc
 8003a42:	601c      	strcc	r4, [r3, #0]
	}
 8003a44:	bd70      	pop	{r4, r5, r6, pc}
 8003a46:	bf00      	nop
 8003a48:	20000bd0 	.word	0x20000bd0
 8003a4c:	200010c4 	.word	0x200010c4
 8003a50:	20000bd8 	.word	0x20000bd8
 8003a54:	2000109c 	.word	0x2000109c
 8003a58:	20000bd4 	.word	0x20000bd4
 8003a5c:	20001078 	.word	0x20001078

08003a60 <xTaskRemoveFromEventList>:
{
 8003a60:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a62:	68c3      	ldr	r3, [r0, #12]
 8003a64:	68dc      	ldr	r4, [r3, #12]
{
 8003a66:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8003a68:	2c00      	cmp	r4, #0
 8003a6a:	d02b      	beq.n	8003ac4 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a6c:	f104 0518 	add.w	r5, r4, #24
 8003a70:	4628      	mov	r0, r5
 8003a72:	f7fe faff 	bl	8002074 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a76:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <xTaskRemoveFromEventList+0x78>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b17b      	cbz	r3, 8003a9c <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a7c:	4817      	ldr	r0, [pc, #92]	; (8003adc <xTaskRemoveFromEventList+0x7c>)
 8003a7e:	4629      	mov	r1, r5
 8003a80:	f7fe fad0 	bl	8002024 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a84:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <xTaskRemoveFromEventList+0x80>)
 8003a86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003a8e:	bf85      	ittet	hi
 8003a90:	4b14      	ldrhi	r3, [pc, #80]	; (8003ae4 <xTaskRemoveFromEventList+0x84>)
 8003a92:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8003a94:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8003a96:	6018      	strhi	r0, [r3, #0]
}
 8003a98:	b003      	add	sp, #12
 8003a9a:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a9c:	1d21      	adds	r1, r4, #4
 8003a9e:	4608      	mov	r0, r1
 8003aa0:	9101      	str	r1, [sp, #4]
 8003aa2:	f7fe fae7 	bl	8002074 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003aa6:	4a10      	ldr	r2, [pc, #64]	; (8003ae8 <xTaskRemoveFromEventList+0x88>)
 8003aa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003aaa:	6810      	ldr	r0, [r2, #0]
 8003aac:	9901      	ldr	r1, [sp, #4]
 8003aae:	4283      	cmp	r3, r0
 8003ab0:	480e      	ldr	r0, [pc, #56]	; (8003aec <xTaskRemoveFromEventList+0x8c>)
 8003ab2:	bf88      	it	hi
 8003ab4:	6013      	strhi	r3, [r2, #0]
 8003ab6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003aba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003abe:	f7fe fab1 	bl	8002024 <vListInsertEnd>
 8003ac2:	e7df      	b.n	8003a84 <xTaskRemoveFromEventList+0x24>
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8003ad4:	e7fe      	b.n	8003ad4 <xTaskRemoveFromEventList+0x74>
 8003ad6:	bf00      	nop
 8003ad8:	20001044 	.word	0x20001044
 8003adc:	20001084 	.word	0x20001084
 8003ae0:	20000bd0 	.word	0x20000bd0
 8003ae4:	200010c8 	.word	0x200010c8
 8003ae8:	2000104c 	.word	0x2000104c
 8003aec:	20000bdc 	.word	0x20000bdc

08003af0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003af0:	4a03      	ldr	r2, [pc, #12]	; (8003b00 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003af2:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003af4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	e9c0 2300 	strd	r2, r3, [r0]
}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	2000107c 	.word	0x2000107c
 8003b04:	200010c4 	.word	0x200010c4

08003b08 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8003b08:	b328      	cbz	r0, 8003b56 <xTaskCheckForTimeOut+0x4e>
{
 8003b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0c:	460d      	mov	r5, r1
 8003b0e:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8003b10:	b1c1      	cbz	r1, 8003b44 <xTaskCheckForTimeOut+0x3c>
 8003b12:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003b14:	f000 fb96 	bl	8004244 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8003b18:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8003b1c:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8003b1e:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003b20:	d030      	beq.n	8003b84 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b22:	f8df c070 	ldr.w	ip, [pc, #112]	; 8003b94 <xTaskCheckForTimeOut+0x8c>
 8003b26:	e9d4 6000 	ldrd	r6, r0, [r4]
 8003b2a:	f8dc 7000 	ldr.w	r7, [ip]
 8003b2e:	42be      	cmp	r6, r7
 8003b30:	d01a      	beq.n	8003b68 <xTaskCheckForTimeOut+0x60>
 8003b32:	4288      	cmp	r0, r1
 8003b34:	d818      	bhi.n	8003b68 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8003b36:	2001      	movs	r0, #1
 8003b38:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8003b3a:	f000 fba5 	bl	8004288 <vPortExitCritical>
}
 8003b3e:	9801      	ldr	r0, [sp, #4]
 8003b40:	b003      	add	sp, #12
 8003b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8003b54:	e7fe      	b.n	8003b54 <xTaskCheckForTimeOut+0x4c>
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8003b66:	e7fe      	b.n	8003b66 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b68:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b6c:	4573      	cmp	r3, lr
 8003b6e:	d90b      	bls.n	8003b88 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 8003b70:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b72:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b76:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8003b78:	4403      	add	r3, r0
 8003b7a:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8003b7c:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b7e:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8003b82:	e7d9      	b.n	8003b38 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8003b84:	2000      	movs	r0, #0
 8003b86:	e7d7      	b.n	8003b38 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	e7d3      	b.n	8003b38 <xTaskCheckForTimeOut+0x30>
 8003b90:	200010c4 	.word	0x200010c4
 8003b94:	2000107c 	.word	0x2000107c

08003b98 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003b98:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <vTaskMissedYield+0x8>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
}
 8003b9e:	4770      	bx	lr
 8003ba0:	200010c8 	.word	0x200010c8

08003ba4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <xTaskGetSchedulerState+0x18>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	b133      	cbz	r3, 8003bb8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <xTaskGetSchedulerState+0x1c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2002      	moveq	r0, #2
 8003bb4:	2000      	movne	r0, #0
 8003bb6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bb8:	2001      	movs	r0, #1
	}
 8003bba:	4770      	bx	lr
 8003bbc:	20001098 	.word	0x20001098
 8003bc0:	20001044 	.word	0x20001044

08003bc4 <xTaskPriorityInherit>:
	{
 8003bc4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003bc6:	4604      	mov	r4, r0
	{
 8003bc8:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8003bca:	b1c8      	cbz	r0, 8003c00 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003bcc:	4d1d      	ldr	r5, [pc, #116]	; (8003c44 <xTaskPriorityInherit+0x80>)
 8003bce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003bd0:	682a      	ldr	r2, [r5, #0]
 8003bd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d215      	bcs.n	8003c04 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003bd8:	6982      	ldr	r2, [r0, #24]
 8003bda:	2a00      	cmp	r2, #0
 8003bdc:	db04      	blt.n	8003be8 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bde:	682a      	ldr	r2, [r5, #0]
 8003be0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003be2:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8003be6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003be8:	4e17      	ldr	r6, [pc, #92]	; (8003c48 <xTaskPriorityInherit+0x84>)
 8003bea:	6962      	ldr	r2, [r4, #20]
 8003bec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bf0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d00e      	beq.n	8003c16 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8003bfe:	2001      	movs	r0, #1
	}
 8003c00:	b002      	add	sp, #8
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	4298      	cmp	r0, r3
 8003c0c:	bf2c      	ite	cs
 8003c0e:	2000      	movcs	r0, #0
 8003c10:	2001      	movcc	r0, #1
	}
 8003c12:	b002      	add	sp, #8
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c16:	1d21      	adds	r1, r4, #4
 8003c18:	4608      	mov	r0, r1
 8003c1a:	9101      	str	r1, [sp, #4]
 8003c1c:	f7fe fa2a 	bl	8002074 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c20:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c24:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c26:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c28:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c2a:	4290      	cmp	r0, r2
 8003c2c:	bf88      	it	hi
 8003c2e:	6018      	strhi	r0, [r3, #0]
 8003c30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c34:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8003c38:	9901      	ldr	r1, [sp, #4]
 8003c3a:	f7fe f9f3 	bl	8002024 <vListInsertEnd>
				xReturn = pdTRUE;
 8003c3e:	2001      	movs	r0, #1
 8003c40:	e7de      	b.n	8003c00 <xTaskPriorityInherit+0x3c>
 8003c42:	bf00      	nop
 8003c44:	20000bd0 	.word	0x20000bd0
 8003c48:	20000bdc 	.word	0x20000bdc
 8003c4c:	2000104c 	.word	0x2000104c

08003c50 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8003c50:	b318      	cbz	r0, 8003c9a <xTaskPriorityDisinherit+0x4a>
	{
 8003c52:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <xTaskPriorityDisinherit+0x80>)
 8003c56:	681c      	ldr	r4, [r3, #0]
 8003c58:	4284      	cmp	r4, r0
	{
 8003c5a:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 8003c5c:	d008      	beq.n	8003c70 <xTaskPriorityDisinherit+0x20>
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	e7fe      	b.n	8003c6e <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003c72:	b14b      	cbz	r3, 8003c88 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c76:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8003c78:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c7a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003c7c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c7e:	d000      	beq.n	8003c82 <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c80:	b16b      	cbz	r3, 8003c9e <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8003c82:	2000      	movs	r0, #0
	}
 8003c84:	b002      	add	sp, #8
 8003c86:	bd10      	pop	{r4, pc}
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8003c98:	e7fe      	b.n	8003c98 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8003c9a:	2000      	movs	r0, #0
	}
 8003c9c:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c9e:	1d21      	adds	r1, r4, #4
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	9101      	str	r1, [sp, #4]
 8003ca4:	f7fe f9e6 	bl	8002074 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ca8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8003caa:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cac:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cae:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
 8003cb2:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cb4:	6810      	ldr	r0, [r2, #0]
 8003cb6:	9901      	ldr	r1, [sp, #4]
 8003cb8:	4283      	cmp	r3, r0
 8003cba:	4807      	ldr	r0, [pc, #28]	; (8003cd8 <xTaskPriorityDisinherit+0x88>)
 8003cbc:	bf88      	it	hi
 8003cbe:	6013      	strhi	r3, [r2, #0]
 8003cc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003cc4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003cc8:	f7fe f9ac 	bl	8002024 <vListInsertEnd>
					xReturn = pdTRUE;
 8003ccc:	2001      	movs	r0, #1
		return xReturn;
 8003cce:	e7d9      	b.n	8003c84 <xTaskPriorityDisinherit+0x34>
 8003cd0:	20000bd0 	.word	0x20000bd0
 8003cd4:	2000104c 	.word	0x2000104c
 8003cd8:	20000bdc 	.word	0x20000bdc

08003cdc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d041      	beq.n	8003d64 <vTaskPriorityDisinheritAfterTimeout+0x88>
	{
 8003ce0:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 8003ce2:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8003ce8:	b153      	cbz	r3, 8003d00 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003cea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003cec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cee:	4281      	cmp	r1, r0
 8003cf0:	bf38      	it	cc
 8003cf2:	4601      	movcc	r1, r0
 8003cf4:	428a      	cmp	r2, r1
 8003cf6:	d001      	beq.n	8003cfc <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d00a      	beq.n	8003d12 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8003cfc:	b003      	add	sp, #12
 8003cfe:	bd30      	pop	{r4, r5, pc}
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8003d10:	e7fe      	b.n	8003d10 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8003d12:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	42a3      	cmp	r3, r4
 8003d18:	d025      	beq.n	8003d66 <vTaskPriorityDisinheritAfterTimeout+0x8a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d1a:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8003d1c:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d1e:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d20:	bfa8      	it	ge
 8003d22:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d26:	4d15      	ldr	r5, [pc, #84]	; (8003d7c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d28:	bfa8      	it	ge
 8003d2a:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003d30:	6961      	ldr	r1, [r4, #20]
 8003d32:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8003d36:	4299      	cmp	r1, r3
 8003d38:	d1e0      	bne.n	8003cfc <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d3a:	1d21      	adds	r1, r4, #4
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	9101      	str	r1, [sp, #4]
 8003d40:	f7fe f998 	bl	8002074 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8003d46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	9901      	ldr	r1, [sp, #4]
 8003d4c:	4290      	cmp	r0, r2
 8003d4e:	bf88      	it	hi
 8003d50:	6018      	strhi	r0, [r3, #0]
 8003d52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003d56:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 8003d5a:	b003      	add	sp, #12
 8003d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8003d60:	f7fe b960 	b.w	8002024 <vListInsertEnd>
 8003d64:	4770      	bx	lr
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8003d76:	e7fe      	b.n	8003d76 <vTaskPriorityDisinheritAfterTimeout+0x9a>
 8003d78:	20000bd0 	.word	0x20000bd0
 8003d7c:	20000bdc 	.word	0x20000bdc
 8003d80:	2000104c 	.word	0x2000104c

08003d84 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <pvTaskIncrementMutexHeldCount+0x14>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	b11a      	cbz	r2, 8003d92 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003d8a:	6819      	ldr	r1, [r3, #0]
 8003d8c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003d8e:	3201      	adds	r2, #1
 8003d90:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8003d92:	6818      	ldr	r0, [r3, #0]
	}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000bd0 	.word	0x20000bd0

08003d9c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003da0:	4e22      	ldr	r6, [pc, #136]	; (8003e2c <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 8003da2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003e34 <prvSwitchTimerLists+0x98>
{
 8003da6:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8003da8:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dac:	e00d      	b.n	8003dca <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dae:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003db2:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003db4:	1d25      	adds	r5, r4, #4
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7fe f95c 	bl	8002074 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dbc:	6a23      	ldr	r3, [r4, #32]
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dc2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003dc6:	075b      	lsls	r3, r3, #29
 8003dc8:	d40a      	bmi.n	8003de0 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dca:	6833      	ldr	r3, [r6, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	2a00      	cmp	r2, #0
 8003dd0:	d1ed      	bne.n	8003dae <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <prvSwitchTimerLists+0x94>)
 8003dd4:	6811      	ldr	r1, [r2, #0]
 8003dd6:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8003dd8:	6013      	str	r3, [r2, #0]
}
 8003dda:	b005      	add	sp, #20
 8003ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003de0:	69a3      	ldr	r3, [r4, #24]
 8003de2:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8003de4:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003de6:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8003de8:	d205      	bcs.n	8003df6 <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dea:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003dec:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dee:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003df0:	f7fe f928 	bl	8002044 <vListInsert>
 8003df4:	e7e9      	b.n	8003dca <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 8003df6:	f8d9 3000 	ldr.w	r3, [r9]
 8003dfa:	b16b      	cbz	r3, 8003e18 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dfc:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003e00:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e02:	f7ff fecf 	bl	8003ba4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e06:	2300      	movs	r3, #0
 8003e08:	f8d9 0000 	ldr.w	r0, [r9]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4669      	mov	r1, sp
 8003e10:	f7fe fa36 	bl	8002280 <xQueueGenericSend>
				configASSERT( xResult );
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d1d8      	bne.n	8003dca <prvSwitchTimerLists+0x2e>
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	e7fe      	b.n	8003e28 <prvSwitchTimerLists+0x8c>
 8003e2a:	bf00      	nop
 8003e2c:	200010cc 	.word	0x200010cc
 8003e30:	200010d0 	.word	0x200010d0
 8003e34:	200011f0 	.word	0x200011f0

08003e38 <prvTimerTask>:
{
 8003e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3c:	4e9b      	ldr	r6, [pc, #620]	; (80040ac <prvTimerTask+0x274>)
 8003e3e:	4d9c      	ldr	r5, [pc, #624]	; (80040b0 <prvTimerTask+0x278>)
 8003e40:	4c9c      	ldr	r4, [pc, #624]	; (80040b4 <prvTimerTask+0x27c>)
 8003e42:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
 8003e44:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8003e48:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e4c:	6833      	ldr	r3, [r6, #0]
 8003e4e:	681f      	ldr	r7, [r3, #0]
 8003e50:	2f00      	cmp	r7, #0
 8003e52:	f000 80a8 	beq.w	8003fa6 <prvTimerTask+0x16e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8003e5a:	f7ff fb65 	bl	8003528 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003e5e:	f7ff fb6b 	bl	8003538 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003e62:	682a      	ldr	r2, [r5, #0]
 8003e64:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8003e66:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003e68:	f0c0 80ae 	bcc.w	8003fc8 <prvTimerTask+0x190>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e6c:	42b8      	cmp	r0, r7
	xLastTime = xTimeNow;
 8003e6e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e70:	f080 80b4 	bcs.w	8003fdc <prvTimerTask+0x1a4>
 8003e74:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e76:	6820      	ldr	r0, [r4, #0]
 8003e78:	eba7 010a 	sub.w	r1, r7, sl
 8003e7c:	f7ff f806 	bl	8002e8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e80:	f7ff fcae 	bl	80037e0 <xTaskResumeAll>
 8003e84:	b928      	cbnz	r0, 8003e92 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 8003e86:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	2200      	movs	r2, #0
 8003e96:	a902      	add	r1, sp, #8
 8003e98:	f7fe fc66 	bl	8002768 <xQueueReceive>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d0d5      	beq.n	8003e4c <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ea0:	9b02      	ldr	r3, [sp, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	db76      	blt.n	8003f94 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ea6:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	b113      	cbz	r3, 8003eb2 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eac:	1d38      	adds	r0, r7, #4
 8003eae:	f7fe f8e1 	bl	8002074 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8003eb2:	f7ff fb41 	bl	8003538 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003eb6:	682b      	ldr	r3, [r5, #0]
 8003eb8:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003eba:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003ebc:	f0c0 808b 	bcc.w	8003fd6 <prvTimerTask+0x19e>
			switch( xMessage.xMessageID )
 8003ec0:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8003ec2:	f8c5 a000 	str.w	sl, [r5]
			switch( xMessage.xMessageID )
 8003ec6:	2b09      	cmp	r3, #9
 8003ec8:	d8e3      	bhi.n	8003e92 <prvTimerTask+0x5a>
 8003eca:	e8df f003 	tbb	[pc, r3]
 8003ece:	0505      	.short	0x0505
 8003ed0:	5a3d5305 	.word	0x5a3d5305
 8003ed4:	3d530505 	.word	0x3d530505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ed8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003edc:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ede:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ee8:	9b03      	ldr	r3, [sp, #12]
 8003eea:	1899      	adds	r1, r3, r2
 8003eec:	bf2c      	ite	cs
 8003eee:	2001      	movcs	r0, #1
 8003ef0:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8003ef2:	4551      	cmp	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ef4:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8003ef6:	f200 808c 	bhi.w	8004012 <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efa:	ebaa 0303 	sub.w	r3, sl, r3
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d832      	bhi.n	8003f68 <prvTimerTask+0x130>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	4638      	mov	r0, r7
 8003f06:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f0c:	075b      	lsls	r3, r3, #29
 8003f0e:	d5c0      	bpl.n	8003e92 <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	b183      	cbz	r3, 8003f36 <prvTimerTask+0xfe>
		xMessage.xMessageID = xCommandID;
 8003f14:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f16:	69bb      	ldr	r3, [r7, #24]
		xMessage.xMessageID = xCommandID;
 8003f18:	9206      	str	r2, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f1a:	9a03      	ldr	r2, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f1c:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f1e:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f20:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f22:	f7ff fe3f 	bl	8003ba4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f26:	2300      	movs	r3, #0
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	a906      	add	r1, sp, #24
 8003f2e:	f7fe f9a7 	bl	8002280 <xQueueGenericSend>
							configASSERT( xResult );
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d1ad      	bne.n	8003e92 <prvTimerTask+0x5a>
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	e7fe      	b.n	8003f46 <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f54:	9b03      	ldr	r3, [sp, #12]
 8003f56:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 809d 	beq.w	8004098 <prvTimerTask+0x260>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f5e:	4453      	add	r3, sl
	if( xNextExpiryTime <= xTimeNow )
 8003f60:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f62:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f64:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8003f66:	d85e      	bhi.n	8004026 <prvTimerTask+0x1ee>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f68:	4b53      	ldr	r3, [pc, #332]	; (80040b8 <prvTimerTask+0x280>)
 8003f6a:	1d39      	adds	r1, r7, #4
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	f7fe f869 	bl	8002044 <vListInsert>
	return xProcessTimerNow;
 8003f72:	e78e      	b.n	8003e92 <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8003f80:	e787      	b.n	8003e92 <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f86:	079a      	lsls	r2, r3, #30
 8003f88:	d552      	bpl.n	8004030 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003f92:	e77e      	b.n	8003e92 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f94:	9b03      	ldr	r3, [sp, #12]
 8003f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f9a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f9c:	9b02      	ldr	r3, [sp, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f6ff af77 	blt.w	8003e92 <prvTimerTask+0x5a>
 8003fa4:	e77f      	b.n	8003ea6 <prvTimerTask+0x6e>
	vTaskSuspendAll();
 8003fa6:	f7ff fabf 	bl	8003528 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003faa:	f7ff fac5 	bl	8003538 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003fae:	682a      	ldr	r2, [r5, #0]
 8003fb0:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8003fb2:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003fb4:	d808      	bhi.n	8003fc8 <prvTimerTask+0x190>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fb6:	4b40      	ldr	r3, [pc, #256]	; (80040b8 <prvTimerTask+0x280>)
	xLastTime = xTimeNow;
 8003fb8:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	fab2 f282 	clz	r2, r2
 8003fc4:	0952      	lsrs	r2, r2, #5
 8003fc6:	e756      	b.n	8003e76 <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 8003fc8:	f7ff fee8 	bl	8003d9c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8003fcc:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8003fd0:	f7ff fc06 	bl	80037e0 <xTaskResumeAll>
 8003fd4:	e75d      	b.n	8003e92 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 8003fd6:	f7ff fee1 	bl	8003d9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fda:	e771      	b.n	8003ec0 <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 8003fdc:	f7ff fc00 	bl	80037e0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe0:	6832      	ldr	r2, [r6, #0]
 8003fe2:	68d2      	ldr	r2, [r2, #12]
 8003fe4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fe8:	f10b 0104 	add.w	r1, fp, #4
 8003fec:	4608      	mov	r0, r1
 8003fee:	9101      	str	r1, [sp, #4]
 8003ff0:	f7fe f840 	bl	8002074 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ff4:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8003ff8:	9901      	ldr	r1, [sp, #4]
 8003ffa:	f010 0f04 	tst.w	r0, #4
 8003ffe:	d11b      	bne.n	8004038 <prvTimerTask+0x200>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004000:	f020 0001 	bic.w	r0, r0, #1
 8004004:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004008:	f8db 3020 	ldr.w	r3, [fp, #32]
 800400c:	4658      	mov	r0, fp
 800400e:	4798      	blx	r3
}
 8004010:	e73f      	b.n	8003e92 <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004012:	4553      	cmp	r3, sl
 8004014:	d902      	bls.n	800401c <prvTimerTask+0x1e4>
 8004016:	2800      	cmp	r0, #0
 8004018:	f43f af73 	beq.w	8003f02 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800401c:	6830      	ldr	r0, [r6, #0]
 800401e:	1d39      	adds	r1, r7, #4
 8004020:	f7fe f810 	bl	8002044 <vListInsert>
	return xProcessTimerNow;
 8004024:	e735      	b.n	8003e92 <prvTimerTask+0x5a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004026:	6830      	ldr	r0, [r6, #0]
 8004028:	1d39      	adds	r1, r7, #4
 800402a:	f7fe f80b 	bl	8002044 <vListInsert>
 800402e:	e730      	b.n	8003e92 <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8004030:	4638      	mov	r0, r7
 8004032:	f000 fb21 	bl	8004678 <vPortFree>
 8004036:	e72c      	b.n	8003e92 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004038:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800403c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004040:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8004042:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004044:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8004048:	d203      	bcs.n	8004052 <prvTimerTask+0x21a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800404a:	6830      	ldr	r0, [r6, #0]
 800404c:	f7fd fffa 	bl	8002044 <vListInsert>
	return xProcessTimerNow;
 8004050:	e7da      	b.n	8004008 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004052:	ebaa 0307 	sub.w	r3, sl, r7
 8004056:	429a      	cmp	r2, r3
 8004058:	d819      	bhi.n	800408e <prvTimerTask+0x256>
	if( xTimerQueue != NULL )
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	b173      	cbz	r3, 800407c <prvTimerTask+0x244>
		xMessage.xMessageID = xCommandID;
 800405e:	2300      	movs	r3, #0
 8004060:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004062:	9707      	str	r7, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004064:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004068:	f7ff fd9c 	bl	8003ba4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800406c:	2300      	movs	r3, #0
 800406e:	6820      	ldr	r0, [r4, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	a906      	add	r1, sp, #24
 8004074:	f7fe f904 	bl	8002280 <xQueueGenericSend>
			configASSERT( xResult );
 8004078:	2800      	cmp	r0, #0
 800407a:	d1c5      	bne.n	8004008 <prvTimerTask+0x1d0>
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	e7fe      	b.n	800408c <prvTimerTask+0x254>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800408e:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <prvTimerTask+0x280>)
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	f7fd ffd7 	bl	8002044 <vListInsert>
	return xProcessTimerNow;
 8004096:	e7b7      	b.n	8004008 <prvTimerTask+0x1d0>
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040a8:	e7fe      	b.n	80040a8 <prvTimerTask+0x270>
 80040aa:	bf00      	nop
 80040ac:	200010cc 	.word	0x200010cc
 80040b0:	2000119c 	.word	0x2000119c
 80040b4:	200011f0 	.word	0x200011f0
 80040b8:	200010d0 	.word	0x200010d0

080040bc <xTimerCreateTimerTask>:
{
 80040bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80040be:	4c23      	ldr	r4, [pc, #140]	; (800414c <xTimerCreateTimerTask+0x90>)
{
 80040c0:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 80040c2:	f000 f8bf 	bl	8004244 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80040c6:	6825      	ldr	r5, [r4, #0]
 80040c8:	b335      	cbz	r5, 8004118 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040ca:	f000 f8dd 	bl	8004288 <vPortExitCritical>
	if( xTimerQueue != NULL )
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	b1cb      	cbz	r3, 8004106 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80040d2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040d4:	aa07      	add	r2, sp, #28
 80040d6:	a906      	add	r1, sp, #24
 80040d8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040da:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040de:	f7fd ff81 	bl	8001fe4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040e2:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80040e6:	2302      	movs	r3, #2
 80040e8:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	9a07      	ldr	r2, [sp, #28]
 80040f0:	4917      	ldr	r1, [pc, #92]	; (8004150 <xTimerCreateTimerTask+0x94>)
 80040f2:	4818      	ldr	r0, [pc, #96]	; (8004154 <xTimerCreateTimerTask+0x98>)
 80040f4:	4623      	mov	r3, r4
 80040f6:	f7ff f89b 	bl	8003230 <xTaskCreateStatic>
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <xTimerCreateTimerTask+0x9c>)
 80040fc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80040fe:	b110      	cbz	r0, 8004106 <xTimerCreateTimerTask+0x4a>
}
 8004100:	2001      	movs	r0, #1
 8004102:	b009      	add	sp, #36	; 0x24
 8004104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8004116:	e7fe      	b.n	8004116 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8004118:	4f10      	ldr	r7, [pc, #64]	; (800415c <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 800411a:	4e11      	ldr	r6, [pc, #68]	; (8004160 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 800411c:	4638      	mov	r0, r7
 800411e:	f7fd ff71 	bl	8002004 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004122:	4630      	mov	r0, r6
 8004124:	f7fd ff6e 	bl	8002004 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004128:	4a0e      	ldr	r2, [pc, #56]	; (8004164 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800412a:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 800412c:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800412e:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8004132:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004134:	2110      	movs	r1, #16
 8004136:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <xTimerCreateTimerTask+0xb4>)
 8004138:	200a      	movs	r0, #10
 800413a:	f7fd ffeb 	bl	8002114 <xQueueGenericCreateStatic>
 800413e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8004140:	2800      	cmp	r0, #0
 8004142:	d0c2      	beq.n	80040ca <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004144:	490b      	ldr	r1, [pc, #44]	; (8004174 <xTimerCreateTimerTask+0xb8>)
 8004146:	f7fe fe79 	bl	8002e3c <vQueueAddToRegistry>
 800414a:	e7be      	b.n	80040ca <xTimerCreateTimerTask+0xe>
 800414c:	200011f0 	.word	0x200011f0
 8004150:	0800ce48 	.word	0x0800ce48
 8004154:	08003e39 	.word	0x08003e39
 8004158:	200011f4 	.word	0x200011f4
 800415c:	20001174 	.word	0x20001174
 8004160:	20001188 	.word	0x20001188
 8004164:	200010cc 	.word	0x200010cc
 8004168:	200010d0 	.word	0x200010d0
 800416c:	200011a0 	.word	0x200011a0
 8004170:	200010d4 	.word	0x200010d4
 8004174:	0800ce40 	.word	0x0800ce40

08004178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004178:	4808      	ldr	r0, [pc, #32]	; (800419c <prvPortStartFirstTask+0x24>)
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f380 8808 	msr	MSP, r0
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f380 8814 	msr	CONTROL, r0
 800418a:	b662      	cpsie	i
 800418c:	b661      	cpsie	f
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	df00      	svc	0
 8004198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800419a:	0000      	.short	0x0000
 800419c:	e000ed08 	.word	0xe000ed08

080041a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041b0 <vPortEnableVFP+0x10>
 80041a4:	6801      	ldr	r1, [r0, #0]
 80041a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041aa:	6001      	str	r1, [r0, #0]
 80041ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041ae:	0000      	.short	0x0000
 80041b0:	e000ed88 	.word	0xe000ed88

080041b4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <prvTaskExitError+0x3c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
{
 80041b8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80041ba:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80041bc:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 80041be:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80041c0:	d008      	beq.n	80041d4 <prvTaskExitError+0x20>
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	e7fe      	b.n	80041d2 <prvTaskExitError+0x1e>
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80041e4:	9b01      	ldr	r3, [sp, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0fc      	beq.n	80041e4 <prvTaskExitError+0x30>
}
 80041ea:	b002      	add	sp, #8
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000008 	.word	0x20000008

080041f4 <pxPortInitialiseStack>:
{
 80041f4:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041fa:	4c07      	ldr	r4, [pc, #28]	; (8004218 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041fc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004200:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004204:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004208:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800420c:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8004210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004214:	3844      	subs	r0, #68	; 0x44
 8004216:	4770      	bx	lr
 8004218:	080041b5 	.word	0x080041b5
 800421c:	00000000 	.word	0x00000000

08004220 <SVC_Handler>:
	__asm volatile (
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <pxCurrentTCBConst2>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	6808      	ldr	r0, [r1, #0]
 8004226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	f380 8809 	msr	PSP, r0
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8811 	msr	BASEPRI, r0
 800423a:	4770      	bx	lr
 800423c:	f3af 8000 	nop.w

08004240 <pxCurrentTCBConst2>:
 8004240:	20000bd0 	.word	0x20000bd0

08004244 <vPortEnterCritical>:
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004254:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <vPortEnterCritical+0x40>)
 8004256:	6813      	ldr	r3, [r2, #0]
 8004258:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800425a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800425c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800425e:	d000      	beq.n	8004262 <vPortEnterCritical+0x1e>
}
 8004260:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004262:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004266:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f7      	beq.n	8004260 <vPortEnterCritical+0x1c>
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	e7fe      	b.n	8004280 <vPortEnterCritical+0x3c>
 8004282:	bf00      	nop
 8004284:	20000008 	.word	0x20000008

08004288 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004288:	4a08      	ldr	r2, [pc, #32]	; (80042ac <vPortExitCritical+0x24>)
 800428a:	6813      	ldr	r3, [r2, #0]
 800428c:	b943      	cbnz	r3, 80042a0 <vPortExitCritical+0x18>
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	e7fe      	b.n	800429e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80042a0:	3b01      	subs	r3, #1
 80042a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042a4:	b90b      	cbnz	r3, 80042aa <vPortExitCritical+0x22>
	__asm volatile
 80042a6:	f383 8811 	msr	BASEPRI, r3
}
 80042aa:	4770      	bx	lr
 80042ac:	20000008 	.word	0x20000008

080042b0 <PendSV_Handler>:
	__asm volatile
 80042b0:	f3ef 8009 	mrs	r0, PSP
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <pxCurrentTCBConst>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	f01e 0f10 	tst.w	lr, #16
 80042c0:	bf08      	it	eq
 80042c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ca:	6010      	str	r0, [r2, #0]
 80042cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042d4:	f380 8811 	msr	BASEPRI, r0
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f7ff fae4 	bl	80038ac <vTaskSwitchContext>
 80042e4:	f04f 0000 	mov.w	r0, #0
 80042e8:	f380 8811 	msr	BASEPRI, r0
 80042ec:	bc09      	pop	{r0, r3}
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	6808      	ldr	r0, [r1, #0]
 80042f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f6:	f01e 0f10 	tst.w	lr, #16
 80042fa:	bf08      	it	eq
 80042fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004300:	f380 8809 	msr	PSP, r0
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	f3af 8000 	nop.w

08004310 <pxCurrentTCBConst>:
 8004310:	20000bd0 	.word	0x20000bd0

08004314 <xPortSysTickHandler>:
{
 8004314:	b508      	push	{r3, lr}
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004326:	f7ff f90d 	bl	8003544 <xTaskIncrementTick>
 800432a:	b128      	cbz	r0, 8004338 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800432c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004334:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8004338:	2300      	movs	r3, #0
 800433a:	f383 8811 	msr	BASEPRI, r3
}
 800433e:	bd08      	pop	{r3, pc}

08004340 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004340:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004344:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004346:	4906      	ldr	r1, [pc, #24]	; (8004360 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004348:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800434a:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800434c:	680b      	ldr	r3, [r1, #0]
 800434e:	4805      	ldr	r0, [pc, #20]	; (8004364 <vPortSetupTimerInterrupt+0x24>)
 8004350:	fba0 0303 	umull	r0, r3, r0, r3
 8004354:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004356:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004358:	3b01      	subs	r3, #1
 800435a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800435c:	6111      	str	r1, [r2, #16]
}
 800435e:	4770      	bx	lr
 8004360:	20000000 	.word	0x20000000
 8004364:	10624dd3 	.word	0x10624dd3

08004368 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004368:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800436c:	4a48      	ldr	r2, [pc, #288]	; (8004490 <xPortStartScheduler+0x128>)
 800436e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8004372:	4291      	cmp	r1, r2
 8004374:	d041      	beq.n	80043fa <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004376:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800437a:	4b46      	ldr	r3, [pc, #280]	; (8004494 <xPortStartScheduler+0x12c>)
 800437c:	429a      	cmp	r2, r3
 800437e:	d033      	beq.n	80043e8 <xPortStartScheduler+0x80>
{
 8004380:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004382:	4b45      	ldr	r3, [pc, #276]	; (8004498 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004384:	4c45      	ldr	r4, [pc, #276]	; (800449c <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004386:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004388:	4845      	ldr	r0, [pc, #276]	; (80044a0 <xPortStartScheduler+0x138>)
{
 800438a:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800438c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004392:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800439c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043a8:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043aa:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043ac:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043ae:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043b0:	bf48      	it	mi
 80043b2:	2206      	movmi	r2, #6
 80043b4:	d50f      	bpl.n	80043d6 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80043c6:	061b      	lsls	r3, r3, #24
 80043c8:	4611      	mov	r1, r2
 80043ca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80043ce:	d4f2      	bmi.n	80043b6 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043d0:	2903      	cmp	r1, #3
 80043d2:	d01b      	beq.n	800440c <xPortStartScheduler+0xa4>
 80043d4:	6001      	str	r1, [r0, #0]
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	e7fe      	b.n	80043e6 <xPortStartScheduler+0x7e>
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043f8:	e7fe      	b.n	80043f8 <xPortStartScheduler+0x90>
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800440a:	e7fe      	b.n	800440a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800440c:	9b02      	ldr	r3, [sp, #8]
 800440e:	4a22      	ldr	r2, [pc, #136]	; (8004498 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8004410:	4d24      	ldr	r5, [pc, #144]	; (80044a4 <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004412:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004416:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800441a:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800441c:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800441e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004420:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8004424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004428:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800442c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8004430:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004434:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8004438:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 800443a:	f7ff ff81 	bl	8004340 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800443e:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8004440:	f7ff feae 	bl	80041a0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004444:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8004448:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800444c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8004450:	f7ff fe92 	bl	8004178 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004454:	f7ff fa2a 	bl	80038ac <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8004458:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 800445a:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800445c:	3301      	adds	r3, #1
 800445e:	d008      	beq.n	8004472 <xPortStartScheduler+0x10a>
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	e7fe      	b.n	8004470 <xPortStartScheduler+0x108>
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004482:	9b03      	ldr	r3, [sp, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0fc      	beq.n	8004482 <xPortStartScheduler+0x11a>
}
 8004488:	2000      	movs	r0, #0
 800448a:	b004      	add	sp, #16
 800448c:	bd70      	pop	{r4, r5, r6, pc}
 800448e:	bf00      	nop
 8004490:	410fc271 	.word	0x410fc271
 8004494:	410fc270 	.word	0x410fc270
 8004498:	e000e400 	.word	0xe000e400
 800449c:	200011f8 	.word	0x200011f8
 80044a0:	200011fc 	.word	0x200011fc
 80044a4:	20000008 	.word	0x20000008

080044a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044ac:	2b0f      	cmp	r3, #15
 80044ae:	d90e      	bls.n	80044ce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044b0:	4911      	ldr	r1, [pc, #68]	; (80044f8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044b2:	4a12      	ldr	r2, [pc, #72]	; (80044fc <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044b4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044b6:	7812      	ldrb	r2, [r2, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d908      	bls.n	80044ce <vPortValidateInterruptPriority+0x26>
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	e7fe      	b.n	80044cc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80044d2:	4a0b      	ldr	r2, [pc, #44]	; (8004500 <vPortValidateInterruptPriority+0x58>)
 80044d4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044de:	4293      	cmp	r3, r2
 80044e0:	d908      	bls.n	80044f4 <vPortValidateInterruptPriority+0x4c>
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	e7fe      	b.n	80044f2 <vPortValidateInterruptPriority+0x4a>
	}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	e000e3f0 	.word	0xe000e3f0
 80044fc:	200011f8 	.word	0x200011f8
 8004500:	200011fc 	.word	0x200011fc

08004504 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004508:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800450a:	f7ff f80d 	bl	8003528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800450e:	4b53      	ldr	r3, [pc, #332]	; (800465c <pvPortMalloc+0x158>)
 8004510:	681d      	ldr	r5, [r3, #0]
 8004512:	2d00      	cmp	r5, #0
 8004514:	d070      	beq.n	80045f8 <pvPortMalloc+0xf4>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004516:	4b52      	ldr	r3, [pc, #328]	; (8004660 <pvPortMalloc+0x15c>)
 8004518:	681f      	ldr	r7, [r3, #0]
 800451a:	423e      	tst	r6, r7
 800451c:	d12e      	bne.n	800457c <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800451e:	b36e      	cbz	r6, 800457c <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 8004520:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004524:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004526:	bf1c      	itt	ne
 8004528:	f024 0407 	bicne.w	r4, r4, #7
 800452c:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800452e:	b32c      	cbz	r4, 800457c <pvPortMalloc+0x78>
 8004530:	f8df c140 	ldr.w	ip, [pc, #320]	; 8004674 <pvPortMalloc+0x170>
 8004534:	f8dc 6000 	ldr.w	r6, [ip]
 8004538:	42a6      	cmp	r6, r4
 800453a:	d31f      	bcc.n	800457c <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800453c:	4849      	ldr	r0, [pc, #292]	; (8004664 <pvPortMalloc+0x160>)
 800453e:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004540:	e003      	b.n	800454a <pvPortMalloc+0x46>
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	b122      	cbz	r2, 8004550 <pvPortMalloc+0x4c>
 8004546:	4618      	mov	r0, r3
 8004548:	4613      	mov	r3, r2
 800454a:	6859      	ldr	r1, [r3, #4]
 800454c:	42a1      	cmp	r1, r4
 800454e:	d3f8      	bcc.n	8004542 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004550:	42ab      	cmp	r3, r5
 8004552:	d013      	beq.n	800457c <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004554:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004556:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004558:	f858 eb08 	ldr.w	lr, [r8], #8
 800455c:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004560:	2a10      	cmp	r2, #16
 8004562:	d92b      	bls.n	80045bc <pvPortMalloc+0xb8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004564:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004566:	0748      	lsls	r0, r1, #29
 8004568:	d011      	beq.n	800458e <pvPortMalloc+0x8a>
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	e7fe      	b.n	800457a <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800457c:	f7ff f930 	bl	80037e0 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004580:	f04f 0800 	mov.w	r8, #0
 8004584:	f004 ff24 	bl	80093d0 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8004588:	4640      	mov	r0, r8
 800458a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800458e:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004590:	4a34      	ldr	r2, [pc, #208]	; (8004664 <pvPortMalloc+0x160>)
						pxBlock->xBlockSize = xWantedSize;
 8004592:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004594:	4614      	mov	r4, r2
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	4291      	cmp	r1, r2
 800459a:	d8fb      	bhi.n	8004594 <pvPortMalloc+0x90>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800459c:	6860      	ldr	r0, [r4, #4]
 800459e:	eb04 0e00 	add.w	lr, r4, r0
 80045a2:	4571      	cmp	r1, lr
 80045a4:	d04a      	beq.n	800463c <pvPortMalloc+0x138>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045a6:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80045aa:	eb01 000e 	add.w	r0, r1, lr
 80045ae:	4282      	cmp	r2, r0
 80045b0:	d04b      	beq.n	800464a <pvPortMalloc+0x146>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045b2:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045b4:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045b6:	bf18      	it	ne
 80045b8:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045ba:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045bc:	482a      	ldr	r0, [pc, #168]	; (8004668 <pvPortMalloc+0x164>)
					xNumberOfSuccessfulAllocations++;
 80045be:	4a2b      	ldr	r2, [pc, #172]	; (800466c <pvPortMalloc+0x168>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045c0:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c2:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045c4:	42a6      	cmp	r6, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045c6:	bf38      	it	cc
 80045c8:	6006      	strcc	r6, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ca:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 80045cc:	2000      	movs	r0, #0
 80045ce:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 80045d2:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045d4:	f8cc 6000 	str.w	r6, [ip]
					xNumberOfSuccessfulAllocations++;
 80045d8:	3301      	adds	r3, #1
 80045da:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80045dc:	f7ff f900 	bl	80037e0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e0:	f018 0f07 	tst.w	r8, #7
 80045e4:	d0d0      	beq.n	8004588 <pvPortMalloc+0x84>
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	e7fe      	b.n	80045f6 <pvPortMalloc+0xf2>
	uxAddress = ( size_t ) ucHeap;
 80045f8:	491d      	ldr	r1, [pc, #116]	; (8004670 <pvPortMalloc+0x16c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045fa:	4c19      	ldr	r4, [pc, #100]	; (8004660 <pvPortMalloc+0x15c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045fc:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045fe:	bf14      	ite	ne
 8004600:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004602:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004604:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
	uxAddress -= xHeapStructSize;
 8004608:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800460c:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004610:	bf18      	it	ne
 8004612:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004616:	4914      	ldr	r1, [pc, #80]	; (8004668 <pvPortMalloc+0x164>)
	pxEnd = ( void * ) uxAddress;
 8004618:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800461a:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800461c:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800461e:	4a15      	ldr	r2, [pc, #84]	; (8004674 <pvPortMalloc+0x170>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004620:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004622:	4910      	ldr	r1, [pc, #64]	; (8004664 <pvPortMalloc+0x160>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004624:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004626:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 800462a:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800462c:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800462e:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004630:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8004632:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004636:	e9c0 5300 	strd	r5, r3, [r0]
}
 800463a:	e76e      	b.n	800451a <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800463c:	6849      	ldr	r1, [r1, #4]
 800463e:	eb00 0e01 	add.w	lr, r0, r1
 8004642:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 8004646:	4621      	mov	r1, r4
 8004648:	e7af      	b.n	80045aa <pvPortMalloc+0xa6>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800464a:	42aa      	cmp	r2, r5
 800464c:	d0b1      	beq.n	80045b2 <pvPortMalloc+0xae>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800464e:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004654:	4470      	add	r0, lr
 8004656:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004658:	e7ac      	b.n	80045b4 <pvPortMalloc+0xb0>
 800465a:	bf00      	nop
 800465c:	20001200 	.word	0x20001200
 8004660:	2000b204 	.word	0x2000b204
 8004664:	2000b218 	.word	0x2000b218
 8004668:	2000b20c 	.word	0x2000b20c
 800466c:	2000b210 	.word	0x2000b210
 8004670:	20001204 	.word	0x20001204
 8004674:	2000b208 	.word	0x2000b208

08004678 <vPortFree>:
	if( pv != NULL )
 8004678:	b1d0      	cbz	r0, 80046b0 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800467a:	4a2b      	ldr	r2, [pc, #172]	; (8004728 <vPortFree+0xb0>)
 800467c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	4213      	tst	r3, r2
 8004684:	d00b      	beq.n	800469e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004686:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800468a:	b191      	cbz	r1, 80046b2 <vPortFree+0x3a>
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	e7fe      	b.n	800469c <vPortFree+0x24>
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046ae:	e7fe      	b.n	80046ae <vPortFree+0x36>
 80046b0:	4770      	bx	lr
{
 80046b2:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046b4:	ea23 0302 	bic.w	r3, r3, r2
{
 80046b8:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046ba:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046be:	4c1b      	ldr	r4, [pc, #108]	; (800472c <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046c0:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80046c2:	f7fe ff31 	bl	8003528 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046c6:	9801      	ldr	r0, [sp, #4]
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046ce:	4b18      	ldr	r3, [pc, #96]	; (8004730 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046d0:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 80046d2:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046d4:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046d6:	461a      	mov	r2, r3
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4298      	cmp	r0, r3
 80046dc:	d8fb      	bhi.n	80046d6 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046de:	6854      	ldr	r4, [r2, #4]
 80046e0:	eb02 0e04 	add.w	lr, r2, r4
 80046e4:	4570      	cmp	r0, lr
 80046e6:	d01a      	beq.n	800471e <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046e8:	eb00 0c01 	add.w	ip, r0, r1
 80046ec:	4563      	cmp	r3, ip
 80046ee:	d00c      	beq.n	800470a <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046f0:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80046f2:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046f4:	bf18      	it	ne
 80046f6:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 80046f8:	4a0e      	ldr	r2, [pc, #56]	; (8004734 <vPortFree+0xbc>)
 80046fa:	6813      	ldr	r3, [r2, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	6013      	str	r3, [r2, #0]
}
 8004700:	b002      	add	sp, #8
 8004702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004706:	f7ff b86b 	b.w	80037e0 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800470a:	4c0b      	ldr	r4, [pc, #44]	; (8004738 <vPortFree+0xc0>)
 800470c:	6824      	ldr	r4, [r4, #0]
 800470e:	42a3      	cmp	r3, r4
 8004710:	d0ee      	beq.n	80046f0 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004712:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004716:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004718:	e9c0 3100 	strd	r3, r1, [r0]
 800471c:	e7e9      	b.n	80046f2 <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800471e:	4421      	add	r1, r4
 8004720:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8004722:	4610      	mov	r0, r2
 8004724:	e7e0      	b.n	80046e8 <vPortFree+0x70>
 8004726:	bf00      	nop
 8004728:	2000b204 	.word	0x2000b204
 800472c:	2000b208 	.word	0x2000b208
 8004730:	2000b218 	.word	0x2000b218
 8004734:	2000b214 	.word	0x2000b214
 8004738:	20001200 	.word	0x20001200

0800473c <cal_crc16>:
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
    uint8_t crc_hi = 0xFF;
    uint8_t crc_lo = 0xFF;
    unsigned int i;

    while(length--) {
 800473c:	b199      	cbz	r1, 8004766 <cal_crc16+0x2a>
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
 800473e:	b430      	push	{r4, r5}
    uint8_t crc_lo = 0xFF;
 8004740:	22ff      	movs	r2, #255	; 0xff
 8004742:	4d0a      	ldr	r5, [pc, #40]	; (800476c <cal_crc16+0x30>)
 8004744:	4c0a      	ldr	r4, [pc, #40]	; (8004770 <cal_crc16+0x34>)
 8004746:	eb00 0c01 	add.w	ip, r0, r1
    uint8_t crc_hi = 0xFF;
 800474a:	4611      	mov	r1, r2
        i = crc_lo ^ *buffer++;
 800474c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004750:	4053      	eors	r3, r2
    while(length--) {
 8004752:	4560      	cmp	r0, ip
        crc_lo = crc_hi ^ table_crc_hi[i];
 8004754:	5cea      	ldrb	r2, [r5, r3]
 8004756:	ea82 0201 	eor.w	r2, r2, r1
        crc_hi = table_crc_lo[i];
 800475a:	5ce1      	ldrb	r1, [r4, r3]
    while(length--) {
 800475c:	d1f6      	bne.n	800474c <cal_crc16+0x10>
    }

    return (crc_hi << 8 | crc_lo);
 800475e:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
}
 8004762:	bc30      	pop	{r4, r5}
 8004764:	4770      	bx	lr
    while(length--) {
 8004766:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800476a:	4770      	bx	lr
 800476c:	0800ce50 	.word	0x0800ce50
 8004770:	0800cf50 	.word	0x0800cf50

08004774 <_ZL15set_response_okm12lora_event_t>:
		loraif->Receive(0);
		xSemaphoreGive(tranfer_smp);
	}
}

static void set_response_ok(uint32_t addr, lora_event_t cmd){
 8004774:	b510      	push	{r4, lr}
 8004776:	460a      	mov	r2, r1
 8004778:	b086      	sub	sp, #24
 800477a:	4603      	mov	r3, r0
	uint16_t crc = 0;
	char *temp;
	char *response_to_device;
	char *cmd_str = cmd_to_str(cmd, command_string);
 800477c:	4919      	ldr	r1, [pc, #100]	; (80047e4 <_ZL15set_response_okm12lora_event_t+0x70>)
static void set_response_ok(uint32_t addr, lora_event_t cmd){
 800477e:	9302      	str	r3, [sp, #8]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004780:	4610      	mov	r0, r2
 8004782:	f000 fdc9 	bl	8005318 <cmd_to_str>

	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, addr);
 8004786:	9b02      	ldr	r3, [sp, #8]
 8004788:	4917      	ldr	r1, [pc, #92]	; (80047e8 <_ZL15set_response_okm12lora_event_t+0x74>)
 800478a:	e9cd 0302 	strd	r0, r3, [sp, #8]
	char *cmd_str = cmd_to_str(cmd, command_string);
 800478e:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, addr);
 8004790:	a804      	add	r0, sp, #16
 8004792:	f005 fa55 	bl	8009c40 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8004796:	9c04      	ldr	r4, [sp, #16]
 8004798:	4620      	mov	r0, r4
 800479a:	f7fb fd33 	bl	8000204 <strlen>
 800479e:	b281      	uxth	r1, r0
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7ff ffcb 	bl	800473c <cal_crc16>
 80047a6:	4604      	mov	r4, r0
	free(temp);
 80047a8:	9804      	ldr	r0, [sp, #16]
 80047aa:	f005 fa99 	bl	8009ce0 <free>

	asprintf(&response_to_device, "%s: {\"addr\":0x%08x,\"state\":OK,\"crc\":0x%04x}", cmd_str, addr, crc);
 80047ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047b2:	490e      	ldr	r1, [pc, #56]	; (80047ec <_ZL15set_response_okm12lora_event_t+0x78>)
 80047b4:	9400      	str	r4, [sp, #0]
 80047b6:	a805      	add	r0, sp, #20
 80047b8:	f005 fa42 	bl	8009c40 <asiprintf>

	if(xQueueSend(response_queue, &response_to_device, 2) == pdFALSE){
 80047bc:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <_ZL15set_response_okm12lora_event_t+0x7c>)
 80047be:	2300      	movs	r3, #0
 80047c0:	6810      	ldr	r0, [r2, #0]
 80047c2:	a905      	add	r1, sp, #20
 80047c4:	2202      	movs	r2, #2
 80047c6:	f7fd fd5b 	bl	8002280 <xQueueGenericSend>
 80047ca:	b108      	cbz	r0, 80047d0 <_ZL15set_response_okm12lora_event_t+0x5c>
		loraif_debug((char *)"Can't send to response queue", __LINE__, __FUNCTION__);
	}
}
 80047cc:	b006      	add	sp, #24
 80047ce:	bd10      	pop	{r4, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047d0:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <_ZL15set_response_okm12lora_event_t+0x80>)
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <_ZL15set_response_okm12lora_event_t+0x84>)
 80047d6:	4909      	ldr	r1, [pc, #36]	; (80047fc <_ZL15set_response_okm12lora_event_t+0x88>)
 80047d8:	4809      	ldr	r0, [pc, #36]	; (8004800 <_ZL15set_response_okm12lora_event_t+0x8c>)
 80047da:	23a4      	movs	r3, #164	; 0xa4
 80047dc:	f004 fec4 	bl	8009568 <LOG_DEBUG>
}
 80047e0:	b006      	add	sp, #24
 80047e2:	bd10      	pop	{r4, pc}
 80047e4:	2000000c 	.word	0x2000000c
 80047e8:	0800d050 	.word	0x0800d050
 80047ec:	0800d070 	.word	0x0800d070
 80047f0:	2000b24c 	.word	0x2000b24c
 80047f4:	0800d0e0 	.word	0x0800d0e0
 80047f8:	0800d09c 	.word	0x0800d09c
 80047fc:	0800d0bc 	.word	0x0800d0bc
 8004800:	0800d0d8 	.word	0x0800d0d8
 8004804:	00000000 	.word	0x00000000

08004808 <loraif_init>:
void loraif_init(sx127x *lora, tim_t tim, uint32_t timeout, uint8_t max_not_response){
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	461d      	mov	r5, r3
	loraif = lora;
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <loraif_init+0x70>)
	tim_config_t conf = {
 800480e:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8004870 <loraif_init+0x68>
void loraif_init(sx127x *lora, tim_t tim, uint32_t timeout, uint8_t max_not_response){
 8004812:	b08c      	sub	sp, #48	; 0x30
	loraif = lora;
 8004814:	6018      	str	r0, [r3, #0]
	timer = tim;
 8004816:	4b19      	ldr	r3, [pc, #100]	; (800487c <loraif_init+0x74>)
	tim_config_t conf = {
 8004818:	2400      	movs	r4, #0
void loraif_init(sx127x *lora, tim_t tim, uint32_t timeout, uint8_t max_not_response){
 800481a:	4616      	mov	r6, r2
	timer->init(&conf);
 800481c:	4668      	mov	r0, sp
 800481e:	aa02      	add	r2, sp, #8
	tim_config_t conf = {
 8004820:	ed8d 7b02 	vstr	d7, [sp, #8]
	timer = tim;
 8004824:	6019      	str	r1, [r3, #0]
	tim_config_t conf = {
 8004826:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800482a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800482e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8004832:	940a      	str	r4, [sp, #40]	; 0x28
	timer->init(&conf);
 8004834:	f003 fd8c 	bl	8008350 <_ZN3tim4initEP12tim_config_t>
	resp_timeout = timeout;
 8004838:	4a11      	ldr	r2, [pc, #68]	; (8004880 <loraif_init+0x78>)
	max_not_resp = max_not_response;
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <loraif_init+0x7c>)
	resp_timeout = timeout;
 800483c:	6016      	str	r6, [r2, #0]
	response_queue = xQueueCreate(5, sizeof(uint32_t));
 800483e:	2104      	movs	r1, #4
 8004840:	4622      	mov	r2, r4
 8004842:	2005      	movs	r0, #5
	max_not_resp = max_not_response;
 8004844:	701d      	strb	r5, [r3, #0]
	response_queue = xQueueCreate(5, sizeof(uint32_t));
 8004846:	f7fd fcd9 	bl	80021fc <xQueueGenericCreate>
 800484a:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <loraif_init+0x80>)
	tranfer_smp = xSemaphoreCreateBinary();
 800484c:	4621      	mov	r1, r4
	response_queue = xQueueCreate(5, sizeof(uint32_t));
 800484e:	6018      	str	r0, [r3, #0]
	tranfer_smp = xSemaphoreCreateBinary();
 8004850:	2203      	movs	r2, #3
 8004852:	2001      	movs	r0, #1
 8004854:	f7fd fcd2 	bl	80021fc <xQueueGenericCreate>
 8004858:	4a0c      	ldr	r2, [pc, #48]	; (800488c <loraif_init+0x84>)
	xSemaphoreGive(tranfer_smp);
 800485a:	4623      	mov	r3, r4
	tranfer_smp = xSemaphoreCreateBinary();
 800485c:	6010      	str	r0, [r2, #0]
	xSemaphoreGive(tranfer_smp);
 800485e:	4621      	mov	r1, r4
 8004860:	4622      	mov	r2, r4
 8004862:	f7fd fd0d 	bl	8002280 <xQueueGenericSend>
}
 8004866:	b00c      	add	sp, #48	; 0x30
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	bf00      	nop
 800486c:	f3af 8000 	nop.w
 8004870:	0000a8c0 	.word	0x0000a8c0
 8004874:	0000ffff 	.word	0x0000ffff
 8004878:	2000b240 	.word	0x2000b240
 800487c:	2000b250 	.word	0x2000b250
 8004880:	2000b248 	.word	0x2000b248
 8004884:	2000b244 	.word	0x2000b244
 8004888:	2000b24c 	.word	0x2000b24c
 800488c:	2000b254 	.word	0x2000b254

08004890 <loraif_register_event_handler>:
	fpeventhandler = peventhandler;
 8004890:	4b01      	ldr	r3, [pc, #4]	; (8004898 <loraif_register_event_handler+0x8>)
 8004892:	6018      	str	r0, [r3, #0]
}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	2000b238 	.word	0x2000b238

0800489c <loraif_check_crc>:
bool loraif_check_crc(char *data){
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	b086      	sub	sp, #24
	pkt_json_t json;
 80048a0:	2300      	movs	r3, #0
	pkt_t pkt;
 80048a2:	2500      	movs	r5, #0
 80048a4:	2400      	movs	r4, #0
	crc_start = strstr(src_cpy, "\"crc\"");
 80048a6:	4919      	ldr	r1, [pc, #100]	; (800490c <loraif_check_crc+0x70>)
	pkt_json_t json;
 80048a8:	9303      	str	r3, [sp, #12]
	pkt_t pkt;
 80048aa:	e9cd 4500 	strd	r4, r5, [sp]
	pkt_json_t json;
 80048ae:	f88d 3010 	strb.w	r3, [sp, #16]
bool loraif_check_crc(char *data){
 80048b2:	4605      	mov	r5, r0
	pkt_json_t json;
 80048b4:	9305      	str	r3, [sp, #20]
	crc_start = strstr(src_cpy, "\"crc\"");
 80048b6:	f006 f999 	bl	800abec <strstr>
	if(crc_start == NULL) return false;
 80048ba:	b128      	cbz	r0, 80048c8 <loraif_check_crc+0x2c>
	err = parse_packet(src_cpy, &pkt);
 80048bc:	4604      	mov	r4, r0
 80048be:	4669      	mov	r1, sp
 80048c0:	4628      	mov	r0, r5
 80048c2:	f000 fcad 	bl	8005220 <parse_packet>
	if(err != PKT_ERR_OK) return false;
 80048c6:	b110      	cbz	r0, 80048ce <loraif_check_crc+0x32>
	if(crc_start == NULL) return false;
 80048c8:	2000      	movs	r0, #0
}
 80048ca:	b006      	add	sp, #24
 80048cc:	bd70      	pop	{r4, r5, r6, pc}
	err = json_get_object(pkt.data_str, &json, (char *)"crc");
 80048ce:	4a10      	ldr	r2, [pc, #64]	; (8004910 <loraif_check_crc+0x74>)
 80048d0:	9801      	ldr	r0, [sp, #4]
 80048d2:	a903      	add	r1, sp, #12
 80048d4:	f000 fb7e 	bl	8004fd4 <json_get_object>
	if(err != PKT_ERR_OK) return false;
 80048d8:	2800      	cmp	r0, #0
 80048da:	d1f5      	bne.n	80048c8 <loraif_check_crc+0x2c>
	icrc = strtol(json.value, NULL, 16);
 80048dc:	4601      	mov	r1, r0
 80048de:	2210      	movs	r2, #16
 80048e0:	9805      	ldr	r0, [sp, #20]
 80048e2:	f006 fa1b 	bl	800ad1c <strtol>
 80048e6:	4606      	mov	r6, r0
	json_release_object(&json);
 80048e8:	a803      	add	r0, sp, #12
 80048ea:	f000 fc8b 	bl	8005204 <json_release_object>
	release_packet(&pkt);
 80048ee:	4668      	mov	r0, sp
 80048f0:	f000 fcf0 	bl	80052d4 <release_packet>
	len = (uint32_t)crc_start - (uint32_t)src_cpy;
 80048f4:	1b61      	subs	r1, r4, r5
	crc = cal_crc16((uint8_t *)src_cpy, len);
 80048f6:	b289      	uxth	r1, r1
 80048f8:	4628      	mov	r0, r5
 80048fa:	f7ff ff1f 	bl	800473c <cal_crc16>
	if(crc != icrc) return false;
 80048fe:	b2b6      	uxth	r6, r6
 8004900:	1a30      	subs	r0, r6, r0
 8004902:	fab0 f080 	clz	r0, r0
 8004906:	0940      	lsrs	r0, r0, #5
}
 8004908:	b006      	add	sp, #24
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	0800d0f0 	.word	0x0800d0f0
 8004910:	0800d0f8 	.word	0x0800d0f8

08004914 <loraif_response>:
		release_packet(&pkt);
	}
}


void loraif_response(void){
 8004914:	b570      	push	{r4, r5, r6, lr}
	char *response;

	if(xQueueReceive(response_queue, &response, 10)){
 8004916:	4b19      	ldr	r3, [pc, #100]	; (800497c <loraif_response+0x68>)
void loraif_response(void){
 8004918:	b082      	sub	sp, #8
	if(xQueueReceive(response_queue, &response, 10)){
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	220a      	movs	r2, #10
 800491e:	a901      	add	r1, sp, #4
 8004920:	f7fd ff22 	bl	8002768 <xQueueReceive>
 8004924:	b908      	cbnz	r0, 800492a <loraif_response+0x16>
		loraif_transmit(response);
		free(response);
	}
}
 8004926:	b002      	add	sp, #8
 8004928:	bd70      	pop	{r4, r5, r6, pc}
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 800492a:	4c15      	ldr	r4, [pc, #84]	; (8004980 <loraif_response+0x6c>)
		loraif_transmit(response);
 800492c:	9d01      	ldr	r5, [sp, #4]
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004934:	f7fe f89a 	bl	8002a6c <xQueueSemaphoreTake>
 8004938:	b920      	cbnz	r0, 8004944 <loraif_response+0x30>
		free(response);
 800493a:	9801      	ldr	r0, [sp, #4]
 800493c:	f005 f9d0 	bl	8009ce0 <free>
}
 8004940:	b002      	add	sp, #8
 8004942:	bd70      	pop	{r4, r5, r6, pc}
		loraif->beginPacket();
 8004944:	4e0f      	ldr	r6, [pc, #60]	; (8004984 <loraif_response+0x70>)
 8004946:	2100      	movs	r1, #0
 8004948:	6830      	ldr	r0, [r6, #0]
 800494a:	f000 ff91 	bl	8005870 <_ZN6sx127x11beginPacketEb>
		loraif->transmit((uint8_t *)str, (size_t)strlen(str));
 800494e:	4628      	mov	r0, r5
 8004950:	f7fb fc58 	bl	8000204 <strlen>
 8004954:	4629      	mov	r1, r5
 8004956:	4602      	mov	r2, r0
 8004958:	6830      	ldr	r0, [r6, #0]
 800495a:	f001 f9eb 	bl	8005d34 <_ZN6sx127x8transmitEPKhj>
		loraif->endPacket();
 800495e:	6830      	ldr	r0, [r6, #0]
 8004960:	2100      	movs	r1, #0
 8004962:	f001 f8c5 	bl	8005af0 <_ZN6sx127x9endPacketEb>
		loraif->Receive(0);
 8004966:	6830      	ldr	r0, [r6, #0]
 8004968:	2100      	movs	r1, #0
 800496a:	f001 fab7 	bl	8005edc <_ZN6sx127x7ReceiveEh>
		xSemaphoreGive(tranfer_smp);
 800496e:	2300      	movs	r3, #0
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	4619      	mov	r1, r3
 8004976:	f7fd fc83 	bl	8002280 <xQueueGenericSend>
}
 800497a:	e7de      	b.n	800493a <loraif_response+0x26>
 800497c:	2000b24c 	.word	0x2000b24c
 8004980:	2000b254 	.word	0x2000b254
 8004984:	2000b240 	.word	0x2000b240

08004988 <loraif_request>:
		vTaskDelay(1);
	}
}


void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data){
 8004988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498c:	460d      	mov	r5, r1
 800498e:	b088      	sub	sp, #32
 8004990:	4604      	mov	r4, r0
	uint16_t crc = 0;
	char *req_data, *temp;
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004992:	492d      	ldr	r1, [pc, #180]	; (8004a48 <loraif_request+0xc0>)
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004994:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a68 <loraif_request+0xe0>
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004998:	4628      	mov	r0, r5
void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data){
 800499a:	4616      	mov	r6, r2
	char *cmd_str = cmd_to_str(cmd, command_string);
 800499c:	f000 fcbc 	bl	8005318 <cmd_to_str>
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,", cmd_str, dev_address, data);
 80049a0:	4623      	mov	r3, r4
	char *cmd_str = cmd_to_str(cmd, command_string);
 80049a2:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,", cmd_str, dev_address, data);
 80049a4:	4929      	ldr	r1, [pc, #164]	; (8004a4c <loraif_request+0xc4>)
 80049a6:	9003      	str	r0, [sp, #12]
 80049a8:	9600      	str	r6, [sp, #0]
 80049aa:	a805      	add	r0, sp, #20
 80049ac:	f005 f948 	bl	8009c40 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 80049b0:	9f05      	ldr	r7, [sp, #20]
 80049b2:	4638      	mov	r0, r7
 80049b4:	f7fb fc26 	bl	8000204 <strlen>
 80049b8:	b281      	uxth	r1, r0
 80049ba:	4638      	mov	r0, r7
 80049bc:	f7ff febe 	bl	800473c <cal_crc16>
 80049c0:	4607      	mov	r7, r0
	free(temp);
 80049c2:	9805      	ldr	r0, [sp, #20]
 80049c4:	f005 f98c 	bl	8009ce0 <free>

	asprintf(&req_data, "%s: {\"addr\":0x%08x,\"data\":%s,\"crc\":0x%04x}", cmd_str, dev_address, data, crc);
 80049c8:	4623      	mov	r3, r4
 80049ca:	9a03      	ldr	r2, [sp, #12]
 80049cc:	4920      	ldr	r1, [pc, #128]	; (8004a50 <loraif_request+0xc8>)
 80049ce:	9701      	str	r7, [sp, #4]
 80049d0:	9600      	str	r6, [sp, #0]
 80049d2:	a804      	add	r0, sp, #16
 80049d4:	f005 f934 	bl	8009c40 <asiprintf>

	req_address = dev_address;
 80049d8:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <loraif_request+0xcc>)
	req_cmd = cmd;
 80049da:	4a1f      	ldr	r2, [pc, #124]	; (8004a58 <loraif_request+0xd0>)
	req_address = dev_address;
 80049dc:	601c      	str	r4, [r3, #0]
	req_had_resp = false;
 80049de:	4b1f      	ldr	r3, [pc, #124]	; (8004a5c <loraif_request+0xd4>)
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 80049e0:	f8d8 0000 	ldr.w	r0, [r8]
	req_cmd = cmd;
 80049e4:	7015      	strb	r5, [r2, #0]
	req_had_resp = false;
 80049e6:	2400      	movs	r4, #0
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 80049e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	loraif_transmit(req_data);
 80049ec:	9d04      	ldr	r5, [sp, #16]
	req_had_resp = false;
 80049ee:	701c      	strb	r4, [r3, #0]
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 80049f0:	f7fe f83c 	bl	8002a6c <xQueueSemaphoreTake>
 80049f4:	b950      	cbnz	r0, 8004a0c <loraif_request+0x84>
	timer->start();
 80049f6:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <loraif_request+0xd8>)
 80049f8:	a806      	add	r0, sp, #24
 80049fa:	6819      	ldr	r1, [r3, #0]
 80049fc:	f003 fdca 	bl	8008594 <_ZN3tim5startEv>

	free(req_data);
 8004a00:	9804      	ldr	r0, [sp, #16]
 8004a02:	f005 f96d 	bl	8009ce0 <free>
}
 8004a06:	b008      	add	sp, #32
 8004a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loraif->beginPacket();
 8004a0c:	4e15      	ldr	r6, [pc, #84]	; (8004a64 <loraif_request+0xdc>)
 8004a0e:	4621      	mov	r1, r4
 8004a10:	6830      	ldr	r0, [r6, #0]
 8004a12:	f000 ff2d 	bl	8005870 <_ZN6sx127x11beginPacketEb>
		loraif->transmit((uint8_t *)str, (size_t)strlen(str));
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7fb fbf4 	bl	8000204 <strlen>
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4602      	mov	r2, r0
 8004a20:	6830      	ldr	r0, [r6, #0]
 8004a22:	f001 f987 	bl	8005d34 <_ZN6sx127x8transmitEPKhj>
		loraif->endPacket();
 8004a26:	4621      	mov	r1, r4
 8004a28:	6830      	ldr	r0, [r6, #0]
 8004a2a:	f001 f861 	bl	8005af0 <_ZN6sx127x9endPacketEb>
		loraif->Receive(0);
 8004a2e:	6830      	ldr	r0, [r6, #0]
 8004a30:	4621      	mov	r1, r4
 8004a32:	f001 fa53 	bl	8005edc <_ZN6sx127x7ReceiveEh>
		xSemaphoreGive(tranfer_smp);
 8004a36:	f8d8 0000 	ldr.w	r0, [r8]
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	4621      	mov	r1, r4
 8004a40:	f7fd fc1e 	bl	8002280 <xQueueGenericSend>
}
 8004a44:	e7d7      	b.n	80049f6 <loraif_request+0x6e>
 8004a46:	bf00      	nop
 8004a48:	2000000c 	.word	0x2000000c
 8004a4c:	0800d0fc 	.word	0x0800d0fc
 8004a50:	0800d11c 	.word	0x0800d11c
 8004a54:	2000b230 	.word	0x2000b230
 8004a58:	2000b23c 	.word	0x2000b23c
 8004a5c:	2000b234 	.word	0x2000b234
 8004a60:	2000b250 	.word	0x2000b250
 8004a64:	2000b240 	.word	0x2000b240
 8004a68:	2000b254 	.word	0x2000b254

08004a6c <loraif_new_device>:
        loraif_check_timeout();
    }
}


void loraif_new_device(char *jdata, void *dev_data){
 8004a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a6e:	b087      	sub	sp, #28
	pkt_err_t err;
	pkt_json_t json;
 8004a70:	2600      	movs	r6, #0
void loraif_new_device(char *jdata, void *dev_data){
 8004a72:	4605      	mov	r5, r0
	uint32_t addr;
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004a74:	2010      	movs	r0, #16
void loraif_new_device(char *jdata, void *dev_data){
 8004a76:	460f      	mov	r7, r1
	pkt_json_t json;
 8004a78:	9603      	str	r6, [sp, #12]
 8004a7a:	f88d 6010 	strb.w	r6, [sp, #16]
 8004a7e:	9605      	str	r6, [sp, #20]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004a80:	f005 f926 	bl	8009cd0 <malloc>

    newdev->err_count = 0;
    newdev->data = dev_data;

	err = json_get_object(jdata, &json, (char *)"addr");
 8004a84:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <loraif_new_device+0x9c>)
    newdev->err_count = 0;
 8004a86:	7206      	strb	r6, [r0, #8]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004a88:	4604      	mov	r4, r0
    newdev->data = dev_data;
 8004a8a:	60c7      	str	r7, [r0, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004a8c:	a903      	add	r1, sp, #12
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 faa0 	bl	8004fd4 <json_get_object>
	if(err == PKT_ERR_OK)
 8004a94:	b350      	cbz	r0, 8004aec <loraif_new_device+0x80>
		newdev->address = strtol(json.value, NULL, 16);
	json_release_object(&json);
 8004a96:	a803      	add	r0, sp, #12
 8004a98:	f000 fbb4 	bl	8005204 <json_release_object>

	err = json_get_object(jdata, &json, (char *)"name");
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	; (8004b0c <loraif_new_device+0xa0>)
 8004a9e:	a903      	add	r1, sp, #12
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 fa97 	bl	8004fd4 <json_get_object>
	if(err == PKT_ERR_OK)
 8004aa6:	b340      	cbz	r0, 8004afa <loraif_new_device+0x8e>
		asprintf(&newdev->name, "%s", json.value);
	json_release_object(&json);
 8004aa8:	a803      	add	r0, sp, #12
 8004aaa:	f000 fbab 	bl	8005204 <json_release_object>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004aae:	200c      	movs	r0, #12
 8004ab0:	f005 f854 	bl	8009b5c <_Znwj>
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 8004ab4:	4d16      	ldr	r5, [pc, #88]	; (8004b10 <loraif_new_device+0xa4>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004ab6:	6084      	str	r4, [r0, #8]
 8004ab8:	4629      	mov	r1, r5
 8004aba:	f005 f860 	bl	8009b7e <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004abe:	68a9      	ldr	r1, [r5, #8]
 8004ac0:	3101      	adds	r1, #1

	loraif_device_list.push_back(newdev);

	char *tmp;
	asprintf(&tmp, "Add device 0x%08x(%s)", newdev->address, newdev->name);
 8004ac2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ac6:	60a9      	str	r1, [r5, #8]
 8004ac8:	a802      	add	r0, sp, #8
 8004aca:	4912      	ldr	r1, [pc, #72]	; (8004b14 <loraif_new_device+0xa8>)
 8004acc:	f005 f8b8 	bl	8009c40 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <loraif_new_device+0xac>)
 8004ad2:	9a02      	ldr	r2, [sp, #8]
 8004ad4:	4911      	ldr	r1, [pc, #68]	; (8004b1c <loraif_new_device+0xb0>)
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4811      	ldr	r0, [pc, #68]	; (8004b20 <loraif_new_device+0xb4>)
 8004ada:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8004ade:	f004 fd43 	bl	8009568 <LOG_DEBUG>
	loraif_debug(tmp, __LINE__, __FUNCTION__);
	free(tmp);
 8004ae2:	9802      	ldr	r0, [sp, #8]
 8004ae4:	f005 f8fc 	bl	8009ce0 <free>
}
 8004ae8:	b007      	add	sp, #28
 8004aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		newdev->address = strtol(json.value, NULL, 16);
 8004aec:	4601      	mov	r1, r0
 8004aee:	2210      	movs	r2, #16
 8004af0:	9805      	ldr	r0, [sp, #20]
 8004af2:	f006 f913 	bl	800ad1c <strtol>
 8004af6:	6020      	str	r0, [r4, #0]
 8004af8:	e7cd      	b.n	8004a96 <loraif_new_device+0x2a>
		asprintf(&newdev->name, "%s", json.value);
 8004afa:	9a05      	ldr	r2, [sp, #20]
 8004afc:	4909      	ldr	r1, [pc, #36]	; (8004b24 <loraif_new_device+0xb8>)
 8004afe:	1d20      	adds	r0, r4, #4
 8004b00:	f005 f89e 	bl	8009c40 <asiprintf>
 8004b04:	e7d0      	b.n	8004aa8 <loraif_new_device+0x3c>
 8004b06:	bf00      	nop
 8004b08:	0800d148 	.word	0x0800d148
 8004b0c:	0800d150 	.word	0x0800d150
 8004b10:	2000b224 	.word	0x2000b224
 8004b14:	0800d158 	.word	0x0800d158
 8004b18:	0800d170 	.word	0x0800d170
 8004b1c:	0800d0bc 	.word	0x0800d0bc
 8004b20:	0800d0d8 	.word	0x0800d0d8
 8004b24:	0800d888 	.word	0x0800d888

08004b28 <loraif_remove_device>:

void loraif_remove_device(char *jdata){
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	b086      	sub	sp, #24
	pkt_err_t err;
	pkt_json_t json;
 8004b2c:	2300      	movs	r3, #0
	uint32_t del_addr;

	err = json_get_object(jdata, &json, (char *)"addr");
 8004b2e:	4a22      	ldr	r2, [pc, #136]	; (8004bb8 <loraif_remove_device+0x90>)
	pkt_json_t json;
 8004b30:	9303      	str	r3, [sp, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004b32:	a903      	add	r1, sp, #12
	pkt_json_t json;
 8004b34:	f88d 3010 	strb.w	r3, [sp, #16]
 8004b38:	9305      	str	r3, [sp, #20]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004b3a:	f000 fa4b 	bl	8004fd4 <json_get_object>
	if(err == PKT_ERR_OK)
 8004b3e:	b350      	cbz	r0, 8004b96 <loraif_remove_device+0x6e>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004b40:	4d1e      	ldr	r5, [pc, #120]	; (8004bbc <loraif_remove_device+0x94>)
		del_addr = strtol(json.value, NULL, 16);
	json_release_object(&json);
 8004b42:	a803      	add	r0, sp, #12
 8004b44:	f000 fb5e 	bl	8005204 <json_release_object>
 8004b48:	682c      	ldr	r4, [r5, #0]

    if (loraif_device_list.empty()) {
 8004b4a:	42ac      	cmp	r4, r5
 8004b4c:	d02a      	beq.n	8004ba4 <loraif_remove_device+0x7c>
        return;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == del_addr) {
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	42b2      	cmp	r2, r6
 8004b54:	d00d      	beq.n	8004b72 <loraif_remove_device+0x4a>
	_M_node = _M_node->_M_next;
 8004b56:	6824      	ldr	r4, [r4, #0]
    while (device != loraif_device_list.end()) {
 8004b58:	42ac      	cmp	r4, r5
 8004b5a:	d1f8      	bne.n	8004b4e <loraif_remove_device+0x26>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004b5c:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <loraif_remove_device+0x98>)
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <loraif_remove_device+0x9c>)
 8004b62:	4919      	ldr	r1, [pc, #100]	; (8004bc8 <loraif_remove_device+0xa0>)
 8004b64:	4819      	ldr	r0, [pc, #100]	; (8004bcc <loraif_remove_device+0xa4>)
 8004b66:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8004b6a:	f004 fcfd 	bl	8009568 <LOG_DEBUG>

    free((*device)->name);
    free(*device);

    loraif_device_list.erase(device);
}
 8004b6e:	b006      	add	sp, #24
 8004b70:	bd70      	pop	{r4, r5, r6, pc}
    free((*device)->name);
 8004b72:	6858      	ldr	r0, [r3, #4]
 8004b74:	f005 f8b4 	bl	8009ce0 <free>
    free(*device);
 8004b78:	68a0      	ldr	r0, [r4, #8]
 8004b7a:	f005 f8b1 	bl	8009ce0 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004b7e:	68ab      	ldr	r3, [r5, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8004b80:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004b82:	3b01      	subs	r3, #1
 8004b84:	60ab      	str	r3, [r5, #8]
	__position._M_node->_M_unhook();
 8004b86:	f005 f801 	bl	8009b8c <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 8004b8a:	210c      	movs	r1, #12
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f004 ffe3 	bl	8009b58 <_ZdlPvj>
}
 8004b92:	b006      	add	sp, #24
 8004b94:	bd70      	pop	{r4, r5, r6, pc}
		del_addr = strtol(json.value, NULL, 16);
 8004b96:	4601      	mov	r1, r0
 8004b98:	2210      	movs	r2, #16
 8004b9a:	9805      	ldr	r0, [sp, #20]
 8004b9c:	f006 f8be 	bl	800ad1c <strtol>
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	e7cd      	b.n	8004b40 <loraif_remove_device+0x18>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <loraif_remove_device+0x98>)
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <loraif_remove_device+0xa8>)
 8004baa:	4907      	ldr	r1, [pc, #28]	; (8004bc8 <loraif_remove_device+0xa0>)
 8004bac:	4807      	ldr	r0, [pc, #28]	; (8004bcc <loraif_remove_device+0xa4>)
 8004bae:	f240 1391 	movw	r3, #401	; 0x191
 8004bb2:	f004 fcd9 	bl	8009568 <LOG_DEBUG>
        return;
 8004bb6:	e7ec      	b.n	8004b92 <loraif_remove_device+0x6a>
 8004bb8:	0800d148 	.word	0x0800d148
 8004bbc:	2000b224 	.word	0x2000b224
 8004bc0:	0800d198 	.word	0x0800d198
 8004bc4:	0800d1b0 	.word	0x0800d1b0
 8004bc8:	0800d0bc 	.word	0x0800d0bc
 8004bcc:	0800d0d8 	.word	0x0800d0d8
 8004bd0:	0800d184 	.word	0x0800d184

08004bd4 <loraif_select_device>:

loraif_dev_t *loraif_select_device(char *jdata){
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	b086      	sub	sp, #24
	pkt_err_t err;
	pkt_json_t json;
 8004bd8:	2300      	movs	r3, #0
	uint32_t sel_addr;

	err = json_get_object(jdata, &json, (char *)"addr");
 8004bda:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <loraif_select_device+0x60>)
	pkt_json_t json;
 8004bdc:	9303      	str	r3, [sp, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004bde:	a903      	add	r1, sp, #12
	pkt_json_t json;
 8004be0:	f88d 3010 	strb.w	r3, [sp, #16]
 8004be4:	9305      	str	r3, [sp, #20]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004be6:	f000 f9f5 	bl	8004fd4 <json_get_object>
	if(err == PKT_ERR_OK)
 8004bea:	b180      	cbz	r0, 8004c0e <loraif_select_device+0x3a>
		sel_addr = strtol(json.value, NULL, 16);
	json_release_object(&json);
 8004bec:	a803      	add	r0, sp, #12
 8004bee:	f000 fb09 	bl	8005204 <json_release_object>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004bf2:	4911      	ldr	r1, [pc, #68]	; (8004c38 <loraif_select_device+0x64>)
 8004bf4:	680b      	ldr	r3, [r1, #0]

    if (loraif_device_list.empty()) {
 8004bf6:	428b      	cmp	r3, r1
 8004bf8:	d010      	beq.n	8004c1c <loraif_select_device+0x48>
        return NULL;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == sel_addr) {
 8004bfa:	6898      	ldr	r0, [r3, #8]
 8004bfc:	6802      	ldr	r2, [r0, #0]
 8004bfe:	42a2      	cmp	r2, r4
 8004c00:	d003      	beq.n	8004c0a <loraif_select_device+0x36>
	_M_node = _M_node->_M_next;
 8004c02:	681b      	ldr	r3, [r3, #0]
    while (device != loraif_device_list.end()) {
 8004c04:	428b      	cmp	r3, r1
 8004c06:	d1f8      	bne.n	8004bfa <loraif_select_device+0x26>
//    if (device == loraif_device_list.end()) {
//    	loraif_debug((char *)"This device not available in device list", __LINE__, __FUNCTION__);
//        return NULL;
//    }

    return (*device);
 8004c08:	6898      	ldr	r0, [r3, #8]
}
 8004c0a:	b006      	add	sp, #24
 8004c0c:	bd10      	pop	{r4, pc}
		sel_addr = strtol(json.value, NULL, 16);
 8004c0e:	4601      	mov	r1, r0
 8004c10:	2210      	movs	r2, #16
 8004c12:	9805      	ldr	r0, [sp, #20]
 8004c14:	f006 f882 	bl	800ad1c <strtol>
 8004c18:	4604      	mov	r4, r0
 8004c1a:	e7e7      	b.n	8004bec <loraif_select_device+0x18>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <loraif_select_device+0x68>)
 8004c1e:	4808      	ldr	r0, [pc, #32]	; (8004c40 <loraif_select_device+0x6c>)
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4a08      	ldr	r2, [pc, #32]	; (8004c44 <loraif_select_device+0x70>)
 8004c24:	4908      	ldr	r1, [pc, #32]	; (8004c48 <loraif_select_device+0x74>)
 8004c26:	f240 13b3 	movw	r3, #435	; 0x1b3
 8004c2a:	f004 fc9d 	bl	8009568 <LOG_DEBUG>
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e7eb      	b.n	8004c0a <loraif_select_device+0x36>
 8004c32:	bf00      	nop
 8004c34:	0800d148 	.word	0x0800d148
 8004c38:	2000b224 	.word	0x2000b224
 8004c3c:	0800d1dc 	.word	0x0800d1dc
 8004c40:	0800d0d8 	.word	0x0800d0d8
 8004c44:	0800d184 	.word	0x0800d184
 8004c48:	0800d0bc 	.word	0x0800d0bc

08004c4c <loraif_process>:
void loraif_process(void *param){
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	b08e      	sub	sp, #56	; 0x38
	if(xQueueReceive(*queue, &rx_full, 10)){
 8004c50:	6800      	ldr	r0, [r0, #0]
 8004c52:	220a      	movs	r2, #10
 8004c54:	a904      	add	r1, sp, #16
 8004c56:	f7fd fd87 	bl	8002768 <xQueueReceive>
 8004c5a:	b908      	cbnz	r0, 8004c60 <loraif_process+0x14>
}
 8004c5c:	b00e      	add	sp, #56	; 0x38
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
		pkt_json_t json;
 8004c60:	2300      	movs	r3, #0
		pkt_t pkt;
 8004c62:	2400      	movs	r4, #0
		err = parse_packet(rx_full, &pkt);
 8004c64:	9804      	ldr	r0, [sp, #16]
		pkt_json_t json;
 8004c66:	930b      	str	r3, [sp, #44]	; 0x2c
		pkt_t pkt;
 8004c68:	2500      	movs	r5, #0
		err = parse_packet(rx_full, &pkt);
 8004c6a:	a908      	add	r1, sp, #32
		pkt_t pkt;
 8004c6c:	e9cd 4508 	strd	r4, r5, [sp, #32]
		pkt_json_t json;
 8004c70:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8004c74:	930d      	str	r3, [sp, #52]	; 0x34
		char *evt_data = NULL;
 8004c76:	9305      	str	r3, [sp, #20]
		err = parse_packet(rx_full, &pkt);
 8004c78:	f000 fad2 	bl	8005220 <parse_packet>
		if(err == PKT_ERR_OK){
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d134      	bne.n	8004cec <loraif_process+0xa0>
			cmd = (lora_event_t)str_to_cmd(pkt.cmd_str, command_string, (int)LORA_CMD_NUM);
 8004c82:	496d      	ldr	r1, [pc, #436]	; (8004e38 <loraif_process+0x1ec>)
 8004c84:	9808      	ldr	r0, [sp, #32]
 8004c86:	2208      	movs	r2, #8
 8004c88:	f000 fb30 	bl	80052ec <str_to_cmd>
 8004c8c:	b2c5      	uxtb	r5, r0
			if(cmd == LORA_REQ_ADDRESS){
 8004c8e:	2d01      	cmp	r5, #1
 8004c90:	d03a      	beq.n	8004d08 <loraif_process+0xbc>
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 8004c92:	4a6a      	ldr	r2, [pc, #424]	; (8004e3c <loraif_process+0x1f0>)
 8004c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c96:	a90b      	add	r1, sp, #44	; 0x2c
 8004c98:	f000 f99c 	bl	8004fd4 <json_get_object>
				uint32_t addr = strtol(json.value, NULL, 16);
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	2210      	movs	r2, #16
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 8004ca0:	4604      	mov	r4, r0
				uint32_t addr = strtol(json.value, NULL, 16);
 8004ca2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ca4:	f006 f83a 	bl	800ad1c <strtol>
				if(err == PKT_ERR_OK){
 8004ca8:	2c00      	cmp	r4, #0
 8004caa:	f040 808b 	bne.w	8004dc4 <loraif_process+0x178>
					if(cmd == LORA_ERR){
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	d039      	beq.n	8004d26 <loraif_process+0xda>
					else if(cmd == LORA_UPDATE_ADDRESS){
 8004cb2:	2d02      	cmp	r5, #2
 8004cb4:	f000 80a7 	beq.w	8004e06 <loraif_process+0x1ba>
					else if(cmd == LORA_UPDATE_STATE){
 8004cb8:	2d03      	cmp	r5, #3
 8004cba:	f000 80b0 	beq.w	8004e1e <loraif_process+0x1d2>
						if(addr == req_address && cmd == req_cmd){
 8004cbe:	4a60      	ldr	r2, [pc, #384]	; (8004e40 <loraif_process+0x1f4>)
 8004cc0:	6816      	ldr	r6, [r2, #0]
 8004cc2:	4286      	cmp	r6, r0
 8004cc4:	f000 8084 	beq.w	8004dd0 <loraif_process+0x184>
				json_release_object(&json);
 8004cc8:	a80b      	add	r0, sp, #44	; 0x2c
 8004cca:	f000 fa9b 	bl	8005204 <json_release_object>
			asprintf(&evt_data, "%s", pkt.data_str);
 8004cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cd0:	495c      	ldr	r1, [pc, #368]	; (8004e44 <loraif_process+0x1f8>)
 8004cd2:	a805      	add	r0, sp, #20
 8004cd4:	f004 ffb4 	bl	8009c40 <asiprintf>
			if(fpeventhandler != NULL) fpeventhandler(cmd, evt_data);
 8004cd8:	4b5b      	ldr	r3, [pc, #364]	; (8004e48 <loraif_process+0x1fc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	b113      	cbz	r3, 8004ce4 <loraif_process+0x98>
 8004cde:	9905      	ldr	r1, [sp, #20]
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	4798      	blx	r3
			free(evt_data);
 8004ce4:	9805      	ldr	r0, [sp, #20]
 8004ce6:	f004 fffb 	bl	8009ce0 <free>
 8004cea:	e008      	b.n	8004cfe <loraif_process+0xb2>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004cec:	4b57      	ldr	r3, [pc, #348]	; (8004e4c <loraif_process+0x200>)
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	4a57      	ldr	r2, [pc, #348]	; (8004e50 <loraif_process+0x204>)
 8004cf2:	4958      	ldr	r1, [pc, #352]	; (8004e54 <loraif_process+0x208>)
 8004cf4:	4858      	ldr	r0, [pc, #352]	; (8004e58 <loraif_process+0x20c>)
 8004cf6:	f240 131d 	movw	r3, #285	; 0x11d
 8004cfa:	f004 fc35 	bl	8009568 <LOG_DEBUG>
		release_packet(&pkt);
 8004cfe:	a808      	add	r0, sp, #32
 8004d00:	f000 fae8 	bl	80052d4 <release_packet>
}
 8004d04:	b00e      	add	sp, #56	; 0x38
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
				err = json_get_object(pkt.data_str, &json, (char *)"random_number");
 8004d08:	4a54      	ldr	r2, [pc, #336]	; (8004e5c <loraif_process+0x210>)
 8004d0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d0c:	a90b      	add	r1, sp, #44	; 0x2c
 8004d0e:	f000 f961 	bl	8004fd4 <json_get_object>
				if(err == PKT_ERR_OK){
 8004d12:	b188      	cbz	r0, 8004d38 <loraif_process+0xec>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004d14:	4b4d      	ldr	r3, [pc, #308]	; (8004e4c <loraif_process+0x200>)
 8004d16:	4a52      	ldr	r2, [pc, #328]	; (8004e60 <loraif_process+0x214>)
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	23da      	movs	r3, #218	; 0xda
 8004d1c:	494d      	ldr	r1, [pc, #308]	; (8004e54 <loraif_process+0x208>)
 8004d1e:	484e      	ldr	r0, [pc, #312]	; (8004e58 <loraif_process+0x20c>)
 8004d20:	f004 fc22 	bl	8009568 <LOG_DEBUG>
}
 8004d24:	e7d0      	b.n	8004cc8 <loraif_process+0x7c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004d26:	4b49      	ldr	r3, [pc, #292]	; (8004e4c <loraif_process+0x200>)
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	4a4e      	ldr	r2, [pc, #312]	; (8004e64 <loraif_process+0x218>)
 8004d2c:	4949      	ldr	r1, [pc, #292]	; (8004e54 <loraif_process+0x208>)
 8004d2e:	484a      	ldr	r0, [pc, #296]	; (8004e58 <loraif_process+0x20c>)
 8004d30:	23e7      	movs	r3, #231	; 0xe7
 8004d32:	f004 fc19 	bl	8009568 <LOG_DEBUG>
}
 8004d36:	e7c7      	b.n	8004cc8 <loraif_process+0x7c>
					uint32_t rand_num = strtol(json.value, NULL, 16);
 8004d38:	4601      	mov	r1, r0
 8004d3a:	2210      	movs	r2, #16
 8004d3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d3e:	4c4a      	ldr	r4, [pc, #296]	; (8004e68 <loraif_process+0x21c>)
 8004d40:	f005 ffec 	bl	800ad1c <strtol>
					rng_set_seed(rand_num);
 8004d44:	f002 fc64 	bl	8007610 <rng_set_seed>
						new_addr = rng_generate_random_number();
 8004d48:	f002 fc68 	bl	800761c <rng_generate_random_number>
      { return iterator(this->_M_impl._M_node._M_next); }
 8004d4c:	6823      	ldr	r3, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	d006      	beq.n	8004d60 <loraif_process+0x114>
        if ((*device)->address == num) {
 8004d52:	6899      	ldr	r1, [r3, #8]
 8004d54:	6809      	ldr	r1, [r1, #0]
 8004d56:	4288      	cmp	r0, r1
 8004d58:	d0f6      	beq.n	8004d48 <loraif_process+0xfc>
	_M_node = _M_node->_M_next;
 8004d5a:	681b      	ldr	r3, [r3, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	d1f8      	bne.n	8004d52 <loraif_process+0x106>
					new_addr &= 0x7FFFFFFFU;
 8004d60:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,", new_addr);
 8004d64:	4941      	ldr	r1, [pc, #260]	; (8004e6c <loraif_process+0x220>)
 8004d66:	9203      	str	r2, [sp, #12]
 8004d68:	a807      	add	r0, sp, #28
 8004d6a:	f004 ff69 	bl	8009c40 <asiprintf>
					crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8004d6e:	9c07      	ldr	r4, [sp, #28]
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7fb fa47 	bl	8000204 <strlen>
 8004d76:	b281      	uxth	r1, r0
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f7ff fcdf 	bl	800473c <cal_crc16>
 8004d7e:	9002      	str	r0, [sp, #8]
					free(temp);
 8004d80:	9807      	ldr	r0, [sp, #28]
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004d82:	4c32      	ldr	r4, [pc, #200]	; (8004e4c <loraif_process+0x200>)
					free(temp);
 8004d84:	f004 ffac 	bl	8009ce0 <free>
					asprintf(&response_to_device, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"crc\":0x%04x}", new_addr, crc);
 8004d88:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004d8c:	4938      	ldr	r1, [pc, #224]	; (8004e70 <loraif_process+0x224>)
 8004d8e:	a806      	add	r0, sp, #24
 8004d90:	f004 ff56 	bl	8009c40 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004d94:	9a06      	ldr	r2, [sp, #24]
 8004d96:	492f      	ldr	r1, [pc, #188]	; (8004e54 <loraif_process+0x208>)
 8004d98:	482f      	ldr	r0, [pc, #188]	; (8004e58 <loraif_process+0x20c>)
 8004d9a:	9400      	str	r4, [sp, #0]
 8004d9c:	23d2      	movs	r3, #210	; 0xd2
 8004d9e:	f004 fbe3 	bl	8009568 <LOG_DEBUG>
					if(xQueueSend(response_queue, &response_to_device, 2) == pdFALSE){
 8004da2:	4b34      	ldr	r3, [pc, #208]	; (8004e74 <loraif_process+0x228>)
 8004da4:	a906      	add	r1, sp, #24
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	2202      	movs	r2, #2
 8004daa:	2300      	movs	r3, #0
 8004dac:	f7fd fa68 	bl	8002280 <xQueueGenericSend>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d18c      	bne.n	8004cce <loraif_process+0x82>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004db4:	4a30      	ldr	r2, [pc, #192]	; (8004e78 <loraif_process+0x22c>)
 8004db6:	4927      	ldr	r1, [pc, #156]	; (8004e54 <loraif_process+0x208>)
 8004db8:	4827      	ldr	r0, [pc, #156]	; (8004e58 <loraif_process+0x20c>)
 8004dba:	9400      	str	r4, [sp, #0]
 8004dbc:	23d4      	movs	r3, #212	; 0xd4
 8004dbe:	f004 fbd3 	bl	8009568 <LOG_DEBUG>
}
 8004dc2:	e784      	b.n	8004cce <loraif_process+0x82>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004dc4:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <loraif_process+0x200>)
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <loraif_process+0x230>)
 8004dca:	f240 130f 	movw	r3, #271	; 0x10f
 8004dce:	e7a5      	b.n	8004d1c <loraif_process+0xd0>
						if(addr == req_address && cmd == req_cmd){
 8004dd0:	4b2b      	ldr	r3, [pc, #172]	; (8004e80 <loraif_process+0x234>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	42ab      	cmp	r3, r5
 8004dd6:	f47f af77 	bne.w	8004cc8 <loraif_process+0x7c>
							req_had_resp = true;
 8004dda:	4b2a      	ldr	r3, [pc, #168]	; (8004e84 <loraif_process+0x238>)
							loraif_dev_t *err_dev = loraif_select_device(pkt.data_str);
 8004ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
							req_had_resp = true;
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
							loraif_dev_t *err_dev = loraif_select_device(pkt.data_str);
 8004de2:	f7ff fef7 	bl	8004bd4 <loraif_select_device>
 8004de6:	4603      	mov	r3, r0
							set_response_ok(addr, cmd);
 8004de8:	4629      	mov	r1, r5
 8004dea:	4630      	mov	r0, r6
							err_dev->err_count = 0;
 8004dec:	721c      	strb	r4, [r3, #8]
							set_response_ok(addr, cmd);
 8004dee:	f7ff fcc1 	bl	8004774 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004df2:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <loraif_process+0x200>)
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	4a24      	ldr	r2, [pc, #144]	; (8004e88 <loraif_process+0x23c>)
 8004df8:	4916      	ldr	r1, [pc, #88]	; (8004e54 <loraif_process+0x208>)
 8004dfa:	4817      	ldr	r0, [pc, #92]	; (8004e58 <loraif_process+0x20c>)
 8004dfc:	f240 1309 	movw	r3, #265	; 0x109
 8004e00:	f004 fbb2 	bl	8009568 <LOG_DEBUG>
							goto event_handle;
 8004e04:	e763      	b.n	8004cce <loraif_process+0x82>
							set_response_ok(addr, cmd);
 8004e06:	4629      	mov	r1, r5
 8004e08:	f7ff fcb4 	bl	8004774 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <loraif_process+0x200>)
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <loraif_process+0x240>)
 8004e12:	4910      	ldr	r1, [pc, #64]	; (8004e54 <loraif_process+0x208>)
 8004e14:	4810      	ldr	r0, [pc, #64]	; (8004e58 <loraif_process+0x20c>)
 8004e16:	23ef      	movs	r3, #239	; 0xef
 8004e18:	f004 fba6 	bl	8009568 <LOG_DEBUG>
							goto event_handle;
 8004e1c:	e757      	b.n	8004cce <loraif_process+0x82>
							set_response_ok(addr, cmd);
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7ff fca8 	bl	8004774 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004e24:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <loraif_process+0x200>)
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	4a19      	ldr	r2, [pc, #100]	; (8004e90 <loraif_process+0x244>)
 8004e2a:	490a      	ldr	r1, [pc, #40]	; (8004e54 <loraif_process+0x208>)
 8004e2c:	480a      	ldr	r0, [pc, #40]	; (8004e58 <loraif_process+0x20c>)
 8004e2e:	23f7      	movs	r3, #247	; 0xf7
 8004e30:	f004 fb9a 	bl	8009568 <LOG_DEBUG>
							goto event_handle;
 8004e34:	e74b      	b.n	8004cce <loraif_process+0x82>
 8004e36:	bf00      	nop
 8004e38:	2000000c 	.word	0x2000000c
 8004e3c:	0800d148 	.word	0x0800d148
 8004e40:	2000b230 	.word	0x2000b230
 8004e44:	0800d888 	.word	0x0800d888
 8004e48:	2000b238 	.word	0x2000b238
 8004e4c:	0800d228 	.word	0x0800d228
 8004e50:	0800d2c0 	.word	0x0800d2c0
 8004e54:	0800d0bc 	.word	0x0800d0bc
 8004e58:	0800d0d8 	.word	0x0800d0d8
 8004e5c:	0800d1f4 	.word	0x0800d1f4
 8004e60:	0800d238 	.word	0x0800d238
 8004e64:	0800d25c 	.word	0x0800d25c
 8004e68:	2000b224 	.word	0x2000b224
 8004e6c:	0800d2dc 	.word	0x0800d2dc
 8004e70:	0800d300 	.word	0x0800d300
 8004e74:	2000b24c 	.word	0x2000b24c
 8004e78:	0800d204 	.word	0x0800d204
 8004e7c:	0800d2b0 	.word	0x0800d2b0
 8004e80:	2000b23c 	.word	0x2000b23c
 8004e84:	2000b234 	.word	0x2000b234
 8004e88:	0800d29c 	.word	0x0800d29c
 8004e8c:	0800d26c 	.word	0x0800d26c
 8004e90:	0800d288 	.word	0x0800d288

08004e94 <loraif_check_timeout>:
void loraif_check_timeout(void){
 8004e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while(req_had_resp == false){
 8004e98:	4d2a      	ldr	r5, [pc, #168]	; (8004f44 <loraif_check_timeout+0xb0>)
 8004e9a:	782b      	ldrb	r3, [r5, #0]
void loraif_check_timeout(void){
 8004e9c:	b087      	sub	sp, #28
	while(req_had_resp == false){
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d133      	bne.n	8004f0a <loraif_check_timeout+0x76>
 8004ea2:	4c29      	ldr	r4, [pc, #164]	; (8004f48 <loraif_check_timeout+0xb4>)
 8004ea4:	4e29      	ldr	r6, [pc, #164]	; (8004f4c <loraif_check_timeout+0xb8>)
			asprintf(&evt_data, "{\"addr\":0x%08x}", req_address);
 8004ea6:	4f2a      	ldr	r7, [pc, #168]	; (8004f50 <loraif_check_timeout+0xbc>)
 8004ea8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8004f68 <loraif_check_timeout+0xd4>
			if(err_dev->err_count >= max_not_resp){
 8004eac:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004f6c <loraif_check_timeout+0xd8>
 8004eb0:	e004      	b.n	8004ebc <loraif_check_timeout+0x28>
		vTaskDelay(1);
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	f7fe fca4 	bl	8003800 <vTaskDelay>
	while(req_had_resp == false){
 8004eb8:	782b      	ldrb	r3, [r5, #0]
 8004eba:	bb33      	cbnz	r3, 8004f0a <loraif_check_timeout+0x76>
		if(timer->get_counter() >= resp_timeout){
 8004ebc:	6820      	ldr	r0, [r4, #0]
 8004ebe:	f003 fb65 	bl	800858c <_ZN3tim11get_counterEv>
 8004ec2:	6833      	ldr	r3, [r6, #0]
 8004ec4:	4298      	cmp	r0, r3
 8004ec6:	d3f4      	bcc.n	8004eb2 <loraif_check_timeout+0x1e>
			timer->stop();
 8004ec8:	6821      	ldr	r1, [r4, #0]
 8004eca:	a804      	add	r0, sp, #16
 8004ecc:	f003 fb88 	bl	80085e0 <_ZN3tim4stopEv>
			timer->reset_counter();
 8004ed0:	6820      	ldr	r0, [r4, #0]
 8004ed2:	f003 fb57 	bl	8008584 <_ZN3tim13reset_counterEv>
			req_had_resp = false;
 8004ed6:	2300      	movs	r3, #0
			asprintf(&evt_data, "{\"addr\":0x%08x}", req_address);
 8004ed8:	683a      	ldr	r2, [r7, #0]
			req_had_resp = false;
 8004eda:	702b      	strb	r3, [r5, #0]
			asprintf(&evt_data, "{\"addr\":0x%08x}", req_address);
 8004edc:	4649      	mov	r1, r9
 8004ede:	a803      	add	r0, sp, #12
 8004ee0:	f004 feae 	bl	8009c40 <asiprintf>
			loraif_dev_t *err_dev = loraif_select_device(evt_data);
 8004ee4:	9803      	ldr	r0, [sp, #12]
 8004ee6:	f7ff fe75 	bl	8004bd4 <loraif_select_device>
			if(err_dev->err_count >= max_not_resp){
 8004eea:	f898 3000 	ldrb.w	r3, [r8]
 8004eee:	7a02      	ldrb	r2, [r0, #8]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d20d      	bcs.n	8004f10 <loraif_check_timeout+0x7c>
				err_dev->err_count++;
 8004ef4:	3201      	adds	r2, #1
 8004ef6:	7202      	strb	r2, [r0, #8]
			free(evt_data);
 8004ef8:	9803      	ldr	r0, [sp, #12]
 8004efa:	f004 fef1 	bl	8009ce0 <free>
		vTaskDelay(1);
 8004efe:	2001      	movs	r0, #1
 8004f00:	f7fe fc7e 	bl	8003800 <vTaskDelay>
	while(req_had_resp == false){
 8004f04:	782b      	ldrb	r3, [r5, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0d8      	beq.n	8004ebc <loraif_check_timeout+0x28>
}
 8004f0a:	b007      	add	sp, #28
 8004f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				asprintf(&tmp, "Device 0x%08x %d times not response", req_address, max_not_resp);
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	4910      	ldr	r1, [pc, #64]	; (8004f54 <loraif_check_timeout+0xc0>)
 8004f14:	a804      	add	r0, sp, #16
 8004f16:	f004 fe93 	bl	8009c40 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <loraif_check_timeout+0xc4>)
 8004f1c:	9a04      	ldr	r2, [sp, #16]
 8004f1e:	490f      	ldr	r1, [pc, #60]	; (8004f5c <loraif_check_timeout+0xc8>)
 8004f20:	480f      	ldr	r0, [pc, #60]	; (8004f60 <loraif_check_timeout+0xcc>)
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	f240 133b 	movw	r3, #315	; 0x13b
 8004f28:	f004 fb1e 	bl	8009568 <LOG_DEBUG>
				free(tmp);
 8004f2c:	9804      	ldr	r0, [sp, #16]
 8004f2e:	f004 fed7 	bl	8009ce0 <free>
				if(fpeventhandler != NULL) fpeventhandler(LORA_DEL_DEVICE, evt_data);
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <loraif_check_timeout+0xd0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0de      	beq.n	8004ef8 <loraif_check_timeout+0x64>
 8004f3a:	9903      	ldr	r1, [sp, #12]
 8004f3c:	2007      	movs	r0, #7
 8004f3e:	4798      	blx	r3
 8004f40:	e7da      	b.n	8004ef8 <loraif_check_timeout+0x64>
 8004f42:	bf00      	nop
 8004f44:	2000b234 	.word	0x2000b234
 8004f48:	2000b250 	.word	0x2000b250
 8004f4c:	2000b248 	.word	0x2000b248
 8004f50:	2000b230 	.word	0x2000b230
 8004f54:	0800d340 	.word	0x0800d340
 8004f58:	0800d364 	.word	0x0800d364
 8004f5c:	0800d0bc 	.word	0x0800d0bc
 8004f60:	0800d0d8 	.word	0x0800d0d8
 8004f64:	2000b238 	.word	0x2000b238
 8004f68:	0800d330 	.word	0x0800d330
 8004f6c:	2000b244 	.word	0x2000b244

08004f70 <loraif_request_data>:
void loraif_request_data(void){
 8004f70:	b570      	push	{r4, r5, r6, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004f72:	4d0a      	ldr	r5, [pc, #40]	; (8004f9c <loraif_request_data+0x2c>)
 8004f74:	682c      	ldr	r4, [r5, #0]
    if(loraif_device_list.empty()) {
 8004f76:	42ac      	cmp	r4, r5
 8004f78:	d00e      	beq.n	8004f98 <loraif_request_data+0x28>
        loraif_request((*device)->address, LORA_REQ_DATA, (char *)"?");
 8004f7a:	4e09      	ldr	r6, [pc, #36]	; (8004fa0 <loraif_request_data+0x30>)
    	vTaskDelay(10);
 8004f7c:	200a      	movs	r0, #10
 8004f7e:	f7fe fc3f 	bl	8003800 <vTaskDelay>
        loraif_request((*device)->address, LORA_REQ_DATA, (char *)"?");
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	4632      	mov	r2, r6
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	2105      	movs	r1, #5
 8004f8a:	f7ff fcfd 	bl	8004988 <loraif_request>
        loraif_check_timeout();
 8004f8e:	f7ff ff81 	bl	8004e94 <loraif_check_timeout>
	_M_node = _M_node->_M_next;
 8004f92:	6824      	ldr	r4, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004f94:	42ac      	cmp	r4, r5
 8004f96:	d1f1      	bne.n	8004f7c <loraif_request_data+0xc>
}
 8004f98:	bd70      	pop	{r4, r5, r6, pc}
 8004f9a:	bf00      	nop
 8004f9c:	2000b224 	.word	0x2000b224
 8004fa0:	0800d37c 	.word	0x0800d37c

08004fa4 <_GLOBAL__sub_I_loraif>:
	this->_M_next = this->_M_prev = this;
 8004fa4:	4b02      	ldr	r3, [pc, #8]	; (8004fb0 <_GLOBAL__sub_I_loraif+0xc>)
	this->_M_size = 0;
 8004fa6:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 8004fa8:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 8004fac:	609a      	str	r2, [r3, #8]
}
 8004fae:	4770      	bx	lr
 8004fb0:	2000b224 	.word	0x2000b224

08004fb4 <_GLOBAL__sub_D_loraif>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004fb6:	4d06      	ldr	r5, [pc, #24]	; (8004fd0 <_GLOBAL__sub_D_loraif+0x1c>)
 8004fb8:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 8004fba:	42ac      	cmp	r4, r5
 8004fbc:	d006      	beq.n	8004fcc <_GLOBAL__sub_D_loraif+0x18>
 8004fbe:	4620      	mov	r0, r4
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 8004fc0:	6824      	ldr	r4, [r4, #0]
 8004fc2:	210c      	movs	r1, #12
 8004fc4:	f004 fdc8 	bl	8009b58 <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 8004fc8:	42ac      	cmp	r4, r5
 8004fca:	d1f8      	bne.n	8004fbe <_GLOBAL__sub_D_loraif+0xa>
 8004fcc:	bd38      	pop	{r3, r4, r5, pc}
 8004fce:	bf00      	nop
 8004fd0:	2000b224 	.word	0x2000b224

08004fd4 <json_get_object>:
#if ENABLE_COMPONENT_PARSE_PACKET_DEBUG
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
#endif /* ENABLE_COMPONENT_PARSE_PACKET_DEBUG */
}

pkt_err_t json_get_object(char *src, pkt_json_t *dest, char *key){
 8004fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fd8:	b087      	sub	sp, #28
	int key_len = 0, val_len = 0;
	char *pkstart, *pvstart;
	int ivstart = 0, ivend = 0;

	/** check input */
	if(src == NULL || dest == NULL || key == NULL){
 8004fda:	2900      	cmp	r1, #0
 8004fdc:	d079      	beq.n	80050d2 <json_get_object+0xfe>
 8004fde:	4614      	mov	r4, r2
 8004fe0:	2a00      	cmp	r2, #0
 8004fe2:	d076      	beq.n	80050d2 <json_get_object+0xfe>
		parse_error_handler((char *)"Error bad input argument", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_ARG;
		return ret;
	}
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004fe4:	7803      	ldrb	r3, [r0, #0]
 8004fe6:	2b7b      	cmp	r3, #123	; 0x7b
 8004fe8:	4605      	mov	r5, r0
 8004fea:	d166      	bne.n	80050ba <json_get_object+0xe6>
 8004fec:	460e      	mov	r6, r1
	int src_len = strlen(src);
 8004fee:	f7fb f909 	bl	8000204 <strlen>
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004ff2:	182b      	adds	r3, r5, r0
	int src_len = strlen(src);
 8004ff4:	4607      	mov	r7, r0
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004ff6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004ffa:	2b7d      	cmp	r3, #125	; 0x7d
 8004ffc:	d15d      	bne.n	80050ba <json_get_object+0xe6>
		return ret;
	}

	/** Find key */
	char *tmp;
	asprintf(&tmp, "\"%s\":", key);
 8004ffe:	4622      	mov	r2, r4
 8005000:	4977      	ldr	r1, [pc, #476]	; (80051e0 <json_get_object+0x20c>)
 8005002:	a805      	add	r0, sp, #20
 8005004:	f004 fe1c 	bl	8009c40 <asiprintf>
	pkstart = strstr(src_cpy, tmp);
 8005008:	9905      	ldr	r1, [sp, #20]
 800500a:	9103      	str	r1, [sp, #12]
 800500c:	4628      	mov	r0, r5
 800500e:	f005 fded 	bl	800abec <strstr>
	free(tmp);
 8005012:	9903      	ldr	r1, [sp, #12]
	pkstart = strstr(src_cpy, tmp);
 8005014:	4604      	mov	r4, r0
	free(tmp);
 8005016:	4608      	mov	r0, r1
 8005018:	f004 fe62 	bl	8009ce0 <free>
	if(pkstart == NULL){
 800501c:	2c00      	cmp	r4, #0
 800501e:	f000 80b3 	beq.w	8005188 <json_get_object+0x1b4>
		parse_error_handler((char *)"Error key not appear in the input request string", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_NOKEY;
		return ret;
	}
	pkstart++;
 8005022:	f104 0801 	add.w	r8, r4, #1
	/**
	 * Get key
	 * */
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8005026:	4640      	mov	r0, r8
 8005028:	f7fb f8ec 	bl	8000204 <strlen>
 800502c:	4623      	mov	r3, r4
 800502e:	2400      	movs	r4, #0
 8005030:	e004      	b.n	800503c <json_get_object+0x68>
		if(pkstart[key_len] == '"') break;
 8005032:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005036:	2a22      	cmp	r2, #34	; 0x22
 8005038:	d002      	beq.n	8005040 <json_get_object+0x6c>
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 800503a:	3401      	adds	r4, #1
 800503c:	42a0      	cmp	r0, r4
 800503e:	dcf8      	bgt.n	8005032 <json_get_object+0x5e>
	}

	dest->key = (char *)malloc((key_len+1) * sizeof(char));
 8005040:	1c60      	adds	r0, r4, #1
 8005042:	f004 fe45 	bl	8009cd0 <malloc>
 8005046:	4681      	mov	r9, r0
 8005048:	6030      	str	r0, [r6, #0]
	if(dest->key == NULL){
 800504a:	2800      	cmp	r0, #0
 800504c:	f000 80a9 	beq.w	80051a2 <json_get_object+0x1ce>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->key, pkstart, key_len); 	/** assign key to json struct */
 8005050:	4622      	mov	r2, r4
 8005052:	4641      	mov	r1, r8
 8005054:	f004 fe4c 	bl	8009cf0 <memcpy>
	 * Get value
	 * */
	/** Find Value start index */
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
	pvstart = pkstart;
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8005058:	1ca3      	adds	r3, r4, #2
	dest->key[key_len] = '\0';
 800505a:	2200      	movs	r2, #0
 800505c:	f809 2004 	strb.w	r2, [r9, r4]
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8005060:	f818 2003 	ldrb.w	r2, [r8, r3]
 8005064:	2a7b      	cmp	r2, #123	; 0x7b
 8005066:	eb08 0903 	add.w	r9, r8, r3
 800506a:	d03e      	beq.n	80050ea <json_get_object+0x116>
		dest->leaf = true;
 800506c:	2201      	movs	r2, #1
 800506e:	7132      	strb	r2, [r6, #4]

	/** Get start point off value */
	pvstart = (char *)(pvstart + key_len + 2);
	/** Check leaf item */
	if(dest->leaf == true){
		if((char)(*pvstart) == '"') { /** Value is string */
 8005070:	f818 3003 	ldrb.w	r3, [r8, r3]
 8005074:	2b22      	cmp	r3, #34	; 0x22
 8005076:	d06d      	beq.n	8005154 <json_get_object+0x180>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
				if(pvstart[val_len] == '"') break;
			}
		}
		else{ /** Value is number or everythings */
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8005078:	4648      	mov	r0, r9
 800507a:	f7fb f8c3 	bl	8000204 <strlen>
 800507e:	2400      	movs	r4, #0
 8005080:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8005084:	e006      	b.n	8005094 <json_get_object+0xc0>
				if(pvstart[val_len] == '}' || pvstart[val_len] == ',') break;
 8005086:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800508a:	2b7d      	cmp	r3, #125	; 0x7d
 800508c:	d004      	beq.n	8005098 <json_get_object+0xc4>
 800508e:	2b2c      	cmp	r3, #44	; 0x2c
 8005090:	d002      	beq.n	8005098 <json_get_object+0xc4>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8005092:	3401      	adds	r4, #1
 8005094:	42a0      	cmp	r0, r4
 8005096:	dcf6      	bgt.n	8005086 <json_get_object+0xb2>
			}
		}
		if(val_len == 0){
 8005098:	2c00      	cmp	r4, #0
 800509a:	d06b      	beq.n	8005174 <json_get_object+0x1a0>
			parse_error_handler((char *)"Error key no value", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_NOVAL;
			return ret;
		}
		dest->value = (char *)malloc((val_len+1) * sizeof(char));
 800509c:	1c60      	adds	r0, r4, #1
 800509e:	f004 fe17 	bl	8009cd0 <malloc>
 80050a2:	4605      	mov	r5, r0
 80050a4:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 80050a6:	2800      	cmp	r0, #0
 80050a8:	f000 808f 	beq.w	80051ca <json_get_object+0x1f6>
			parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_MEM;
			return ret;
		}
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 80050ac:	4622      	mov	r2, r4
 80050ae:	4649      	mov	r1, r9
 80050b0:	f004 fe1e 	bl	8009cf0 <memcpy>
		dest->value[val_len] = '\0';
 80050b4:	2000      	movs	r0, #0
 80050b6:	5528      	strb	r0, [r5, r4]
 80050b8:	e008      	b.n	80050cc <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80050ba:	4b4a      	ldr	r3, [pc, #296]	; (80051e4 <json_get_object+0x210>)
 80050bc:	484a      	ldr	r0, [pc, #296]	; (80051e8 <json_get_object+0x214>)
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	4a4a      	ldr	r2, [pc, #296]	; (80051ec <json_get_object+0x218>)
 80050c2:	494b      	ldr	r1, [pc, #300]	; (80051f0 <json_get_object+0x21c>)
 80050c4:	232b      	movs	r3, #43	; 0x2b
 80050c6:	f004 fa4f 	bl	8009568 <LOG_DEBUG>
		return ret;
 80050ca:	2002      	movs	r0, #2
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
		dest->value[val_len] = '\0';
	}

	return ret;
}
 80050cc:	b007      	add	sp, #28
 80050ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80050d2:	4b44      	ldr	r3, [pc, #272]	; (80051e4 <json_get_object+0x210>)
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	4a47      	ldr	r2, [pc, #284]	; (80051f4 <json_get_object+0x220>)
 80050d8:	4945      	ldr	r1, [pc, #276]	; (80051f0 <json_get_object+0x21c>)
 80050da:	4843      	ldr	r0, [pc, #268]	; (80051e8 <json_get_object+0x214>)
 80050dc:	2326      	movs	r3, #38	; 0x26
 80050de:	f004 fa43 	bl	8009568 <LOG_DEBUG>
		return ret;
 80050e2:	2001      	movs	r0, #1
}
 80050e4:	b007      	add	sp, #28
 80050e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(dest->leaf == true){
 80050ea:	7931      	ldrb	r1, [r6, #4]
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d1bf      	bne.n	8005070 <json_get_object+0x9c>
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
 80050f0:	eba8 0805 	sub.w	r8, r8, r5
 80050f4:	4444      	add	r4, r8
 80050f6:	f104 0c02 	add.w	ip, r4, #2
		for(ivend=ivstart; ivend<src_len; ivend++){
 80050fa:	4567      	cmp	r7, ip
 80050fc:	dd4e      	ble.n	800519c <json_get_object+0x1c8>
 80050fe:	3401      	adds	r4, #1
 8005100:	4425      	add	r5, r4
 8005102:	4663      	mov	r3, ip
		int l_brace = 0, r_brace = 0;
 8005104:	4608      	mov	r0, r1
 8005106:	e007      	b.n	8005118 <json_get_object+0x144>
			if(src_cpy[ivend] == '}') r_brace++;
 8005108:	2a7d      	cmp	r2, #125	; 0x7d
 800510a:	bf08      	it	eq
 800510c:	3101      	addeq	r1, #1
			if(l_brace == r_brace) break;
 800510e:	4281      	cmp	r1, r0
 8005110:	d008      	beq.n	8005124 <json_get_object+0x150>
		for(ivend=ivstart; ivend<src_len; ivend++){
 8005112:	3301      	adds	r3, #1
 8005114:	429f      	cmp	r7, r3
 8005116:	d018      	beq.n	800514a <json_get_object+0x176>
			if(src_cpy[ivend] == '{') l_brace++;
 8005118:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800511c:	2a7b      	cmp	r2, #123	; 0x7b
 800511e:	d1f3      	bne.n	8005108 <json_get_object+0x134>
 8005120:	3001      	adds	r0, #1
			if(src_cpy[ivend] == '}') r_brace++;
 8005122:	e7f4      	b.n	800510e <json_get_object+0x13a>
		val_len = ivend - ivstart + 1;
 8005124:	eba3 030c 	sub.w	r3, r3, ip
		dest->value = (char *)malloc(val_len + 1);
 8005128:	1c98      	adds	r0, r3, #2
		val_len = ivend - ivstart + 1;
 800512a:	1c5f      	adds	r7, r3, #1
		dest->value = (char *)malloc(val_len + 1);
 800512c:	f004 fdd0 	bl	8009cd0 <malloc>
 8005130:	4604      	mov	r4, r0
 8005132:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 8005134:	2800      	cmp	r0, #0
 8005136:	d03e      	beq.n	80051b6 <json_get_object+0x1e2>
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8005138:	463a      	mov	r2, r7
 800513a:	4649      	mov	r1, r9
 800513c:	f004 fdd8 	bl	8009cf0 <memcpy>
		dest->value[val_len] = '\0';
 8005140:	2000      	movs	r0, #0
 8005142:	55e0      	strb	r0, [r4, r7]
}
 8005144:	b007      	add	sp, #28
 8005146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		val_len = ivend - ivstart + 1;
 800514a:	eba7 070c 	sub.w	r7, r7, ip
		dest->value = (char *)malloc(val_len + 1);
 800514e:	1cb8      	adds	r0, r7, #2
		val_len = ivend - ivstart + 1;
 8005150:	3701      	adds	r7, #1
 8005152:	e7eb      	b.n	800512c <json_get_object+0x158>
			pvstart++;
 8005154:	f109 0501 	add.w	r5, r9, #1
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8005158:	4628      	mov	r0, r5
 800515a:	f7fb f853 	bl	8000204 <strlen>
 800515e:	2400      	movs	r4, #0
 8005160:	e004      	b.n	800516c <json_get_object+0x198>
				if(pvstart[val_len] == '"') break;
 8005162:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8005166:	2b22      	cmp	r3, #34	; 0x22
 8005168:	d002      	beq.n	8005170 <json_get_object+0x19c>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 800516a:	3401      	adds	r4, #1
 800516c:	42a0      	cmp	r0, r4
 800516e:	dcf8      	bgt.n	8005162 <json_get_object+0x18e>
 8005170:	46a9      	mov	r9, r5
 8005172:	e791      	b.n	8005098 <json_get_object+0xc4>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005174:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <json_get_object+0x210>)
 8005176:	481c      	ldr	r0, [pc, #112]	; (80051e8 <json_get_object+0x214>)
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <json_get_object+0x224>)
 800517c:	491c      	ldr	r1, [pc, #112]	; (80051f0 <json_get_object+0x21c>)
 800517e:	2366      	movs	r3, #102	; 0x66
 8005180:	f004 f9f2 	bl	8009568 <LOG_DEBUG>
			return ret;
 8005184:	2008      	movs	r0, #8
 8005186:	e7a1      	b.n	80050cc <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005188:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <json_get_object+0x210>)
 800518a:	4817      	ldr	r0, [pc, #92]	; (80051e8 <json_get_object+0x214>)
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <json_get_object+0x228>)
 8005190:	4917      	ldr	r1, [pc, #92]	; (80051f0 <json_get_object+0x21c>)
 8005192:	2336      	movs	r3, #54	; 0x36
 8005194:	f004 f9e8 	bl	8009568 <LOG_DEBUG>
		return ret;
 8005198:	2004      	movs	r0, #4
 800519a:	e797      	b.n	80050cc <json_get_object+0xf8>
		for(ivend=ivstart; ivend<src_len; ivend++){
 800519c:	2701      	movs	r7, #1
 800519e:	2002      	movs	r0, #2
 80051a0:	e7c4      	b.n	800512c <json_get_object+0x158>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80051a2:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <json_get_object+0x210>)
 80051a4:	4810      	ldr	r0, [pc, #64]	; (80051e8 <json_get_object+0x214>)
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	4a15      	ldr	r2, [pc, #84]	; (8005200 <json_get_object+0x22c>)
 80051aa:	4911      	ldr	r1, [pc, #68]	; (80051f0 <json_get_object+0x21c>)
 80051ac:	2344      	movs	r3, #68	; 0x44
 80051ae:	f004 f9db 	bl	8009568 <LOG_DEBUG>
		return ret;
 80051b2:	2010      	movs	r0, #16
 80051b4:	e78a      	b.n	80050cc <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <json_get_object+0x210>)
 80051b8:	480b      	ldr	r0, [pc, #44]	; (80051e8 <json_get_object+0x214>)
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	4a10      	ldr	r2, [pc, #64]	; (8005200 <json_get_object+0x22c>)
 80051be:	490c      	ldr	r1, [pc, #48]	; (80051f0 <json_get_object+0x21c>)
 80051c0:	237e      	movs	r3, #126	; 0x7e
 80051c2:	f004 f9d1 	bl	8009568 <LOG_DEBUG>
			return ret;
 80051c6:	2010      	movs	r0, #16
 80051c8:	e780      	b.n	80050cc <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <json_get_object+0x210>)
 80051cc:	4806      	ldr	r0, [pc, #24]	; (80051e8 <json_get_object+0x214>)
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	4a0b      	ldr	r2, [pc, #44]	; (8005200 <json_get_object+0x22c>)
 80051d2:	4907      	ldr	r1, [pc, #28]	; (80051f0 <json_get_object+0x21c>)
 80051d4:	236c      	movs	r3, #108	; 0x6c
 80051d6:	f004 f9c7 	bl	8009568 <LOG_DEBUG>
			return ret;
 80051da:	2010      	movs	r0, #16
 80051dc:	e776      	b.n	80050cc <json_get_object+0xf8>
 80051de:	bf00      	nop
 80051e0:	0800d460 	.word	0x0800d460
 80051e4:	0800d450 	.word	0x0800d450
 80051e8:	0800d440 	.word	0x0800d440
 80051ec:	0800d468 	.word	0x0800d468
 80051f0:	0800d0bc 	.word	0x0800d0bc
 80051f4:	0800d424 	.word	0x0800d424
 80051f8:	0800d4e0 	.word	0x0800d4e0
 80051fc:	0800d48c 	.word	0x0800d48c
 8005200:	0800d4c0 	.word	0x0800d4c0

08005204 <json_release_object>:

pkt_err_t json_release_object(pkt_json_t *json){
 8005204:	b510      	push	{r4, lr}
 8005206:	4604      	mov	r4, r0
	if(json->key != NULL) free(json->key);
 8005208:	6800      	ldr	r0, [r0, #0]
 800520a:	b108      	cbz	r0, 8005210 <json_release_object+0xc>
 800520c:	f004 fd68 	bl	8009ce0 <free>
	if(json->value != NULL) free(json->value);
 8005210:	68a0      	ldr	r0, [r4, #8]
 8005212:	b108      	cbz	r0, 8005218 <json_release_object+0x14>
 8005214:	f004 fd64 	bl	8009ce0 <free>
	json->leaf = false;
 8005218:	2000      	movs	r0, #0
 800521a:	7120      	strb	r0, [r4, #4]

	return PKT_ERR_OK;
}
 800521c:	bd10      	pop	{r4, pc}
 800521e:	bf00      	nop

08005220 <parse_packet>:

pkt_err_t parse_packet(char *src, pkt_t *dest){
 8005220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005224:	4688      	mov	r8, r1
 8005226:	b082      	sub	sp, #8
	char *src_cpy = src;
	int cmd_len = 0, data_len = 0;
	char *pvstart;

	/** Get ": " */
	pvstart = strstr(src, ": ");
 8005228:	4924      	ldr	r1, [pc, #144]	; (80052bc <parse_packet+0x9c>)
pkt_err_t parse_packet(char *src, pkt_t *dest){
 800522a:	4605      	mov	r5, r0
	pvstart = strstr(src, ": ");
 800522c:	f005 fcde 	bl	800abec <strstr>
	if(pvstart == NULL){
 8005230:	b318      	cbz	r0, 800527a <parse_packet+0x5a>
		ret = PKT_ERR_FORMAT;
		return ret;
	}

	/** Get command length */
	cmd_len = (int)(pvstart - src_cpy);
 8005232:	1b47      	subs	r7, r0, r5

	/** Assign command string */
	dest->cmd_str = (char *)malloc((cmd_len + 1) * sizeof(char));
 8005234:	4604      	mov	r4, r0
 8005236:	1c78      	adds	r0, r7, #1
 8005238:	f004 fd4a 	bl	8009cd0 <malloc>
 800523c:	4606      	mov	r6, r0
 800523e:	f8c8 0000 	str.w	r0, [r8]
	if(dest->cmd_str == NULL){
 8005242:	b330      	cbz	r0, 8005292 <parse_packet+0x72>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8005244:	4629      	mov	r1, r5
 8005246:	463a      	mov	r2, r7
	dest->cmd_str[cmd_len] = '\0';


	/** Get data */
	pvstart = (char *)(pvstart + 2);
 8005248:	3402      	adds	r4, #2
	dest->cmd_str[cmd_len] = '\0';
 800524a:	2500      	movs	r5, #0
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 800524c:	f004 fd50 	bl	8009cf0 <memcpy>
	dest->cmd_str[cmd_len] = '\0';
 8005250:	55f5      	strb	r5, [r6, r7]
	data_len = strlen(pvstart);
 8005252:	4620      	mov	r0, r4
 8005254:	f7fa ffd6 	bl	8000204 <strlen>
 8005258:	4606      	mov	r6, r0
	dest->data_str = (char *)malloc((data_len + 1) * sizeof(char));
 800525a:	3001      	adds	r0, #1
 800525c:	f004 fd38 	bl	8009cd0 <malloc>
 8005260:	4607      	mov	r7, r0
 8005262:	f8c8 0004 	str.w	r0, [r8, #4]
	if(dest->data_str == NULL){
 8005266:	b1f0      	cbz	r0, 80052a6 <parse_packet+0x86>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->data_str, pvstart, data_len);
 8005268:	4621      	mov	r1, r4
 800526a:	4632      	mov	r2, r6
 800526c:	f004 fd40 	bl	8009cf0 <memcpy>
	dest->data_str[data_len] = '\0';
 8005270:	55bd      	strb	r5, [r7, r6]

	return ret;
 8005272:	4628      	mov	r0, r5
}
 8005274:	b002      	add	sp, #8
 8005276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800527a:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <parse_packet+0xa0>)
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	4a11      	ldr	r2, [pc, #68]	; (80052c4 <parse_packet+0xa4>)
 8005280:	4911      	ldr	r1, [pc, #68]	; (80052c8 <parse_packet+0xa8>)
 8005282:	4812      	ldr	r0, [pc, #72]	; (80052cc <parse_packet+0xac>)
 8005284:	239a      	movs	r3, #154	; 0x9a
 8005286:	f004 f96f 	bl	8009568 <LOG_DEBUG>
		return ret;
 800528a:	2002      	movs	r0, #2
}
 800528c:	b002      	add	sp, #8
 800528e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005292:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <parse_packet+0xa0>)
 8005294:	480d      	ldr	r0, [pc, #52]	; (80052cc <parse_packet+0xac>)
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	4a0d      	ldr	r2, [pc, #52]	; (80052d0 <parse_packet+0xb0>)
 800529a:	490b      	ldr	r1, [pc, #44]	; (80052c8 <parse_packet+0xa8>)
 800529c:	23a5      	movs	r3, #165	; 0xa5
 800529e:	f004 f963 	bl	8009568 <LOG_DEBUG>
		return ret;
 80052a2:	2010      	movs	r0, #16
 80052a4:	e7e6      	b.n	8005274 <parse_packet+0x54>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <parse_packet+0xa0>)
 80052a8:	4808      	ldr	r0, [pc, #32]	; (80052cc <parse_packet+0xac>)
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	4a08      	ldr	r2, [pc, #32]	; (80052d0 <parse_packet+0xb0>)
 80052ae:	4906      	ldr	r1, [pc, #24]	; (80052c8 <parse_packet+0xa8>)
 80052b0:	23b2      	movs	r3, #178	; 0xb2
 80052b2:	f004 f959 	bl	8009568 <LOG_DEBUG>
		return ret;
 80052b6:	2010      	movs	r0, #16
 80052b8:	e7dc      	b.n	8005274 <parse_packet+0x54>
 80052ba:	bf00      	nop
 80052bc:	0800d4f4 	.word	0x0800d4f4
 80052c0:	0800d50c 	.word	0x0800d50c
 80052c4:	0800d4f8 	.word	0x0800d4f8
 80052c8:	0800d0bc 	.word	0x0800d0bc
 80052cc:	0800d440 	.word	0x0800d440
 80052d0:	0800d4c0 	.word	0x0800d4c0

080052d4 <release_packet>:

pkt_err_t release_packet(pkt_t *packet){
 80052d4:	b510      	push	{r4, lr}
 80052d6:	4604      	mov	r4, r0
	if(packet->cmd_str != NULL) free(packet->cmd_str);
 80052d8:	6800      	ldr	r0, [r0, #0]
 80052da:	b108      	cbz	r0, 80052e0 <release_packet+0xc>
 80052dc:	f004 fd00 	bl	8009ce0 <free>
	if(packet->data_str != NULL) free(packet->data_str);
 80052e0:	6860      	ldr	r0, [r4, #4]
 80052e2:	b108      	cbz	r0, 80052e8 <release_packet+0x14>
 80052e4:	f004 fcfc 	bl	8009ce0 <free>

	return PKT_ERR_OK;
}
 80052e8:	2000      	movs	r0, #0
 80052ea:	bd10      	pop	{r4, pc}

080052ec <str_to_cmd>:

int str_to_cmd(char *str, const char *cmd_list[], int max){
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int cmd = 0;

	for(int i=0; i<(int)max; i++){
 80052ee:	1e16      	subs	r6, r2, #0
 80052f0:	dd0f      	ble.n	8005312 <str_to_cmd+0x26>
 80052f2:	4607      	mov	r7, r0
 80052f4:	1f0d      	subs	r5, r1, #4
 80052f6:	2400      	movs	r4, #0
 80052f8:	e002      	b.n	8005300 <str_to_cmd+0x14>
 80052fa:	3401      	adds	r4, #1
 80052fc:	42a6      	cmp	r6, r4
 80052fe:	d008      	beq.n	8005312 <str_to_cmd+0x26>
		if(strcmp(str, cmd_list[i]) == 0){
 8005300:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005304:	4638      	mov	r0, r7
 8005306:	f7fa ff73 	bl	80001f0 <strcmp>
 800530a:	2800      	cmp	r0, #0
 800530c:	d1f5      	bne.n	80052fa <str_to_cmd+0xe>
			return cmd;
		}
	}

	return cmd;
}
 800530e:	4620      	mov	r0, r4
 8005310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return cmd;
 8005312:	2400      	movs	r4, #0
}
 8005314:	4620      	mov	r0, r4
 8005316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005318 <cmd_to_str>:

char *cmd_to_str(int cmd, const char *cmd_list[]){
	return (char *)cmd_list[cmd];
}
 8005318:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop

08005320 <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>:



sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
	_csport = csport;
	_rstport = rstport;
 8005320:	e9c0 1303 	strd	r1, r3, [r0, #12]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 8005324:	2300      	movs	r3, #0
 8005326:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800532a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 800532e:	f8bd 3000 	ldrh.w	r3, [sp]
	_itport = itport;

	_cs = cspin;
 8005332:	8082      	strh	r2, [r0, #4]
	_rst = rstpin;
 8005334:	80c3      	strh	r3, [r0, #6]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 8005336:	9a01      	ldr	r2, [sp, #4]
 8005338:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	_itport = itport;
 800533c:	6142      	str	r2, [r0, #20]
	_it = itpin;
 800533e:	8103      	strh	r3, [r0, #8]
}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop

08005344 <_ZN6sx127x4initEP3spilhm>:

bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 8005344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005348:	4604      	mov	r4, r0
 800534a:	b086      	sub	sp, #24
	_spi = spi;

	gpio_port_clock_enable(_csport);
 800534c:	68c0      	ldr	r0, [r0, #12]
	_spi = spi;
 800534e:	6021      	str	r1, [r4, #0]
bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 8005350:	4698      	mov	r8, r3
 8005352:	4691      	mov	r9, r2
	gpio_port_clock_enable(_csport);
 8005354:	f001 fd96 	bl	8006e84 <gpio_port_clock_enable>
	gpio_port_clock_enable(_rstport);
 8005358:	6920      	ldr	r0, [r4, #16]
 800535a:	f001 fd93 	bl	8006e84 <gpio_port_clock_enable>
	gpio_port_clock_enable(_itport);
 800535e:	6960      	ldr	r0, [r4, #20]
 8005360:	f001 fd90 	bl	8006e84 <gpio_port_clock_enable>

	gpio_set_mode(_csport, _cs, GPIO_OUTPUT_PUSHPULL);
 8005364:	2206      	movs	r2, #6
 8005366:	88a1      	ldrh	r1, [r4, #4]
 8005368:	68e0      	ldr	r0, [r4, #12]
 800536a:	f001 fdf1 	bl	8006f50 <gpio_set_mode>
	gpio_set(_csport, _cs);
 800536e:	88a1      	ldrh	r1, [r4, #4]
 8005370:	68e0      	ldr	r0, [r4, #12]
 8005372:	f001 fec5 	bl	8007100 <gpio_set>

	gpio_set_mode(_rstport, _rst, GPIO_OUTPUT_PUSHPULL);
 8005376:	2206      	movs	r2, #6
 8005378:	88e1      	ldrh	r1, [r4, #6]
 800537a:	6920      	ldr	r0, [r4, #16]
 800537c:	f001 fde8 	bl	8006f50 <gpio_set_mode>
	gpio_reset(_rstport, _rst);
 8005380:	88e1      	ldrh	r1, [r4, #6]
 8005382:	6920      	ldr	r0, [r4, #16]
 8005384:	f001 fec4 	bl	8007110 <gpio_reset>
    delay_ms(50);
 8005388:	2032      	movs	r0, #50	; 0x32
 800538a:	f002 ff9f 	bl	80082cc <delay_ms>
    gpio_set(_rstport, _rst);
 800538e:	88e1      	ldrh	r1, [r4, #6]
 8005390:	6920      	ldr	r0, [r4, #16]
 8005392:	f001 feb5 	bl	8007100 <gpio_set>
    delay_ms(50);
 8005396:	2032      	movs	r0, #50	; 0x32
 8005398:	f002 ff98 	bl	80082cc <delay_ms>

    if(_it >= 0 && _itport != NULL){
 800539c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80053a0:	2a00      	cmp	r2, #0
 80053a2:	db0e      	blt.n	80053c2 <_ZN6sx127x4initEP3spilhm+0x7e>
 80053a4:	6961      	ldr	r1, [r4, #20]
 80053a6:	b161      	cbz	r1, 80053c2 <_ZN6sx127x4initEP3spilhm+0x7e>
		exti_init(_itport, _it, EXTI_RISING_EDGE, interruptpriority);
 80053a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	ad04      	add	r5, sp, #16
 80053ae:	4628      	mov	r0, r5
 80053b0:	b292      	uxth	r2, r2
 80053b2:	2301      	movs	r3, #1
 80053b4:	f001 f8a4 	bl	8006500 <exti_init>
		gpio_set_pulldown(_itport, _it);
 80053b8:	8921      	ldrh	r1, [r4, #8]
 80053ba:	6960      	ldr	r0, [r4, #20]
 80053bc:	f001 fe92 	bl	80070e4 <gpio_set_pulldown>
 80053c0:	e000      	b.n	80053c4 <_ZN6sx127x4initEP3spilhm+0x80>
 80053c2:	ad04      	add	r5, sp, #16
}

uint8_t sx127x::singleTransfer(uint8_t address, uint8_t value){
  uint8_t response, txdt;

  gpio_reset(_csport, _cs);
 80053c4:	88a1      	ldrh	r1, [r4, #4]
 80053c6:	68e0      	ldr	r0, [r4, #12]
 80053c8:	f001 fea2 	bl	8007110 <gpio_reset>

  txdt = address;
 80053cc:	2342      	movs	r3, #66	; 0x42
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053ce:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80053d0:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053d4:	f10d 020f 	add.w	r2, sp, #15
 80053d8:	2301      	movs	r3, #1
 80053da:	4628      	mov	r0, r5
  txdt = value;
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053dc:	2601      	movs	r6, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053de:	f002 fab7 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053e2:	9600      	str	r6, [sp, #0]
 80053e4:	f10d 030e 	add.w	r3, sp, #14
 80053e8:	6821      	ldr	r1, [r4, #0]
 80053ea:	f10d 020f 	add.w	r2, sp, #15
 80053ee:	4628      	mov	r0, r5
  txdt = value;
 80053f0:	2700      	movs	r7, #0
 80053f2:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053f6:	f002 fb57 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>

  gpio_set(_csport, _cs);
 80053fa:	88a1      	ldrh	r1, [r4, #4]
 80053fc:	68e0      	ldr	r0, [r4, #12]
 80053fe:	f001 fe7f 	bl	8007100 <gpio_set>

  return response;
 8005402:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if(version != 0x12) return false;
 8005406:	2b12      	cmp	r3, #18
 8005408:	d003      	beq.n	8005412 <_ZN6sx127x4initEP3spilhm+0xce>
 800540a:	4638      	mov	r0, r7
}
 800540c:	b006      	add	sp, #24
 800540e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  gpio_reset(_csport, _cs);
 8005412:	88a1      	ldrh	r1, [r4, #4]
 8005414:	68e0      	ldr	r0, [r4, #12]
 8005416:	f001 fe7b 	bl	8007110 <gpio_reset>
  txdt = address;
 800541a:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 800541e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005420:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005424:	4633      	mov	r3, r6
 8005426:	f10d 020f 	add.w	r2, sp, #15
 800542a:	4628      	mov	r0, r5
 800542c:	f002 fa90 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005430:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005432:	f04f 0c80 	mov.w	ip, #128	; 0x80
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005436:	f10d 030e 	add.w	r3, sp, #14
 800543a:	f10d 020f 	add.w	r2, sp, #15
 800543e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005440:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005444:	4628      	mov	r0, r5
 8005446:	f002 fb2f 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800544a:	88a1      	ldrh	r1, [r4, #4]
 800544c:	68e0      	ldr	r0, [r4, #12]
 800544e:	f001 fe57 	bl	8007100 <gpio_set>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8005452:	ea4f 71e9 	mov.w	r1, r9, asr #31
 8005456:	04c9      	lsls	r1, r1, #19
 8005458:	4a9e      	ldr	r2, [pc, #632]	; (80056d4 <_ZN6sx127x4initEP3spilhm+0x390>)
	_frequency = frequency;
 800545a:	f8c4 9020 	str.w	r9, [r4, #32]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800545e:	2300      	movs	r3, #0
 8005460:	ea41 3159 	orr.w	r1, r1, r9, lsr #13
 8005464:	ea4f 40c9 	mov.w	r0, r9, lsl #19
 8005468:	f7fb fc2e 	bl	8000cc8 <__aeabi_uldivmod>
  gpio_reset(_csport, _cs);
 800546c:	88a1      	ldrh	r1, [r4, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800546e:	4682      	mov	sl, r0
  gpio_reset(_csport, _cs);
 8005470:	68e0      	ldr	r0, [r4, #12]
 8005472:	f001 fe4d 	bl	8007110 <gpio_reset>
  txdt = address;
 8005476:	f04f 0c86 	mov.w	ip, #134	; 0x86
  _spi -> transmit((uint32_t)(&txdt), 1);
 800547a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800547c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005480:	4633      	mov	r3, r6
 8005482:	f10d 020f 	add.w	r2, sp, #15
 8005486:	4628      	mov	r0, r5
 8005488:	f002 fa62 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800548c:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 800548e:	ea4f 4c1a 	mov.w	ip, sl, lsr #16
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005492:	f10d 030e 	add.w	r3, sp, #14
 8005496:	f10d 020f 	add.w	r2, sp, #15
 800549a:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 800549c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054a0:	4628      	mov	r0, r5
 80054a2:	f002 fb01 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80054a6:	88a1      	ldrh	r1, [r4, #4]
 80054a8:	68e0      	ldr	r0, [r4, #12]
 80054aa:	f001 fe29 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 80054ae:	88a1      	ldrh	r1, [r4, #4]
 80054b0:	68e0      	ldr	r0, [r4, #12]
 80054b2:	f001 fe2d 	bl	8007110 <gpio_reset>
  txdt = address;
 80054b6:	f04f 0987 	mov.w	r9, #135	; 0x87
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054ba:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80054bc:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054c0:	4633      	mov	r3, r6
 80054c2:	f10d 020f 	add.w	r2, sp, #15
 80054c6:	4628      	mov	r0, r5
 80054c8:	f002 fa42 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054cc:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80054ce:	ea4f 2c1a 	mov.w	ip, sl, lsr #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054d2:	f10d 030e 	add.w	r3, sp, #14
 80054d6:	f10d 020f 	add.w	r2, sp, #15
 80054da:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80054dc:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054e0:	4628      	mov	r0, r5
 80054e2:	f002 fae1 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80054e6:	88a1      	ldrh	r1, [r4, #4]
 80054e8:	68e0      	ldr	r0, [r4, #12]
 80054ea:	f001 fe09 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 80054ee:	88a1      	ldrh	r1, [r4, #4]
 80054f0:	68e0      	ldr	r0, [r4, #12]
 80054f2:	f001 fe0d 	bl	8007110 <gpio_reset>
  txdt = address;
 80054f6:	f04f 0c88 	mov.w	ip, #136	; 0x88
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054fa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80054fc:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005500:	4633      	mov	r3, r6
 8005502:	f10d 020f 	add.w	r2, sp, #15
 8005506:	4628      	mov	r0, r5
 8005508:	f002 fa22 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800550c:	9600      	str	r6, [sp, #0]
 800550e:	f10d 030e 	add.w	r3, sp, #14
 8005512:	f10d 020f 	add.w	r2, sp, #15
 8005516:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8005518:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800551c:	4628      	mov	r0, r5
 800551e:	f002 fac3 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005522:	88a1      	ldrh	r1, [r4, #4]
 8005524:	68e0      	ldr	r0, [r4, #12]
 8005526:	f001 fdeb 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 800552a:	88a1      	ldrh	r1, [r4, #4]
 800552c:	68e0      	ldr	r0, [r4, #12]
 800552e:	f001 fdef 	bl	8007110 <gpio_reset>
  txdt = address;
 8005532:	f04f 0c8e 	mov.w	ip, #142	; 0x8e
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005536:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005538:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800553c:	4633      	mov	r3, r6
 800553e:	f10d 020f 	add.w	r2, sp, #15
 8005542:	4628      	mov	r0, r5
 8005544:	f002 fa04 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005548:	9600      	str	r6, [sp, #0]
 800554a:	f10d 030e 	add.w	r3, sp, #14
 800554e:	f10d 020f 	add.w	r2, sp, #15
 8005552:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005554:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005558:	4628      	mov	r0, r5
 800555a:	f002 faa5 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800555e:	88a1      	ldrh	r1, [r4, #4]
 8005560:	68e0      	ldr	r0, [r4, #12]
 8005562:	f001 fdcd 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 8005566:	88a1      	ldrh	r1, [r4, #4]
 8005568:	68e0      	ldr	r0, [r4, #12]
 800556a:	f001 fdd1 	bl	8007110 <gpio_reset>
  txdt = address;
 800556e:	f04f 0c8f 	mov.w	ip, #143	; 0x8f
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005572:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005574:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005578:	4633      	mov	r3, r6
 800557a:	f10d 020f 	add.w	r2, sp, #15
 800557e:	4628      	mov	r0, r5
 8005580:	f002 f9e6 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005584:	9600      	str	r6, [sp, #0]
 8005586:	f10d 030e 	add.w	r3, sp, #14
 800558a:	f10d 020f 	add.w	r2, sp, #15
 800558e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005590:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005594:	4628      	mov	r0, r5
 8005596:	f002 fa87 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800559a:	88a1      	ldrh	r1, [r4, #4]
 800559c:	68e0      	ldr	r0, [r4, #12]
 800559e:	f001 fdaf 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 80055a2:	88a1      	ldrh	r1, [r4, #4]
 80055a4:	68e0      	ldr	r0, [r4, #12]
 80055a6:	f001 fdb3 	bl	8007110 <gpio_reset>
  txdt = address;
 80055aa:	f04f 0c0c 	mov.w	ip, #12
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055ae:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80055b0:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055b4:	4633      	mov	r3, r6
 80055b6:	f10d 020f 	add.w	r2, sp, #15
 80055ba:	4628      	mov	r0, r5
 80055bc:	f002 f9c8 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055c0:	9600      	str	r6, [sp, #0]
 80055c2:	f10d 030e 	add.w	r3, sp, #14
 80055c6:	f10d 020f 	add.w	r2, sp, #15
 80055ca:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80055cc:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055d0:	4628      	mov	r0, r5
 80055d2:	f002 fa69 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055d6:	88a1      	ldrh	r1, [r4, #4]
 80055d8:	68e0      	ldr	r0, [r4, #12]
 80055da:	f001 fd91 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 80055de:	88a1      	ldrh	r1, [r4, #4]
 80055e0:	68e0      	ldr	r0, [r4, #12]
  return response;
 80055e2:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 80055e6:	f001 fd93 	bl	8007110 <gpio_reset>
  txdt = address;
 80055ea:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055ee:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80055f0:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055f4:	4633      	mov	r3, r6
 80055f6:	f10d 020f 	add.w	r2, sp, #15
 80055fa:	4628      	mov	r0, r5
 80055fc:	f002 f9a8 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005600:	9600      	str	r6, [sp, #0]
 8005602:	f10d 030e 	add.w	r3, sp, #14
 8005606:	f10d 020f 	add.w	r2, sp, #15
 800560a:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 800560c:	f047 0703 	orr.w	r7, r7, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005610:	4628      	mov	r0, r5
  txdt = value;
 8005612:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005616:	f002 fa47 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800561a:	88a1      	ldrh	r1, [r4, #4]
 800561c:	68e0      	ldr	r0, [r4, #12]
 800561e:	f001 fd6f 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 8005622:	88a1      	ldrh	r1, [r4, #4]
 8005624:	68e0      	ldr	r0, [r4, #12]
 8005626:	f001 fd73 	bl	8007110 <gpio_reset>
  txdt = address;
 800562a:	27a6      	movs	r7, #166	; 0xa6
  _spi -> transmit((uint32_t)(&txdt), 1);
 800562c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800562e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005632:	4633      	mov	r3, r6
 8005634:	f10d 020f 	add.w	r2, sp, #15
 8005638:	4628      	mov	r0, r5
 800563a:	f002 f989 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800563e:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005640:	2304      	movs	r3, #4
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005642:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005644:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005648:	4628      	mov	r0, r5
 800564a:	f10d 030e 	add.w	r3, sp, #14
 800564e:	f10d 020f 	add.w	r2, sp, #15
 8005652:	f002 fa29 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005656:	88a1      	ldrh	r1, [r4, #4]
 8005658:	68e0      	ldr	r0, [r4, #12]
 800565a:	f001 fd51 	bl	8007100 <gpio_set>
		if(level > 17){
 800565e:	f1b8 0f11 	cmp.w	r8, #17
 8005662:	f200 80c8 	bhi.w	80057f6 <_ZN6sx127x4initEP3spilhm+0x4b2>
			if (level < 2) level = 2;
 8005666:	f1b8 0f02 	cmp.w	r8, #2
  gpio_reset(_csport, _cs);
 800566a:	88a1      	ldrh	r1, [r4, #4]
 800566c:	68e0      	ldr	r0, [r4, #12]
 800566e:	bf38      	it	cc
 8005670:	f04f 0802 	movcc.w	r8, #2
  txdt = address;
 8005674:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 8005676:	f001 fd4b 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800567a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800567c:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005680:	4633      	mov	r3, r6
 8005682:	f10d 020f 	add.w	r2, sp, #15
 8005686:	4628      	mov	r0, r5
 8005688:	f002 f962 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800568c:	9600      	str	r6, [sp, #0]
 800568e:	f10d 030e 	add.w	r3, sp, #14
 8005692:	f10d 020f 	add.w	r2, sp, #15
 8005696:	6821      	ldr	r1, [r4, #0]
 8005698:	4628      	mov	r0, r5
  txdt = value;
 800569a:	2784      	movs	r7, #132	; 0x84
 800569c:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056a0:	f002 fa02 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80056a4:	88a1      	ldrh	r1, [r4, #4]
 80056a6:	68e0      	ldr	r0, [r4, #12]
 80056a8:	f001 fd2a 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 80056ac:	88a1      	ldrh	r1, [r4, #4]
 80056ae:	68e0      	ldr	r0, [r4, #12]
 80056b0:	f001 fd2e 	bl	8007110 <gpio_reset>
  txdt = address;
 80056b4:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056b6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80056b8:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056bc:	4633      	mov	r3, r6
 80056be:	4628      	mov	r0, r5
 80056c0:	f10d 020f 	add.w	r2, sp, #15
 80056c4:	f002 f944 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056c8:	9600      	str	r6, [sp, #0]
 80056ca:	6821      	ldr	r1, [r4, #0]
 80056cc:	4628      	mov	r0, r5
  txdt = value;
 80056ce:	232b      	movs	r3, #43	; 0x2b
 80056d0:	e002      	b.n	80056d8 <_ZN6sx127x4initEP3spilhm+0x394>
 80056d2:	bf00      	nop
 80056d4:	01e84800 	.word	0x01e84800
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056d8:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 80056dc:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056e0:	f10d 030e 	add.w	r3, sp, #14
 80056e4:	f002 f9e0 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80056e8:	88a1      	ldrh	r1, [r4, #4]
 80056ea:	68e0      	ldr	r0, [r4, #12]
 80056ec:	f001 fd08 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 80056f0:	88a1      	ldrh	r1, [r4, #4]
 80056f2:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056f4:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 80056f6:	f001 fd0b 	bl	8007110 <gpio_reset>
  txdt = address;
 80056fa:	2689      	movs	r6, #137	; 0x89
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056fc:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80056fe:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005702:	f10d 020f 	add.w	r2, sp, #15
 8005706:	4628      	mov	r0, r5
 8005708:	2301      	movs	r3, #1
 800570a:	f002 f921 	bl	8007950 <_ZN3spi8transmitEmm>
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 800570e:	f1a8 0802 	sub.w	r8, r8, #2
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005712:	9700      	str	r7, [sp, #0]
 8005714:	f10d 030e 	add.w	r3, sp, #14
 8005718:	f10d 020f 	add.w	r2, sp, #15
 800571c:	6821      	ldr	r1, [r4, #0]
 800571e:	4628      	mov	r0, r5
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8005720:	f068 087f 	orn	r8, r8, #127	; 0x7f
  txdt = value;
 8005724:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005728:	f002 f9be 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800572c:	88a1      	ldrh	r1, [r4, #4]
 800572e:	68e0      	ldr	r0, [r4, #12]
 8005730:	f001 fce6 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 8005734:	88a1      	ldrh	r1, [r4, #4]
 8005736:	68e0      	ldr	r0, [r4, #12]
 8005738:	f001 fcea 	bl	8007110 <gpio_reset>
  txdt = address;
 800573c:	261e      	movs	r6, #30
  _spi -> transmit((uint32_t)(&txdt), 1);
 800573e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005740:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005744:	463b      	mov	r3, r7
 8005746:	f10d 020f 	add.w	r2, sp, #15
 800574a:	4628      	mov	r0, r5
 800574c:	f002 f900 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005750:	9700      	str	r7, [sp, #0]
 8005752:	f10d 030e 	add.w	r3, sp, #14
 8005756:	f10d 020f 	add.w	r2, sp, #15
 800575a:	6821      	ldr	r1, [r4, #0]
 800575c:	4628      	mov	r0, r5
  txdt = value;
 800575e:	2600      	movs	r6, #0
 8005760:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005764:	f002 f9a0 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005768:	88a1      	ldrh	r1, [r4, #4]
 800576a:	68e0      	ldr	r0, [r4, #12]
 800576c:	f001 fcc8 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 8005770:	88a1      	ldrh	r1, [r4, #4]
 8005772:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005774:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8005778:	f001 fcca 	bl	8007110 <gpio_reset>
  txdt = address;
 800577c:	f04f 0c9e 	mov.w	ip, #158	; 0x9e
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005780:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005782:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005786:	463b      	mov	r3, r7
 8005788:	f10d 020f 	add.w	r2, sp, #15
 800578c:	4628      	mov	r0, r5
 800578e:	f002 f8df 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005792:	9700      	str	r7, [sp, #0]
 8005794:	f10d 030e 	add.w	r3, sp, #14
 8005798:	f10d 020f 	add.w	r2, sp, #15
 800579c:	6821      	ldr	r1, [r4, #0]
 800579e:	4628      	mov	r0, r5
	writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 80057a0:	f046 0604 	orr.w	r6, r6, #4
  txdt = value;
 80057a4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057a8:	f002 f97e 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057ac:	88a1      	ldrh	r1, [r4, #4]
 80057ae:	68e0      	ldr	r0, [r4, #12]
 80057b0:	f001 fca6 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 80057b4:	88a1      	ldrh	r1, [r4, #4]
 80057b6:	68e0      	ldr	r0, [r4, #12]
 80057b8:	f001 fcaa 	bl	8007110 <gpio_reset>
  txdt = address;
 80057bc:	2681      	movs	r6, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057be:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80057c0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057c4:	463b      	mov	r3, r7
 80057c6:	f10d 020f 	add.w	r2, sp, #15
 80057ca:	4628      	mov	r0, r5
 80057cc:	f002 f8c0 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057d0:	9700      	str	r7, [sp, #0]
 80057d2:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80057d4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057d8:	f10d 030e 	add.w	r3, sp, #14
 80057dc:	f10d 020f 	add.w	r2, sp, #15
 80057e0:	4628      	mov	r0, r5
 80057e2:	f002 f961 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057e6:	68e0      	ldr	r0, [r4, #12]
 80057e8:	88a1      	ldrh	r1, [r4, #4]
 80057ea:	f001 fc89 	bl	8007100 <gpio_set>
	return true;
 80057ee:	4638      	mov	r0, r7
}
 80057f0:	b006      	add	sp, #24
 80057f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (level > 20) level = 20;
 80057f6:	f1b8 0f14 	cmp.w	r8, #20
  gpio_reset(_csport, _cs);
 80057fa:	88a1      	ldrh	r1, [r4, #4]
 80057fc:	68e0      	ldr	r0, [r4, #12]
 80057fe:	bf28      	it	cs
 8005800:	f04f 0814 	movcs.w	r8, #20
  txdt = address;
 8005804:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 8005806:	f001 fc83 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800580a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800580c:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005810:	4633      	mov	r3, r6
 8005812:	f10d 020f 	add.w	r2, sp, #15
 8005816:	4628      	mov	r0, r5
 8005818:	f002 f89a 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800581c:	9600      	str	r6, [sp, #0]
 800581e:	f10d 030e 	add.w	r3, sp, #14
 8005822:	f10d 020f 	add.w	r2, sp, #15
 8005826:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005828:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800582c:	4628      	mov	r0, r5
 800582e:	f002 f93b 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005832:	88a1      	ldrh	r1, [r4, #4]
 8005834:	68e0      	ldr	r0, [r4, #12]
 8005836:	f001 fc63 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 800583a:	88a1      	ldrh	r1, [r4, #4]
 800583c:	68e0      	ldr	r0, [r4, #12]
 800583e:	f001 fc67 	bl	8007110 <gpio_reset>
  txdt = address;
 8005842:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005844:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005846:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800584a:	4633      	mov	r3, r6
 800584c:	4628      	mov	r0, r5
 800584e:	f10d 020f 	add.w	r2, sp, #15
 8005852:	f002 f87d 	bl	8007950 <_ZN3spi8transmitEmm>
			level -= 3;
 8005856:	f1a8 0803 	sub.w	r8, r8, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800585a:	9600      	str	r6, [sp, #0]
 800585c:	6821      	ldr	r1, [r4, #0]
			level -= 3;
 800585e:	fa5f f888 	uxtb.w	r8, r8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005862:	4628      	mov	r0, r5
  txdt = value;
 8005864:	2331      	movs	r3, #49	; 0x31
 8005866:	e737      	b.n	80056d8 <_ZN6sx127x4initEP3spilhm+0x394>

08005868 <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>:
	RxDoneHandler = RxHandler;
 8005868:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop

08005870 <_ZN6sx127x11beginPacketEb>:
bool sx127x::beginPacket(bool implicitHeader){
 8005870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005872:	4604      	mov	r4, r0
 8005874:	b087      	sub	sp, #28
  txdt = address;
 8005876:	2601      	movs	r6, #1
  gpio_reset(_csport, _cs);
 8005878:	68c0      	ldr	r0, [r0, #12]
bool sx127x::beginPacket(bool implicitHeader){
 800587a:	460f      	mov	r7, r1
  gpio_reset(_csport, _cs);
 800587c:	88a1      	ldrh	r1, [r4, #4]
 800587e:	f001 fc47 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005882:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005884:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005888:	4633      	mov	r3, r6
 800588a:	f10d 020f 	add.w	r2, sp, #15
 800588e:	a804      	add	r0, sp, #16
 8005890:	f002 f85e 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005894:	9600      	str	r6, [sp, #0]
 8005896:	f10d 030e 	add.w	r3, sp, #14
 800589a:	6821      	ldr	r1, [r4, #0]
 800589c:	f10d 020f 	add.w	r2, sp, #15
 80058a0:	a804      	add	r0, sp, #16
  txdt = value;
 80058a2:	2500      	movs	r5, #0
 80058a4:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058a8:	f002 f8fe 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80058ac:	88a1      	ldrh	r1, [r4, #4]
 80058ae:	68e0      	ldr	r0, [r4, #12]
 80058b0:	f001 fc26 	bl	8007100 <gpio_set>
  return response;
 80058b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) return true;
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	2b03      	cmp	r3, #3
 80058be:	f000 80e1 	beq.w	8005a84 <_ZN6sx127x11beginPacketEb+0x214>
  gpio_reset(_csport, _cs);
 80058c2:	88a1      	ldrh	r1, [r4, #4]
 80058c4:	68e0      	ldr	r0, [r4, #12]
 80058c6:	f001 fc23 	bl	8007110 <gpio_reset>
  txdt = address;
 80058ca:	f04f 0c12 	mov.w	ip, #18
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058ce:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80058d0:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058d4:	4633      	mov	r3, r6
 80058d6:	f10d 020f 	add.w	r2, sp, #15
 80058da:	a804      	add	r0, sp, #16
 80058dc:	f002 f838 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058e0:	9600      	str	r6, [sp, #0]
 80058e2:	f10d 030e 	add.w	r3, sp, #14
 80058e6:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80058e8:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058ec:	f10d 020f 	add.w	r2, sp, #15
 80058f0:	a804      	add	r0, sp, #16
 80058f2:	f002 f8d9 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80058f6:	88a1      	ldrh	r1, [r4, #4]
 80058f8:	68e0      	ldr	r0, [r4, #12]
 80058fa:	f001 fc01 	bl	8007100 <gpio_set>
  return response;
 80058fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8005902:	071b      	lsls	r3, r3, #28
 8005904:	f100 809f 	bmi.w	8005a46 <_ZN6sx127x11beginPacketEb+0x1d6>
  gpio_reset(_csport, _cs);
 8005908:	88a1      	ldrh	r1, [r4, #4]
 800590a:	68e0      	ldr	r0, [r4, #12]
 800590c:	f001 fc00 	bl	8007110 <gpio_reset>
  txdt = address;
 8005910:	2581      	movs	r5, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005912:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005914:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005918:	2301      	movs	r3, #1
 800591a:	f10d 020f 	add.w	r2, sp, #15
 800591e:	a804      	add	r0, sp, #16
 8005920:	f002 f816 	bl	8007950 <_ZN3spi8transmitEmm>
  txdt = value;
 8005924:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005928:	2501      	movs	r5, #1
 800592a:	9500      	str	r5, [sp, #0]
 800592c:	6821      	ldr	r1, [r4, #0]
 800592e:	a804      	add	r0, sp, #16
 8005930:	f10d 030e 	add.w	r3, sp, #14
 8005934:	f10d 020f 	add.w	r2, sp, #15
 8005938:	f002 f8b6 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800593c:	88a1      	ldrh	r1, [r4, #4]
 800593e:	68e0      	ldr	r0, [r4, #12]
 8005940:	f001 fbde 	bl	8007100 <gpio_set>
	if (implicitHeader) implicitHeaderMode();
 8005944:	2f00      	cmp	r7, #0
 8005946:	f000 80a0 	beq.w	8005a8a <_ZN6sx127x11beginPacketEb+0x21a>
  gpio_reset(_csport, _cs);
 800594a:	88a1      	ldrh	r1, [r4, #4]
 800594c:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 800594e:	61e5      	str	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 8005950:	f001 fbde 	bl	8007110 <gpio_reset>
  txdt = address;
 8005954:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005956:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005958:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800595c:	462b      	mov	r3, r5
 800595e:	f10d 020f 	add.w	r2, sp, #15
 8005962:	a804      	add	r0, sp, #16
 8005964:	f001 fff4 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005968:	9500      	str	r5, [sp, #0]
 800596a:	f10d 030e 	add.w	r3, sp, #14
 800596e:	f10d 020f 	add.w	r2, sp, #15
 8005972:	6821      	ldr	r1, [r4, #0]
 8005974:	a804      	add	r0, sp, #16
  txdt = value;
 8005976:	2600      	movs	r6, #0
 8005978:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800597c:	f002 f894 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005980:	88a1      	ldrh	r1, [r4, #4]
 8005982:	68e0      	ldr	r0, [r4, #12]
 8005984:	f001 fbbc 	bl	8007100 <gpio_set>
  return response;
 8005988:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 800598c:	88a1      	ldrh	r1, [r4, #4]
 800598e:	68e0      	ldr	r0, [r4, #12]
 8005990:	f001 fbbe 	bl	8007110 <gpio_reset>
  txdt = address;
 8005994:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005996:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005998:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800599c:	462b      	mov	r3, r5
 800599e:	f10d 020f 	add.w	r2, sp, #15
 80059a2:	a804      	add	r0, sp, #16
 80059a4:	f001 ffd4 	bl	8007950 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80059a8:	432e      	orrs	r6, r5
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059aa:	9500      	str	r5, [sp, #0]
 80059ac:	f10d 030e 	add.w	r3, sp, #14
 80059b0:	f10d 020f 	add.w	r2, sp, #15
 80059b4:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80059b6:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059ba:	a804      	add	r0, sp, #16
 80059bc:	f002 f874 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80059c0:	88a1      	ldrh	r1, [r4, #4]
 80059c2:	68e0      	ldr	r0, [r4, #12]
 80059c4:	f001 fb9c 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 80059c8:	88a1      	ldrh	r1, [r4, #4]
 80059ca:	68e0      	ldr	r0, [r4, #12]
 80059cc:	f001 fba0 	bl	8007110 <gpio_reset>
  txdt = address;
 80059d0:	238d      	movs	r3, #141	; 0x8d
 80059d2:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059d6:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059d8:	461d      	mov	r5, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059da:	6821      	ldr	r1, [r4, #0]
 80059dc:	f10d 020f 	add.w	r2, sp, #15
 80059e0:	a804      	add	r0, sp, #16
 80059e2:	f001 ffb5 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059e6:	9500      	str	r5, [sp, #0]
 80059e8:	f10d 030e 	add.w	r3, sp, #14
 80059ec:	f10d 020f 	add.w	r2, sp, #15
 80059f0:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80059f2:	2600      	movs	r6, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059f4:	a804      	add	r0, sp, #16
  txdt = value;
 80059f6:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059fa:	f002 f855 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80059fe:	88a1      	ldrh	r1, [r4, #4]
 8005a00:	68e0      	ldr	r0, [r4, #12]
 8005a02:	f001 fb7d 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 8005a06:	88a1      	ldrh	r1, [r4, #4]
 8005a08:	68e0      	ldr	r0, [r4, #12]
 8005a0a:	f001 fb81 	bl	8007110 <gpio_reset>
  txdt = address;
 8005a0e:	27a2      	movs	r7, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a10:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a12:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a16:	462b      	mov	r3, r5
 8005a18:	f10d 020f 	add.w	r2, sp, #15
 8005a1c:	a804      	add	r0, sp, #16
 8005a1e:	f001 ff97 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a22:	9500      	str	r5, [sp, #0]
 8005a24:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005a26:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a2a:	f10d 030e 	add.w	r3, sp, #14
 8005a2e:	f10d 020f 	add.w	r2, sp, #15
 8005a32:	a804      	add	r0, sp, #16
 8005a34:	f002 f838 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a38:	68e0      	ldr	r0, [r4, #12]
 8005a3a:	88a1      	ldrh	r1, [r4, #4]
 8005a3c:	f001 fb60 	bl	8007100 <gpio_set>
	return true;
 8005a40:	4628      	mov	r0, r5
}
 8005a42:	b007      	add	sp, #28
 8005a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 8005a46:	88a1      	ldrh	r1, [r4, #4]
 8005a48:	68e0      	ldr	r0, [r4, #12]
 8005a4a:	f001 fb61 	bl	8007110 <gpio_reset>
  txdt = address;
 8005a4e:	2592      	movs	r5, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a50:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a52:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a56:	4633      	mov	r3, r6
 8005a58:	f10d 020f 	add.w	r2, sp, #15
 8005a5c:	a804      	add	r0, sp, #16
 8005a5e:	f001 ff77 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a62:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005a64:	2308      	movs	r3, #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a66:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005a68:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a6c:	a804      	add	r0, sp, #16
 8005a6e:	f10d 030e 	add.w	r3, sp, #14
 8005a72:	f10d 020f 	add.w	r2, sp, #15
 8005a76:	f002 f817 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a7a:	88a1      	ldrh	r1, [r4, #4]
 8005a7c:	68e0      	ldr	r0, [r4, #12]
 8005a7e:	f001 fb3f 	bl	8007100 <gpio_set>
  return response;
 8005a82:	e741      	b.n	8005908 <_ZN6sx127x11beginPacketEb+0x98>
	if (isTransmitting()) return false;
 8005a84:	4628      	mov	r0, r5
}
 8005a86:	b007      	add	sp, #28
 8005a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 8005a8a:	88a1      	ldrh	r1, [r4, #4]
 8005a8c:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 8005a8e:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 8005a90:	f001 fb3e 	bl	8007110 <gpio_reset>
  txdt = address;
 8005a94:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a96:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a98:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	f10d 020f 	add.w	r2, sp, #15
 8005aa2:	a804      	add	r0, sp, #16
 8005aa4:	f001 ff54 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005aa8:	9500      	str	r5, [sp, #0]
 8005aaa:	f10d 030e 	add.w	r3, sp, #14
 8005aae:	f10d 020f 	add.w	r2, sp, #15
 8005ab2:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005ab4:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ab8:	a804      	add	r0, sp, #16
 8005aba:	f001 fff5 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005abe:	88a1      	ldrh	r1, [r4, #4]
 8005ac0:	68e0      	ldr	r0, [r4, #12]
 8005ac2:	f001 fb1d 	bl	8007100 <gpio_set>
  return response;
 8005ac6:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8005aca:	88a1      	ldrh	r1, [r4, #4]
 8005acc:	68e0      	ldr	r0, [r4, #12]
 8005ace:	f001 fb1f 	bl	8007110 <gpio_reset>
  txdt = address;
 8005ad2:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ad4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ad6:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ada:	462b      	mov	r3, r5
 8005adc:	f10d 020f 	add.w	r2, sp, #15
 8005ae0:	a804      	add	r0, sp, #16
 8005ae2:	f001 ff35 	bl	8007950 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8005ae6:	f026 0601 	bic.w	r6, r6, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005aea:	9500      	str	r5, [sp, #0]
 8005aec:	e75e      	b.n	80059ac <_ZN6sx127x11beginPacketEb+0x13c>
 8005aee:	bf00      	nop

08005af0 <_ZN6sx127x9endPacketEb>:
bool sx127x::endPacket(bool async){
 8005af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af4:	4604      	mov	r4, r0
 8005af6:	b086      	sub	sp, #24
	if(async && (TxDoneHandler)) writeRegister(REG_DIO_MAPPING_1, 0x40);
 8005af8:	460f      	mov	r7, r1
 8005afa:	b319      	cbz	r1, 8005b44 <_ZN6sx127x9endPacketEb+0x54>
 8005afc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005afe:	b30b      	cbz	r3, 8005b44 <_ZN6sx127x9endPacketEb+0x54>
  gpio_reset(_csport, _cs);
 8005b00:	8881      	ldrh	r1, [r0, #4]
 8005b02:	68c0      	ldr	r0, [r0, #12]
 8005b04:	f001 fb04 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b08:	f10d 050f 	add.w	r5, sp, #15
 8005b0c:	ae04      	add	r6, sp, #16
  txdt = address;
 8005b0e:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b10:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005b12:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b16:	462a      	mov	r2, r5
 8005b18:	4630      	mov	r0, r6
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f001 ff18 	bl	8007950 <_ZN3spi8transmitEmm>
  txdt = value;
 8005b20:	2340      	movs	r3, #64	; 0x40
 8005b22:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b26:	2301      	movs	r3, #1
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	f10d 080e 	add.w	r8, sp, #14
 8005b2e:	6821      	ldr	r1, [r4, #0]
 8005b30:	4630      	mov	r0, r6
 8005b32:	4643      	mov	r3, r8
 8005b34:	462a      	mov	r2, r5
 8005b36:	f001 ffb7 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005b3a:	88a1      	ldrh	r1, [r4, #4]
 8005b3c:	68e0      	ldr	r0, [r4, #12]
 8005b3e:	f001 fadf 	bl	8007100 <gpio_set>
  return response;
 8005b42:	e004      	b.n	8005b4e <_ZN6sx127x9endPacketEb+0x5e>
 8005b44:	f10d 050f 	add.w	r5, sp, #15
 8005b48:	ae04      	add	r6, sp, #16
 8005b4a:	f10d 080e 	add.w	r8, sp, #14
  gpio_reset(_csport, _cs);
 8005b4e:	88a1      	ldrh	r1, [r4, #4]
 8005b50:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b52:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005b56:	f001 fadb 	bl	8007110 <gpio_reset>
  txdt = address;
 8005b5a:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b5e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005b60:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b64:	464b      	mov	r3, r9
 8005b66:	462a      	mov	r2, r5
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f001 fef1 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b6e:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 8005b72:	2383      	movs	r3, #131	; 0x83
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b74:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005b76:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	4643      	mov	r3, r8
 8005b7e:	462a      	mov	r2, r5
 8005b80:	f001 ff92 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005b84:	88a1      	ldrh	r1, [r4, #4]
 8005b86:	68e0      	ldr	r0, [r4, #12]
 8005b88:	f001 faba 	bl	8007100 <gpio_set>
	if(!async){
 8005b8c:	2f00      	cmp	r7, #0
 8005b8e:	d13b      	bne.n	8005c08 <_ZN6sx127x9endPacketEb+0x118>
  txdt = address;
 8005b90:	f04f 0a12 	mov.w	sl, #18
  gpio_reset(_csport, _cs);
 8005b94:	88a1      	ldrh	r1, [r4, #4]
 8005b96:	68e0      	ldr	r0, [r4, #12]
 8005b98:	f001 faba 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b9c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005b9e:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f001 fed2 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bac:	6821      	ldr	r1, [r4, #0]
 8005bae:	f8cd 9000 	str.w	r9, [sp]
 8005bb2:	4643      	mov	r3, r8
 8005bb4:	462a      	mov	r2, r5
 8005bb6:	4630      	mov	r0, r6
  txdt = value;
 8005bb8:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bbc:	f001 ff74 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005bc0:	88a1      	ldrh	r1, [r4, #4]
 8005bc2:	68e0      	ldr	r0, [r4, #12]
 8005bc4:	f001 fa9c 	bl	8007100 <gpio_set>
  return response;
 8005bc8:	f89d 300e 	ldrb.w	r3, [sp, #14]
		while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0);
 8005bcc:	071b      	lsls	r3, r3, #28
 8005bce:	d5e1      	bpl.n	8005b94 <_ZN6sx127x9endPacketEb+0xa4>
  gpio_reset(_csport, _cs);
 8005bd0:	88a1      	ldrh	r1, [r4, #4]
 8005bd2:	68e0      	ldr	r0, [r4, #12]
 8005bd4:	f001 fa9c 	bl	8007110 <gpio_reset>
  txdt = address;
 8005bd8:	2792      	movs	r7, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005bda:	462a      	mov	r2, r5
 8005bdc:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005bde:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005be2:	2301      	movs	r3, #1
 8005be4:	4630      	mov	r0, r6
 8005be6:	f001 feb3 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bea:	f8cd 9000 	str.w	r9, [sp]
 8005bee:	6821      	ldr	r1, [r4, #0]
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	4643      	mov	r3, r8
  txdt = value;
 8005bf6:	2508      	movs	r5, #8
 8005bf8:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bfc:	f001 ff54 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005c00:	88a1      	ldrh	r1, [r4, #4]
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	f001 fa7c 	bl	8007100 <gpio_set>
}
 8005c08:	2001      	movs	r0, #1
 8005c0a:	b006      	add	sp, #24
 8005c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005c10 <_ZN6sx127x10packetRssiEv>:
int sx127x::packetRssi(void){
 8005c10:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 8005c12:	8881      	ldrh	r1, [r0, #4]
int sx127x::packetRssi(void){
 8005c14:	b087      	sub	sp, #28
 8005c16:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005c18:	68c0      	ldr	r0, [r0, #12]
 8005c1a:	f001 fa79 	bl	8007110 <gpio_reset>
  txdt = address;
 8005c1e:	231a      	movs	r3, #26
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c20:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005c22:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c26:	f10d 020f 	add.w	r2, sp, #15
 8005c2a:	a804      	add	r0, sp, #16
 8005c2c:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c2e:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c30:	f001 fe8e 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c34:	6821      	ldr	r1, [r4, #0]
 8005c36:	9500      	str	r5, [sp, #0]
 8005c38:	f10d 030e 	add.w	r3, sp, #14
 8005c3c:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005c40:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c44:	a804      	add	r0, sp, #16
  txdt = value;
 8005c46:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c4a:	f001 ff2d 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005c4e:	68e0      	ldr	r0, [r4, #12]
 8005c50:	88a1      	ldrh	r1, [r4, #4]
 8005c52:	f001 fa55 	bl	8007100 <gpio_set>
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005c56:	4a05      	ldr	r2, [pc, #20]	; (8005c6c <_ZN6sx127x10packetRssiEv+0x5c>)
 8005c58:	6a23      	ldr	r3, [r4, #32]
  return response;
 8005c5a:	f89d 000e 	ldrb.w	r0, [sp, #14]
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	bfd4      	ite	le
 8005c62:	23a4      	movle	r3, #164	; 0xa4
 8005c64:	239d      	movgt	r3, #157	; 0x9d
}
 8005c66:	1ac0      	subs	r0, r0, r3
 8005c68:	b007      	add	sp, #28
 8005c6a:	bd30      	pop	{r4, r5, pc}
 8005c6c:	1f4add3f 	.word	0x1f4add3f

08005c70 <_ZN6sx127x9packetSnrEv>:
float sx127x::packetSnr(void){
 8005c70:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 8005c72:	8881      	ldrh	r1, [r0, #4]
float sx127x::packetSnr(void){
 8005c74:	b087      	sub	sp, #28
 8005c76:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005c78:	68c0      	ldr	r0, [r0, #12]
 8005c7a:	f001 fa49 	bl	8007110 <gpio_reset>
  txdt = address;
 8005c7e:	2319      	movs	r3, #25
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c80:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005c82:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c86:	f10d 020f 	add.w	r2, sp, #15
 8005c8a:	a804      	add	r0, sp, #16
 8005c8c:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c8e:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c90:	f001 fe5e 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c94:	9500      	str	r5, [sp, #0]
  txdt = value;
 8005c96:	2100      	movs	r1, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c98:	f10d 030e 	add.w	r3, sp, #14
 8005c9c:	f10d 020f 	add.w	r2, sp, #15
 8005ca0:	a804      	add	r0, sp, #16
  txdt = value;
 8005ca2:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ca6:	6821      	ldr	r1, [r4, #0]
 8005ca8:	f001 fefe 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005cac:	88a1      	ldrh	r1, [r4, #4]
 8005cae:	68e0      	ldr	r0, [r4, #12]
 8005cb0:	f001 fa26 	bl	8007100 <gpio_set>
	return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
 8005cb4:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 8005cb8:	f7fa fc54 	bl	8000564 <__aeabi_i2d>
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <_ZN6sx127x9packetSnrEv+0x60>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f7fa fcba 	bl	8000638 <__aeabi_dmul>
 8005cc4:	f7fa ffb0 	bl	8000c28 <__aeabi_d2f>
}
 8005cc8:	ee00 0a10 	vmov	s0, r0
 8005ccc:	b007      	add	sp, #28
 8005cce:	bd30      	pop	{r4, r5, pc}
 8005cd0:	3fd00000 	.word	0x3fd00000

08005cd4 <_ZN6sx127x4rssiEv>:
int16_t sx127x::rssi(void){
 8005cd4:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 8005cd6:	8881      	ldrh	r1, [r0, #4]
int16_t sx127x::rssi(void){
 8005cd8:	b087      	sub	sp, #28
 8005cda:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005cdc:	68c0      	ldr	r0, [r0, #12]
 8005cde:	f001 fa17 	bl	8007110 <gpio_reset>
  txdt = address;
 8005ce2:	231b      	movs	r3, #27
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ce4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ce6:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005cea:	f10d 020f 	add.w	r2, sp, #15
 8005cee:	a804      	add	r0, sp, #16
 8005cf0:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005cf2:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005cf4:	f001 fe2c 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005cf8:	6821      	ldr	r1, [r4, #0]
 8005cfa:	9500      	str	r5, [sp, #0]
 8005cfc:	f10d 030e 	add.w	r3, sp, #14
 8005d00:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005d04:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d08:	a804      	add	r0, sp, #16
  txdt = value;
 8005d0a:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d0e:	f001 fecb 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d12:	68e0      	ldr	r0, [r4, #12]
 8005d14:	88a1      	ldrh	r1, [r4, #4]
 8005d16:	f001 f9f3 	bl	8007100 <gpio_set>
    return (readRegister(REG_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005d1a:	4a05      	ldr	r2, [pc, #20]	; (8005d30 <_ZN6sx127x4rssiEv+0x5c>)
 8005d1c:	6a23      	ldr	r3, [r4, #32]
 8005d1e:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8005d22:	4293      	cmp	r3, r2
 8005d24:	bfd4      	ite	le
 8005d26:	23a4      	movle	r3, #164	; 0xa4
 8005d28:	239d      	movgt	r3, #157	; 0x9d
}
 8005d2a:	1ac0      	subs	r0, r0, r3
 8005d2c:	b007      	add	sp, #28
 8005d2e:	bd30      	pop	{r4, r5, pc}
 8005d30:	1f4add3f 	.word	0x1f4add3f

08005d34 <_ZN6sx127x8transmitEPKhj>:
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	4604      	mov	r4, r0
 8005d3a:	b087      	sub	sp, #28
  gpio_reset(_csport, _cs);
 8005d3c:	68c0      	ldr	r0, [r0, #12]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005d3e:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005d40:	88a1      	ldrh	r1, [r4, #4]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005d42:	4691      	mov	r9, r2
  gpio_reset(_csport, _cs);
 8005d44:	f001 f9e4 	bl	8007110 <gpio_reset>
  txdt = address;
 8005d48:	2322      	movs	r3, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d4a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d4c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d50:	f10d 020f 	add.w	r2, sp, #15
 8005d54:	2301      	movs	r3, #1
 8005d56:	a804      	add	r0, sp, #16
 8005d58:	f001 fdfa 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	6821      	ldr	r1, [r4, #0]
 8005d62:	f10d 030e 	add.w	r3, sp, #14
 8005d66:	f10d 020f 	add.w	r2, sp, #15
 8005d6a:	a804      	add	r0, sp, #16
  txdt = value;
 8005d6c:	2600      	movs	r6, #0
 8005d6e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d72:	f001 fe99 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d76:	88a1      	ldrh	r1, [r4, #4]
 8005d78:	68e0      	ldr	r0, [r4, #12]
 8005d7a:	f001 f9c1 	bl	8007100 <gpio_set>
  return response;
 8005d7e:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((currentLength + size) > MAX_PKT_LENGTH) size = MAX_PKT_LENGTH - currentLength;
 8005d82:	eb03 0a09 	add.w	sl, r3, r9
 8005d86:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8005d8a:	bf84      	itt	hi
 8005d8c:	f1c3 09ff 	rsbhi	r9, r3, #255	; 0xff
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005d90:	f04f 0aff 	movhi.w	sl, #255	; 0xff
 8005d94:	f1b9 0f00 	cmp.w	r9, #0
 8005d98:	d025      	beq.n	8005de6 <_ZN6sx127x8transmitEPKhj+0xb2>
 8005d9a:	3d01      	subs	r5, #1
 8005d9c:	eb05 0b09 	add.w	fp, r5, r9
  txdt = address;
 8005da0:	f04f 0880 	mov.w	r8, #128	; 0x80
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005da4:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 8005da6:	88a1      	ldrh	r1, [r4, #4]
 8005da8:	68e0      	ldr	r0, [r4, #12]
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005daa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  gpio_reset(_csport, _cs);
 8005dae:	f001 f9af 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005db2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005db4:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005db8:	2301      	movs	r3, #1
 8005dba:	f10d 020f 	add.w	r2, sp, #15
 8005dbe:	a804      	add	r0, sp, #16
 8005dc0:	f001 fdc6 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005dc4:	6821      	ldr	r1, [r4, #0]
 8005dc6:	9700      	str	r7, [sp, #0]
 8005dc8:	a804      	add	r0, sp, #16
 8005dca:	f10d 030e 	add.w	r3, sp, #14
 8005dce:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005dd2:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005dd6:	f001 fe67 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005dda:	88a1      	ldrh	r1, [r4, #4]
 8005ddc:	68e0      	ldr	r0, [r4, #12]
 8005dde:	f001 f98f 	bl	8007100 <gpio_set>
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005de2:	45ab      	cmp	fp, r5
 8005de4:	d1df      	bne.n	8005da6 <_ZN6sx127x8transmitEPKhj+0x72>
  gpio_reset(_csport, _cs);
 8005de6:	88a1      	ldrh	r1, [r4, #4]
 8005de8:	68e0      	ldr	r0, [r4, #12]
 8005dea:	f001 f991 	bl	8007110 <gpio_reset>
  txdt = address;
 8005dee:	23a2      	movs	r3, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005df0:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005df2:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005df6:	f10d 020f 	add.w	r2, sp, #15
 8005dfa:	a804      	add	r0, sp, #16
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f001 fda7 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e02:	2101      	movs	r1, #1
 8005e04:	9100      	str	r1, [sp, #0]
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	a804      	add	r0, sp, #16
 8005e0a:	f10d 030e 	add.w	r3, sp, #14
 8005e0e:	f10d 020f 	add.w	r2, sp, #15
	writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8005e12:	fa5f fa8a 	uxtb.w	sl, sl
  txdt = value;
 8005e16:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e1a:	f001 fe45 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005e1e:	68e0      	ldr	r0, [r4, #12]
 8005e20:	88a1      	ldrh	r1, [r4, #4]
 8005e22:	f001 f96d 	bl	8007100 <gpio_set>
}
 8005e26:	4648      	mov	r0, r9
 8005e28:	b007      	add	sp, #28
 8005e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2e:	bf00      	nop

08005e30 <_ZN6sx127x7receiveEPc>:
uint8_t sx127x::receive(char *buffer){
 8005e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e34:	2500      	movs	r5, #0
uint8_t sx127x::receive(char *buffer){
 8005e36:	b086      	sub	sp, #24
 8005e38:	4604      	mov	r4, r0
 8005e3a:	4689      	mov	r9, r1
  txdt = address;
 8005e3c:	f04f 0a13 	mov.w	sl, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e40:	2701      	movs	r7, #1
  txdt = value;
 8005e42:	462e      	mov	r6, r5
 8005e44:	e020      	b.n	8005e88 <_ZN6sx127x7receiveEPc+0x58>
  gpio_reset(_csport, _cs);
 8005e46:	88a1      	ldrh	r1, [r4, #4]
 8005e48:	68e0      	ldr	r0, [r4, #12]
		_packetIndex++;
 8005e4a:	61a2      	str	r2, [r4, #24]
  gpio_reset(_csport, _cs);
 8005e4c:	f001 f960 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e50:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005e52:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e56:	2301      	movs	r3, #1
 8005e58:	f10d 020f 	add.w	r2, sp, #15
 8005e5c:	a804      	add	r0, sp, #16
 8005e5e:	f001 fd77 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e62:	6821      	ldr	r1, [r4, #0]
 8005e64:	9700      	str	r7, [sp, #0]
 8005e66:	f10d 030e 	add.w	r3, sp, #14
 8005e6a:	f10d 020f 	add.w	r2, sp, #15
 8005e6e:	a804      	add	r0, sp, #16
  txdt = value;
 8005e70:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e74:	f001 fe18 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005e78:	88a1      	ldrh	r1, [r4, #4]
 8005e7a:	68e0      	ldr	r0, [r4, #12]
 8005e7c:	f001 f940 	bl	8007100 <gpio_set>
  return response;
 8005e80:	f89d 300e 	ldrb.w	r3, [sp, #14]
		buffer[i++] = readRegister(REG_FIFO);
 8005e84:	f809 3008 	strb.w	r3, [r9, r8]
  gpio_reset(_csport, _cs);
 8005e88:	88a1      	ldrh	r1, [r4, #4]
 8005e8a:	68e0      	ldr	r0, [r4, #12]
 8005e8c:	f001 f940 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e90:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005e92:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e96:	f10d 020f 	add.w	r2, sp, #15
 8005e9a:	a804      	add	r0, sp, #16
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f001 fd57 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ea2:	6821      	ldr	r1, [r4, #0]
 8005ea4:	9700      	str	r7, [sp, #0]
 8005ea6:	f10d 030e 	add.w	r3, sp, #14
 8005eaa:	f10d 020f 	add.w	r2, sp, #15
 8005eae:	a804      	add	r0, sp, #16
  txdt = value;
 8005eb0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005eb4:	f001 fdf8 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005eb8:	68e0      	ldr	r0, [r4, #12]
 8005eba:	88a1      	ldrh	r1, [r4, #4]
 8005ebc:	f001 f920 	bl	8007100 <gpio_set>
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005ec0:	69a0      	ldr	r0, [r4, #24]
  return response;
 8005ec2:	f89d 300e 	ldrb.w	r3, [sp, #14]
		_packetIndex++;
 8005ec6:	1c42      	adds	r2, r0, #1
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005ec8:	b2c0      	uxtb	r0, r0
	while(available()){
 8005eca:	4298      	cmp	r0, r3
		buffer[i++] = readRegister(REG_FIFO);
 8005ecc:	fa5f f885 	uxtb.w	r8, r5
	while(available()){
 8005ed0:	f105 0501 	add.w	r5, r5, #1
 8005ed4:	d1b7      	bne.n	8005e46 <_ZN6sx127x7receiveEPc+0x16>
}
 8005ed6:	b006      	add	sp, #24
 8005ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005edc <_ZN6sx127x7ReceiveEh>:
void sx127x::Receive(uint8_t size){
 8005edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005ee0:	6a83      	ldr	r3, [r0, #40]	; 0x28
void sx127x::Receive(uint8_t size){
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	460f      	mov	r7, r1
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80d4 	beq.w	8006096 <_ZN6sx127x7ReceiveEh+0x1ba>
  gpio_reset(_csport, _cs);
 8005eee:	8881      	ldrh	r1, [r0, #4]
 8005ef0:	68c0      	ldr	r0, [r0, #12]
 8005ef2:	f001 f90d 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ef6:	f10d 050f 	add.w	r5, sp, #15
  txdt = address;
 8005efa:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005efc:	ae04      	add	r6, sp, #16
 8005efe:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f00:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f04:	462a      	mov	r2, r5
 8005f06:	2301      	movs	r3, #1
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f001 fd21 	bl	8007950 <_ZN3spi8transmitEmm>
  txdt = value;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f14:	2301      	movs	r3, #1
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	f10d 080e 	add.w	r8, sp, #14
 8005f1c:	6821      	ldr	r1, [r4, #0]
 8005f1e:	4630      	mov	r0, r6
 8005f20:	4643      	mov	r3, r8
 8005f22:	462a      	mov	r2, r5
 8005f24:	f001 fdc0 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005f28:	88a1      	ldrh	r1, [r4, #4]
 8005f2a:	68e0      	ldr	r0, [r4, #12]
 8005f2c:	f001 f8e8 	bl	8007100 <gpio_set>
	if (size > 0) {
 8005f30:	2f00      	cmp	r7, #0
 8005f32:	d07c      	beq.n	800602e <_ZN6sx127x7ReceiveEh+0x152>
	_implicitHeaderMode = 1;
 8005f34:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005f38:	88a1      	ldrh	r1, [r4, #4]
 8005f3a:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 8005f3c:	f8c4 901c 	str.w	r9, [r4, #28]
  gpio_reset(_csport, _cs);
 8005f40:	f001 f8e6 	bl	8007110 <gpio_reset>
  txdt = address;
 8005f44:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f48:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f4a:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f4e:	464b      	mov	r3, r9
 8005f50:	462a      	mov	r2, r5
 8005f52:	4630      	mov	r0, r6
 8005f54:	f001 fcfc 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f58:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 8005f5c:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f60:	4643      	mov	r3, r8
 8005f62:	462a      	mov	r2, r5
 8005f64:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005f66:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	f001 fd9c 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005f70:	88a1      	ldrh	r1, [r4, #4]
 8005f72:	68e0      	ldr	r0, [r4, #12]
 8005f74:	f001 f8c4 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 8005f78:	88a1      	ldrh	r1, [r4, #4]
 8005f7a:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005f7c:	f89d a00e 	ldrb.w	sl, [sp, #14]
  gpio_reset(_csport, _cs);
 8005f80:	f001 f8c6 	bl	8007110 <gpio_reset>
  txdt = address;
 8005f84:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f88:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f8a:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f8e:	464b      	mov	r3, r9
 8005f90:	462a      	mov	r2, r5
 8005f92:	4630      	mov	r0, r6
 8005f94:	f001 fcdc 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f98:	f8cd 9000 	str.w	r9, [sp]
 8005f9c:	4643      	mov	r3, r8
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	6821      	ldr	r1, [r4, #0]
 8005fa2:	4630      	mov	r0, r6
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8005fa4:	ea4a 0a09 	orr.w	sl, sl, r9
  txdt = value;
 8005fa8:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005fac:	f001 fd7c 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005fb0:	88a1      	ldrh	r1, [r4, #4]
 8005fb2:	68e0      	ldr	r0, [r4, #12]
 8005fb4:	f001 f8a4 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 8005fb8:	88a1      	ldrh	r1, [r4, #4]
 8005fba:	68e0      	ldr	r0, [r4, #12]
 8005fbc:	f001 f8a8 	bl	8007110 <gpio_reset>
  txdt = address;
 8005fc0:	f04f 0ca2 	mov.w	ip, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005fc4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005fc6:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005fca:	464b      	mov	r3, r9
 8005fcc:	462a      	mov	r2, r5
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f001 fcbe 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005fd4:	f8cd 9000 	str.w	r9, [sp]
 8005fd8:	4643      	mov	r3, r8
 8005fda:	462a      	mov	r2, r5
 8005fdc:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005fde:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f001 fd60 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005fe8:	88a1      	ldrh	r1, [r4, #4]
 8005fea:	68e0      	ldr	r0, [r4, #12]
 8005fec:	f001 f888 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 8005ff0:	88a1      	ldrh	r1, [r4, #4]
 8005ff2:	68e0      	ldr	r0, [r4, #12]
 8005ff4:	f001 f88c 	bl	8007110 <gpio_reset>
  txdt = address;
 8005ff8:	2381      	movs	r3, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ffa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ffc:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006000:	462a      	mov	r2, r5
 8006002:	4630      	mov	r0, r6
 8006004:	2301      	movs	r3, #1
 8006006:	f001 fca3 	bl	8007950 <_ZN3spi8transmitEmm>
  txdt = value;
 800600a:	2185      	movs	r1, #133	; 0x85
 800600c:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006010:	2101      	movs	r1, #1
 8006012:	9100      	str	r1, [sp, #0]
 8006014:	6821      	ldr	r1, [r4, #0]
 8006016:	4630      	mov	r0, r6
 8006018:	4643      	mov	r3, r8
 800601a:	462a      	mov	r2, r5
 800601c:	f001 fd44 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8006020:	88a1      	ldrh	r1, [r4, #4]
 8006022:	68e0      	ldr	r0, [r4, #12]
 8006024:	f001 f86c 	bl	8007100 <gpio_set>
}
 8006028:	b006      	add	sp, #24
 800602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800602e:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8006032:	88a1      	ldrh	r1, [r4, #4]
 8006034:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 8006036:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 8006038:	f001 f86a 	bl	8007110 <gpio_reset>
  txdt = address;
 800603c:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006040:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8006042:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006046:	464b      	mov	r3, r9
 8006048:	462a      	mov	r2, r5
 800604a:	4630      	mov	r0, r6
 800604c:	f001 fc80 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006050:	f8cd 9000 	str.w	r9, [sp]
 8006054:	4643      	mov	r3, r8
 8006056:	462a      	mov	r2, r5
 8006058:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800605a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800605e:	4630      	mov	r0, r6
 8006060:	f001 fd22 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8006064:	88a1      	ldrh	r1, [r4, #4]
 8006066:	68e0      	ldr	r0, [r4, #12]
 8006068:	f001 f84a 	bl	8007100 <gpio_set>
  return response;
 800606c:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 8006070:	88a1      	ldrh	r1, [r4, #4]
 8006072:	68e0      	ldr	r0, [r4, #12]
 8006074:	f001 f84c 	bl	8007110 <gpio_reset>
  txdt = address;
 8006078:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 800607c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800607e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006082:	464b      	mov	r3, r9
 8006084:	462a      	mov	r2, r5
 8006086:	4630      	mov	r0, r6
 8006088:	f001 fc62 	bl	8007950 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 800608c:	f027 0701 	bic.w	r7, r7, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006090:	f8cd 9000 	str.w	r9, [sp]
 8006094:	e7a0      	b.n	8005fd8 <_ZN6sx127x7ReceiveEh+0xfc>
 8006096:	f10d 050f 	add.w	r5, sp, #15
 800609a:	ae04      	add	r6, sp, #16
 800609c:	f10d 080e 	add.w	r8, sp, #14
 80060a0:	e746      	b.n	8005f30 <_ZN6sx127x7ReceiveEh+0x54>
 80060a2:	bf00      	nop

080060a4 <_ZN6sx127x11setSyncWordEh>:
void sx127x::setSyncWord(uint8_t sw){
 80060a4:	b530      	push	{r4, r5, lr}
 80060a6:	4604      	mov	r4, r0
 80060a8:	b087      	sub	sp, #28
 80060aa:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 80060ac:	68c0      	ldr	r0, [r0, #12]
 80060ae:	88a1      	ldrh	r1, [r4, #4]
 80060b0:	f001 f82e 	bl	8007110 <gpio_reset>
  txdt = address;
 80060b4:	23b9      	movs	r3, #185	; 0xb9
  _spi -> transmit((uint32_t)(&txdt), 1);
 80060b6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80060b8:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80060bc:	f10d 020f 	add.w	r2, sp, #15
 80060c0:	a804      	add	r0, sp, #16
 80060c2:	2301      	movs	r3, #1
 80060c4:	f001 fc44 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80060c8:	2301      	movs	r3, #1
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80060ce:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80060d2:	a804      	add	r0, sp, #16
 80060d4:	f10d 030e 	add.w	r3, sp, #14
 80060d8:	f10d 020f 	add.w	r2, sp, #15
 80060dc:	f001 fce4 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80060e0:	88a1      	ldrh	r1, [r4, #4]
 80060e2:	68e0      	ldr	r0, [r4, #12]
 80060e4:	f001 f80c 	bl	8007100 <gpio_set>
}
 80060e8:	b007      	add	sp, #28
 80060ea:	bd30      	pop	{r4, r5, pc}

080060ec <_ZN6sx127x10IRQHandlerEv>:
void sx127x::IRQHandler(void){
 80060ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  gpio_reset(_csport, _cs);
 80060f0:	8881      	ldrh	r1, [r0, #4]
void sx127x::IRQHandler(void){
 80060f2:	b086      	sub	sp, #24
 80060f4:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 80060f6:	68c0      	ldr	r0, [r0, #12]
 80060f8:	f001 f80a 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80060fc:	2301      	movs	r3, #1
  txdt = address;
 80060fe:	2112      	movs	r1, #18
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006100:	461e      	mov	r6, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006102:	f10d 020f 	add.w	r2, sp, #15
  txdt = address;
 8006106:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800610a:	a804      	add	r0, sp, #16
 800610c:	6821      	ldr	r1, [r4, #0]
 800610e:	f001 fc1f 	bl	8007950 <_ZN3spi8transmitEmm>
  txdt = value;
 8006112:	2300      	movs	r3, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006114:	9600      	str	r6, [sp, #0]
 8006116:	f10d 020f 	add.w	r2, sp, #15
 800611a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800611c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006120:	a804      	add	r0, sp, #16
 8006122:	f10d 030e 	add.w	r3, sp, #14
 8006126:	f001 fcbf 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800612a:	88a1      	ldrh	r1, [r4, #4]
 800612c:	68e0      	ldr	r0, [r4, #12]
 800612e:	f000 ffe7 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 8006132:	88a1      	ldrh	r1, [r4, #4]
 8006134:	68e0      	ldr	r0, [r4, #12]
  return response;
 8006136:	f89d 500e 	ldrb.w	r5, [sp, #14]
  gpio_reset(_csport, _cs);
 800613a:	f000 ffe9 	bl	8007110 <gpio_reset>
  txdt = address;
 800613e:	f04f 0c92 	mov.w	ip, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006142:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8006144:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006148:	4633      	mov	r3, r6
 800614a:	f10d 020f 	add.w	r2, sp, #15
 800614e:	a804      	add	r0, sp, #16
 8006150:	f001 fbfe 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006154:	9600      	str	r6, [sp, #0]
 8006156:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8006158:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800615c:	a804      	add	r0, sp, #16
 800615e:	f10d 030e 	add.w	r3, sp, #14
 8006162:	f10d 020f 	add.w	r2, sp, #15
 8006166:	f001 fc9f 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800616a:	88a1      	ldrh	r1, [r4, #4]
 800616c:	68e0      	ldr	r0, [r4, #12]
 800616e:	f000 ffc7 	bl	8007100 <gpio_set>
	if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8006172:	f015 0720 	ands.w	r7, r5, #32
 8006176:	d16d      	bne.n	8006254 <_ZN6sx127x10IRQHandlerEv+0x168>
		if ((irqFlags & IRQ_RX_DONE_MASK) != 0) {
 8006178:	066a      	lsls	r2, r5, #25
 800617a:	d569      	bpl.n	8006250 <_ZN6sx127x10IRQHandlerEv+0x164>
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 800617c:	69e5      	ldr	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 800617e:	88a1      	ldrh	r1, [r4, #4]
 8006180:	68e0      	ldr	r0, [r4, #12]
			_packetIndex = 0;
 8006182:	61a7      	str	r7, [r4, #24]
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8006184:	2d00      	cmp	r5, #0
 8006186:	d168      	bne.n	800625a <_ZN6sx127x10IRQHandlerEv+0x16e>
  gpio_reset(_csport, _cs);
 8006188:	f000 ffc2 	bl	8007110 <gpio_reset>
  txdt = address;
 800618c:	2713      	movs	r7, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 800618e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8006190:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006194:	4633      	mov	r3, r6
 8006196:	f10d 020f 	add.w	r2, sp, #15
 800619a:	a804      	add	r0, sp, #16
 800619c:	f001 fbd8 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80061a0:	9600      	str	r6, [sp, #0]
  txdt = value;
 80061a2:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80061a6:	f10d 030e 	add.w	r3, sp, #14
 80061aa:	f10d 020f 	add.w	r2, sp, #15
 80061ae:	6821      	ldr	r1, [r4, #0]
 80061b0:	a804      	add	r0, sp, #16
 80061b2:	f001 fc79 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80061b6:	88a1      	ldrh	r1, [r4, #4]
 80061b8:	68e0      	ldr	r0, [r4, #12]
 80061ba:	f000 ffa1 	bl	8007100 <gpio_set>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80061be:	2501      	movs	r5, #1
  gpio_reset(_csport, _cs);
 80061c0:	88a1      	ldrh	r1, [r4, #4]
 80061c2:	68e0      	ldr	r0, [r4, #12]
  return response;
 80061c4:	f89d 800e 	ldrb.w	r8, [sp, #14]
  txdt = address;
 80061c8:	2610      	movs	r6, #16
  gpio_reset(_csport, _cs);
 80061ca:	f000 ffa1 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80061ce:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80061d0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80061d4:	462b      	mov	r3, r5
 80061d6:	f10d 020f 	add.w	r2, sp, #15
 80061da:	a804      	add	r0, sp, #16
 80061dc:	f001 fbb8 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80061e0:	9500      	str	r5, [sp, #0]
 80061e2:	f10d 030e 	add.w	r3, sp, #14
 80061e6:	f10d 020f 	add.w	r2, sp, #15
 80061ea:	eb0d 0006 	add.w	r0, sp, r6
 80061ee:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80061f0:	2600      	movs	r6, #0
 80061f2:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80061f6:	f001 fc57 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80061fa:	88a1      	ldrh	r1, [r4, #4]
 80061fc:	68e0      	ldr	r0, [r4, #12]
 80061fe:	f000 ff7f 	bl	8007100 <gpio_set>
  gpio_reset(_csport, _cs);
 8006202:	88a1      	ldrh	r1, [r4, #4]
 8006204:	68e0      	ldr	r0, [r4, #12]
  return response;
 8006206:	f89d 600e 	ldrb.w	r6, [sp, #14]
  txdt = address;
 800620a:	278d      	movs	r7, #141	; 0x8d
  gpio_reset(_csport, _cs);
 800620c:	f000 ff80 	bl	8007110 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006210:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8006212:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006216:	462b      	mov	r3, r5
 8006218:	f10d 020f 	add.w	r2, sp, #15
 800621c:	a804      	add	r0, sp, #16
 800621e:	f001 fb97 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006222:	9500      	str	r5, [sp, #0]
 8006224:	f10d 030e 	add.w	r3, sp, #14
 8006228:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800622a:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800622e:	f10d 020f 	add.w	r2, sp, #15
 8006232:	a804      	add	r0, sp, #16
 8006234:	f001 fc38 	bl	8007aa8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8006238:	88a1      	ldrh	r1, [r4, #4]
 800623a:	68e0      	ldr	r0, [r4, #12]
 800623c:	f000 ff60 	bl	8007100 <gpio_set>
			if (RxDoneHandler) {
 8006240:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006242:	b13b      	cbz	r3, 8006254 <_ZN6sx127x10IRQHandlerEv+0x168>
				RxDoneHandler(this, packetLength);
 8006244:	4641      	mov	r1, r8
 8006246:	4620      	mov	r0, r4
}
 8006248:	b006      	add	sp, #24
 800624a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				RxDoneHandler(this, packetLength);
 800624e:	4718      	bx	r3
		else if ((irqFlags & IRQ_TX_DONE_MASK) != 0) {
 8006250:	072b      	lsls	r3, r5, #28
 8006252:	d412      	bmi.n	800627a <_ZN6sx127x10IRQHandlerEv+0x18e>
}
 8006254:	b006      	add	sp, #24
 8006256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  gpio_reset(_csport, _cs);
 800625a:	f000 ff59 	bl	8007110 <gpio_reset>
  txdt = address;
 800625e:	2522      	movs	r5, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006260:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8006262:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006266:	4633      	mov	r3, r6
 8006268:	f10d 020f 	add.w	r2, sp, #15
 800626c:	a804      	add	r0, sp, #16
 800626e:	f001 fb6f 	bl	8007950 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006272:	9600      	str	r6, [sp, #0]
  txdt = value;
 8006274:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006278:	e795      	b.n	80061a6 <_ZN6sx127x10IRQHandlerEv+0xba>
			if (TxDoneHandler) {
 800627a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0e9      	beq.n	8006254 <_ZN6sx127x10IRQHandlerEv+0x168>
				TxDoneHandler(this);
 8006280:	4620      	mov	r0, r4
}
 8006282:	b006      	add	sp, #24
 8006284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				TxDoneHandler(this);
 8006288:	4718      	bx	r3
 800628a:	bf00      	nop

0800628c <_ZN3dma4stopEv>:
	}

	return ret;
}

stm_ret_t dma::stop(void){
 800628c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800628e:	460e      	mov	r6, r1
	stm_ret_t ret;
 8006290:	2201      	movs	r2, #1

	if(_state == STM_BUSY){
 8006292:	7c35      	ldrb	r5, [r6, #16]
	stm_ret_t ret;
 8006294:	7002      	strb	r2, [r0, #0]
 8006296:	2100      	movs	r1, #0
	if(_state == STM_BUSY){
 8006298:	2d04      	cmp	r5, #4
stm_ret_t dma::stop(void){
 800629a:	b085      	sub	sp, #20
 800629c:	4604      	mov	r4, r0
	stm_ret_t ret;
 800629e:	6041      	str	r1, [r0, #4]
	if(_state == STM_BUSY){
 80062a0:	d006      	beq.n	80062b0 <_ZN3dma4stopEv+0x24>
	}
	else{
#if CONFIG_USE_LOG_MONITOR && DMA_LOG
		LOG_ERROR(TAG, "%s -> %s -> DMA state ready, can't stop.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && DMA_LOG */
		set_return(&ret, STM_ERR, __LINE__);
 80062a2:	f240 122b 	movw	r2, #299	; 0x12b
 80062a6:	f003 f9d9 	bl	800965c <set_return>
		return ret;
	}

	return ret;
}
 80062aa:	4620      	mov	r0, r4
 80062ac:	b005      	add	sp, #20
 80062ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 80062b0:	460b      	mov	r3, r1
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 80062b2:	68f1      	ldr	r1, [r6, #12]
 80062b4:	680d      	ldr	r5, [r1, #0]
 80062b6:	6829      	ldr	r1, [r5, #0]
		_state = STM_READY;
 80062b8:	2005      	movs	r0, #5
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 80062ba:	f021 011e 	bic.w	r1, r1, #30
		_state = STM_READY;
 80062be:	7430      	strb	r0, [r6, #16]
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 80062c0:	6029      	str	r1, [r5, #0]
		_conf -> stream -> FCR &=~ DMA_SxFCR_FEIE;
 80062c2:	6969      	ldr	r1, [r5, #20]
 80062c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80062c8:	6169      	str	r1, [r5, #20]
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 80062ca:	6829      	ldr	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 80062cc:	af02      	add	r7, sp, #8
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 80062ce:	f021 0101 	bic.w	r1, r1, #1
 80062d2:	6029      	str	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 80062d4:	9000      	str	r0, [sp, #0]
 80062d6:	4629      	mov	r1, r5
 80062d8:	4638      	mov	r0, r7
 80062da:	f003 f983 	bl	80095e4 <wait_flag_in_register_timeout>
 80062de:	e897 0003 	ldmia.w	r7, {r0, r1}
 80062e2:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)){
 80062e6:	4620      	mov	r0, r4
 80062e8:	f003 f9c6 	bl	8009678 <is_timeout>
 80062ec:	bb20      	cbnz	r0, 8006338 <_ZN3dma4stopEv+0xac>
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80062ee:	69b2      	ldr	r2, [r6, #24]
	ClearIFCR((0x3FU << _Intr_Index));
 80062f0:	6971      	ldr	r1, [r6, #20]
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80062f2:	2a03      	cmp	r2, #3
	ClearIFCR((0x3FU << _Intr_Index));
 80062f4:	f04f 033f 	mov.w	r3, #63	; 0x3f
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80062f8:	68b2      	ldr	r2, [r6, #8]
	ClearIFCR((0x3FU << _Intr_Index));
 80062fa:	fa03 f301 	lsl.w	r3, r3, r1
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80062fe:	bf94      	ite	ls
 8006300:	6093      	strls	r3, [r2, #8]
 8006302:	60d3      	strhi	r3, [r2, #12]
		__NVIC_ClearPendingIRQ(_IRQn);
 8006304:	f996 2011 	ldrsb.w	r2, [r6, #17]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8006308:	2a00      	cmp	r2, #0
 800630a:	dbce      	blt.n	80062aa <_ZN3dma4stopEv+0x1e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800630c:	0953      	lsrs	r3, r2, #5
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8006314:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8006318:	2101      	movs	r1, #1
 800631a:	f002 021f 	and.w	r2, r2, #31
 800631e:	fa01 f202 	lsl.w	r2, r1, r2
 8006322:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800632a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800632e:	f3bf 8f6f 	isb	sy
}
 8006332:	4620      	mov	r0, r4
 8006334:	b005      	add	sp, #20
 8006336:	bdf0      	pop	{r4, r5, r6, r7, pc}
			set_return_line(&ret, __LINE__);
 8006338:	4620      	mov	r0, r4
 800633a:	f240 1119 	movw	r1, #281	; 0x119
 800633e:	f003 f991 	bl	8009664 <set_return_line>
}
 8006342:	4620      	mov	r0, r4
 8006344:	b005      	add	sp, #20
 8006346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006348 <_ZN3dma11get_counterEv>:

uint16_t dma::get_counter(void){
#if defined(STM32F1)
	return _dma_channel -> CNDTR;
#elif defined(STM32F4)
	return _conf -> stream -> NDTR;
 8006348:	68c3      	ldr	r3, [r0, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6858      	ldr	r0, [r3, #4]
#endif /* STM32F4 */
}
 800634e:	b280      	uxth	r0, r0
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop

08006354 <_ZN3dma10get_configEv>:

dma_config_t *dma::get_config(void){
	return _conf;
}
 8006354:	68c0      	ldr	r0, [r0, #12]
 8006356:	4770      	bx	lr

08006358 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef>:
#if defined(DMA2_Stream7)
dma dma2_7(DMA2);
dma_t dma2_stream7 = &dma2_7;
__WEAK void DMA2_Stream7_IRQHandler(void){
	DMA_IRQ_Handler(DMA2, DMA2_Stream7, &dma2_7);
}
 8006358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
dma::dma(DMA_TypeDef *dma){
 800635c:	4857      	ldr	r0, [pc, #348]	; (80064bc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x164>)
 800635e:	f8df e188 	ldr.w	lr, [pc, #392]	; 80064e8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x190>
 8006362:	4f57      	ldr	r7, [pc, #348]	; (80064c0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x168>)
 8006364:	4e57      	ldr	r6, [pc, #348]	; (80064c4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x16c>)
 8006366:	f8df b184 	ldr.w	fp, [pc, #388]	; 80064ec <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x194>
 800636a:	f8df a184 	ldr.w	sl, [pc, #388]	; 80064f0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x198>
 800636e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80064f4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x19c>
 8006372:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80064f8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a0>
 8006376:	f8df c184 	ldr.w	ip, [pc, #388]	; 80064fc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a4>
	_dma = dma;
 800637a:	4953      	ldr	r1, [pc, #332]	; (80064c8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x170>)
 800637c:	f8cb 1008 	str.w	r1, [fp, #8]
dma::dma(DMA_TypeDef *dma){
 8006380:	2300      	movs	r3, #0
 8006382:	2205      	movs	r2, #5
 8006384:	f8cb 3014 	str.w	r3, [fp, #20]
	_dma = dma;
 8006388:	f8ca 1008 	str.w	r1, [sl, #8]
dma::dma(DMA_TypeDef *dma){
 800638c:	f8ca 3014 	str.w	r3, [sl, #20]
	_dma = dma;
 8006390:	f8c9 1008 	str.w	r1, [r9, #8]
dma::dma(DMA_TypeDef *dma){
 8006394:	f8c9 3014 	str.w	r3, [r9, #20]
 8006398:	e9cb 3308 	strd	r3, r3, [fp, #32]
 800639c:	f8c8 3014 	str.w	r3, [r8, #20]
 80063a0:	e9ca 3308 	strd	r3, r3, [sl, #32]
 80063a4:	e9c9 3308 	strd	r3, r3, [r9, #32]
 80063a8:	e9c8 3308 	strd	r3, r3, [r8, #32]
 80063ac:	f8cb 2010 	str.w	r2, [fp, #16]
 80063b0:	f8cb 3018 	str.w	r3, [fp, #24]
 80063b4:	f88b 301c 	strb.w	r3, [fp, #28]
 80063b8:	f8ca 2010 	str.w	r2, [sl, #16]
 80063bc:	f8ca 3018 	str.w	r3, [sl, #24]
 80063c0:	f88a 301c 	strb.w	r3, [sl, #28]
 80063c4:	f8c9 2010 	str.w	r2, [r9, #16]
 80063c8:	f8c9 3018 	str.w	r3, [r9, #24]
 80063cc:	f889 301c 	strb.w	r3, [r9, #28]
 80063d0:	f8c8 2010 	str.w	r2, [r8, #16]
 80063d4:	f8c8 3018 	str.w	r3, [r8, #24]
 80063d8:	f888 301c 	strb.w	r3, [r8, #28]
 80063dc:	f8ce 2010 	str.w	r2, [lr, #16]
 80063e0:	f8ce 3014 	str.w	r3, [lr, #20]
 80063e4:	f8ce 3018 	str.w	r3, [lr, #24]
 80063e8:	f88e 301c 	strb.w	r3, [lr, #28]
	_dma = dma;
 80063ec:	f8c8 1008 	str.w	r1, [r8, #8]
dma::dma(DMA_TypeDef *dma){
 80063f0:	f8cc 3014 	str.w	r3, [ip, #20]
	_dma = dma;
 80063f4:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	6102      	str	r2, [r0, #16]
 80063fa:	6173      	str	r3, [r6, #20]
 80063fc:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8006400:	6143      	str	r3, [r0, #20]
 8006402:	6132      	str	r2, [r6, #16]
 8006404:	61b3      	str	r3, [r6, #24]
 8006406:	7733      	strb	r3, [r6, #28]
 8006408:	6183      	str	r3, [r0, #24]
 800640a:	4606      	mov	r6, r0
 800640c:	7703      	strb	r3, [r0, #28]
 800640e:	6203      	str	r3, [r0, #32]
 8006410:	6243      	str	r3, [r0, #36]	; 0x24
 8006412:	482e      	ldr	r0, [pc, #184]	; (80064cc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x174>)
	_dma = dma;
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	f8ce 1008 	str.w	r1, [lr, #8]
 800641a:	f8cc 1008 	str.w	r1, [ip, #8]
 800641e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
dma::dma(DMA_TypeDef *dma){
 8006422:	e9c7 3308 	strd	r3, r3, [r7, #32]
 8006426:	613a      	str	r2, [r7, #16]
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	773b      	strb	r3, [r7, #28]
 800642c:	6102      	str	r2, [r0, #16]
 800642e:	6143      	str	r3, [r0, #20]
 8006430:	e9cc 3308 	strd	r3, r3, [ip, #32]
 8006434:	f8ce 3020 	str.w	r3, [lr, #32]
 8006438:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
 800643c:	f8cc 2010 	str.w	r2, [ip, #16]
 8006440:	f8cc 3018 	str.w	r3, [ip, #24]
 8006444:	f88c 301c 	strb.w	r3, [ip, #28]
	_dma = dma;
 8006448:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 800644a:	4e21      	ldr	r6, [pc, #132]	; (80064d0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 800644c:	4f21      	ldr	r7, [pc, #132]	; (80064d4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x17c>)
 800644e:	6173      	str	r3, [r6, #20]
 8006450:	4e21      	ldr	r6, [pc, #132]	; (80064d8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	6173      	str	r3, [r6, #20]
 8006456:	4e1e      	ldr	r6, [pc, #120]	; (80064d0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 8006458:	4d20      	ldr	r5, [pc, #128]	; (80064dc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x184>)
 800645a:	6132      	str	r2, [r6, #16]
 800645c:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8006460:	61b3      	str	r3, [r6, #24]
 8006462:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 8006464:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8006466:	6183      	str	r3, [r0, #24]
 8006468:	4e1b      	ldr	r6, [pc, #108]	; (80064d8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 800646a:	7703      	strb	r3, [r0, #28]
 800646c:	6203      	str	r3, [r0, #32]
 800646e:	6243      	str	r3, [r0, #36]	; 0x24
	_dma = dma;
 8006470:	6081      	str	r1, [r0, #8]
dma::dma(DMA_TypeDef *dma){
 8006472:	481b      	ldr	r0, [pc, #108]	; (80064e0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x188>)
 8006474:	4c1b      	ldr	r4, [pc, #108]	; (80064e4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x18c>)
 8006476:	613a      	str	r2, [r7, #16]
 8006478:	e9c7 3308 	strd	r3, r3, [r7, #32]
 800647c:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8006480:	e9c5 3308 	strd	r3, r3, [r5, #32]
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	773b      	strb	r3, [r7, #28]
	_dma = dma;
 8006488:	60b9      	str	r1, [r7, #8]
dma::dma(DMA_TypeDef *dma){
 800648a:	6132      	str	r2, [r6, #16]
 800648c:	61b3      	str	r3, [r6, #24]
 800648e:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 8006490:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8006492:	612a      	str	r2, [r5, #16]
 8006494:	616b      	str	r3, [r5, #20]
 8006496:	61ab      	str	r3, [r5, #24]
 8006498:	772b      	strb	r3, [r5, #28]
	_dma = dma;
 800649a:	60a9      	str	r1, [r5, #8]
dma::dma(DMA_TypeDef *dma){
 800649c:	6102      	str	r2, [r0, #16]
 800649e:	7703      	strb	r3, [r0, #28]
 80064a0:	6163      	str	r3, [r4, #20]
 80064a2:	e9c4 3308 	strd	r3, r3, [r4, #32]
 80064a6:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80064aa:	6122      	str	r2, [r4, #16]
 80064ac:	61a3      	str	r3, [r4, #24]
 80064ae:	7723      	strb	r3, [r4, #28]
	_dma = dma;
 80064b0:	60a1      	str	r1, [r4, #8]
dma::dma(DMA_TypeDef *dma){
 80064b2:	6143      	str	r3, [r0, #20]
 80064b4:	6183      	str	r3, [r0, #24]
	_dma = dma;
 80064b6:	6081      	str	r1, [r0, #8]
}
 80064b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064bc:	2000b398 	.word	0x2000b398
 80064c0:	2000b348 	.word	0x2000b348
 80064c4:	2000b370 	.word	0x2000b370
 80064c8:	40026000 	.word	0x40026000
 80064cc:	2000b3c0 	.word	0x2000b3c0
 80064d0:	2000b3e8 	.word	0x2000b3e8
 80064d4:	2000b410 	.word	0x2000b410
 80064d8:	2000b438 	.word	0x2000b438
 80064dc:	2000b460 	.word	0x2000b460
 80064e0:	2000b4b0 	.word	0x2000b4b0
 80064e4:	2000b488 	.word	0x2000b488
 80064e8:	2000b2f8 	.word	0x2000b2f8
 80064ec:	2000b258 	.word	0x2000b258
 80064f0:	2000b280 	.word	0x2000b280
 80064f4:	2000b2a8 	.word	0x2000b2a8
 80064f8:	2000b2d0 	.word	0x2000b2d0
 80064fc:	2000b320 	.word	0x2000b320

08006500 <exti_init>:
void EXTI15_10_IRQHandler(void);       /* EXTI Line[15:10] interrupts */

void EXTI_IRQHandler(uint16_t Pin);
}

stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 8006500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006504:	b083      	sub	sp, #12
	stm_ret_t ret;
 8006506:	f04f 0c01 	mov.w	ip, #1
stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 800650a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	stm_ret_t ret;
 800650e:	f880 c000 	strb.w	ip, [r0]
 8006512:	2500      	movs	r5, #0
	uint8_t CRPos = 0;
	IRQn_Type IRQn;

	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006514:	f1b8 0f03 	cmp.w	r8, #3
	stm_ret_t ret;
 8006518:	6045      	str	r5, [r0, #4]
	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 800651a:	f240 8085 	bls.w	8006628 <exti_init+0x128>
#endif /* CONFIG_FAIL_CHIP_RESET */
		return ret;
	}


	if(Pin < 4U) 					CRPos = 0;
 800651e:	2a03      	cmp	r2, #3
 8006520:	4604      	mov	r4, r0
 8006522:	d84b      	bhi.n	80065bc <exti_init+0xbc>
 8006524:	46ae      	mov	lr, r5
 8006526:	46ac      	mov	ip, r5
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
	else 							CRPos = 3;

	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 8006528:	1d97      	adds	r7, r2, #6
 800652a:	b2ff      	uxtb	r7, r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800652c:	2501      	movs	r5, #1
 800652e:	40bd      	lsls	r5, r7
 8006530:	2600      	movs	r6, #0
	else 						   IRQn = EXTI15_10_IRQn;

#if defined(STM32F1)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_AFIOEN)) RCC -> APB2ENR |= RCC_APB2ENR_AFIOEN;
#elif defined(STM32F4)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_SYSCFGEN)) RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8006532:	484d      	ldr	r0, [pc, #308]	; (8006668 <exti_init+0x168>)
 8006534:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 8006538:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800653c:	d105      	bne.n	800654a <exti_init+0x4a>
 800653e:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 8006542:	f449 4980 	orr.w	r9, r9, #16384	; 0x4000
 8006546:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
#endif /* STM32F4 */
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 800654a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800654e:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8006552:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800

	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8006556:	eba2 0e0e 	sub.w	lr, r2, lr
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 800655a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800655e:	9001      	str	r0, [sp, #4]
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8006560:	9801      	ldr	r0, [sp, #4]
 8006562:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
	tmpreg |= (uint32_t)(((((uint32_t)Port & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8006566:	f3c1 2185 	ubfx	r1, r1, #10, #6
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 800656a:	f04f 090f 	mov.w	r9, #15
	tmpreg |= (uint32_t)(((((uint32_t)Port & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 800656e:	fa01 f10e 	lsl.w	r1, r1, lr
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8006572:	fa09 fe0e 	lsl.w	lr, r9, lr
 8006576:	ea20 000e 	bic.w	r0, r0, lr
 800657a:	9001      	str	r0, [sp, #4]
	tmpreg |= (uint32_t)(((((uint32_t)Port & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 800657c:	9801      	ldr	r0, [sp, #4]
 800657e:	4301      	orrs	r1, r0
 8006580:	9101      	str	r1, [sp, #4]
	EXTI_REGISTER -> EXTICR[CRPos] = tmpreg;
 8006582:	9901      	ldr	r1, [sp, #4]
 8006584:	f8cc 1008 	str.w	r1, [ip, #8]

	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 8006588:	07db      	lsls	r3, r3, #31
 800658a:	d423      	bmi.n	80065d4 <exti_init+0xd4>
 800658c:	2101      	movs	r1, #1
 800658e:	fa01 fe02 	lsl.w	lr, r1, r2
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);

	EXTI -> IMR |= (1U << Pin);
 8006592:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8006670 <exti_init+0x170>

	__NVIC_SetPriority(IRQn, Priority);
	__NVIC_EnableIRQ(IRQn);

	return ret;
}
 8006596:	4620      	mov	r0, r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006598:	4c34      	ldr	r4, [pc, #208]	; (800666c <exti_init+0x16c>)
	EXTI -> IMR |= (1U << Pin);
 800659a:	f8dc 1000 	ldr.w	r1, [ip]
 800659e:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80065a2:	19e2      	adds	r2, r4, r7
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	ea41 010e 	orr.w	r1, r1, lr
 80065aa:	f8cc 1000 	str.w	r1, [ip]
 80065ae:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065b2:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 80065b6:	b003      	add	sp, #12
 80065b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
 80065bc:	1f10      	subs	r0, r2, #4
 80065be:	2803      	cmp	r0, #3
 80065c0:	d915      	bls.n	80065ee <exti_init+0xee>
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
 80065c2:	f1a2 0008 	sub.w	r0, r2, #8
 80065c6:	2803      	cmp	r0, #3
 80065c8:	d825      	bhi.n	8006616 <exti_init+0x116>
 80065ca:	f04f 0e08 	mov.w	lr, #8
 80065ce:	f04f 0c02 	mov.w	ip, #2
 80065d2:	e012      	b.n	80065fa <exti_init+0xfa>
	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 80065d4:	4b26      	ldr	r3, [pc, #152]	; (8006670 <exti_init+0x170>)
 80065d6:	2101      	movs	r1, #1
 80065d8:	fa01 fe02 	lsl.w	lr, r1, r2
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	ea42 020e 	orr.w	r2, r2, lr
 80065e2:	609a      	str	r2, [r3, #8]
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	ea4e 0202 	orr.w	r2, lr, r2
 80065ea:	60da      	str	r2, [r3, #12]
 80065ec:	e7d1      	b.n	8006592 <exti_init+0x92>
	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 80065ee:	2a04      	cmp	r2, #4
 80065f0:	bf08      	it	eq
 80065f2:	4696      	moveq	lr, r2
 80065f4:	d098      	beq.n	8006528 <exti_init+0x28>
 80065f6:	f04f 0e04 	mov.w	lr, #4
	else if(Pin >= 5U && Pin < 9U) IRQn = EXTI9_5_IRQn;
 80065fa:	1f50      	subs	r0, r2, #5
 80065fc:	b280      	uxth	r0, r0
 80065fe:	2804      	cmp	r0, #4
 8006600:	bf35      	itete	cc
 8006602:	2717      	movcc	r7, #23
 8006604:	2728      	movcs	r7, #40	; 0x28
 8006606:	f44f 0500 	movcc.w	r5, #8388608	; 0x800000
 800660a:	f44f 7580 	movcs.w	r5, #256	; 0x100
 800660e:	bf34      	ite	cc
 8006610:	2600      	movcc	r6, #0
 8006612:	2601      	movcs	r6, #1
 8006614:	e78d      	b.n	8006532 <exti_init+0x32>
 8006616:	4666      	mov	r6, ip
 8006618:	2728      	movs	r7, #40	; 0x28
 800661a:	f44f 7580 	mov.w	r5, #256	; 0x100
 800661e:	f04f 0e0c 	mov.w	lr, #12
 8006622:	f04f 0c03 	mov.w	ip, #3
 8006626:	e784      	b.n	8006532 <exti_init+0x32>
		set_return(&ret, STM_ERR, __LINE__);
 8006628:	4629      	mov	r1, r5
 800662a:	2238      	movs	r2, #56	; 0x38
 800662c:	f003 f816 	bl	800965c <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8006630:	4b10      	ldr	r3, [pc, #64]	; (8006674 <exti_init+0x174>)
 8006632:	4a11      	ldr	r2, [pc, #68]	; (8006678 <exti_init+0x178>)
 8006634:	4911      	ldr	r1, [pc, #68]	; (800667c <exti_init+0x17c>)
 8006636:	4812      	ldr	r0, [pc, #72]	; (8006680 <exti_init+0x180>)
 8006638:	f002 ff58 	bl	80094ec <LOG_ERROR>
		LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 800663c:	4911      	ldr	r1, [pc, #68]	; (8006684 <exti_init+0x184>)
 800663e:	4810      	ldr	r0, [pc, #64]	; (8006680 <exti_init+0x180>)
 8006640:	2205      	movs	r2, #5
 8006642:	f002 fed7 	bl	80093f4 <LOG_INFO>
		systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8006646:	f241 3088 	movw	r0, #5000	; 0x1388
 800664a:	f001 fe09 	bl	8008260 <systick_delay_ms>
  __ASM volatile ("dsb 0xF":::"memory");
 800664e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006652:	490d      	ldr	r1, [pc, #52]	; (8006688 <exti_init+0x188>)
 8006654:	4b0d      	ldr	r3, [pc, #52]	; (800668c <exti_init+0x18c>)
 8006656:	68ca      	ldr	r2, [r1, #12]
 8006658:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800665c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800665e:	60cb      	str	r3, [r1, #12]
 8006660:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006664:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006666:	e7fd      	b.n	8006664 <exti_init+0x164>
 8006668:	40023800 	.word	0x40023800
 800666c:	e000e100 	.word	0xe000e100
 8006670:	40013c00 	.word	0x40013c00
 8006674:	0800d51c 	.word	0x0800d51c
 8006678:	0800d528 	.word	0x0800d528
 800667c:	0800d550 	.word	0x0800d550
 8006680:	0800d594 	.word	0x0800d594
 8006684:	0800d59c 	.word	0x0800d59c
 8006688:	e000ed00 	.word	0xe000ed00
 800668c:	05fa0004 	.word	0x05fa0004

08006690 <exti_register_event_handler>:
	else 						   IRQn = EXTI15_10_IRQn;
	__NVIC_DisableIRQ(IRQn);
	__NVIC_ClearPendingIRQ(IRQn);
}

void exti_register_event_handler(uint16_t pin, void (*function_ptr)(void *param), void *param){
 8006690:	b410      	push	{r4}
		handler_callback[pin] = function_ptr;
		parameter[pin] = param;
 8006692:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <exti_register_event_handler+0x14>)
		handler_callback[pin] = function_ptr;
 8006694:	4c04      	ldr	r4, [pc, #16]	; (80066a8 <exti_register_event_handler+0x18>)
		parameter[pin] = param;
 8006696:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		handler_callback[pin] = function_ptr;
 800669a:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
}
 800669e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	2000b518 	.word	0x2000b518
 80066a8:	2000b4d8 	.word	0x2000b4d8

080066ac <EXTI0_IRQHandler>:
	handler_callback[pin] = NULL;
}

extern "C"{
void EXTI_IRQHandler(uint16_t Pin){
	if(EXTI -> PR & (1U << Pin)){
 80066ac:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <EXTI0_IRQHandler+0x1c>)
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	07d2      	lsls	r2, r2, #31
 80066b2:	d507      	bpl.n	80066c4 <EXTI0_IRQHandler+0x18>
		EXTI -> PR = (1U << Pin);
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80066b4:	4a05      	ldr	r2, [pc, #20]	; (80066cc <EXTI0_IRQHandler+0x20>)
		EXTI -> PR = (1U << Pin);
 80066b6:	2101      	movs	r1, #1
 80066b8:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80066ba:	6813      	ldr	r3, [r2, #0]
 80066bc:	b113      	cbz	r3, 80066c4 <EXTI0_IRQHandler+0x18>
 80066be:	4a04      	ldr	r2, [pc, #16]	; (80066d0 <EXTI0_IRQHandler+0x24>)
 80066c0:	6810      	ldr	r0, [r2, #0]
 80066c2:	4718      	bx	r3
}


void EXTI0_IRQHandler(void){
	EXTI_IRQHandler(0);
}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40013c00 	.word	0x40013c00
 80066cc:	2000b4d8 	.word	0x2000b4d8
 80066d0:	2000b518 	.word	0x2000b518

080066d4 <EXTI1_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <EXTI1_IRQHandler+0x1c>)
 80066d6:	695a      	ldr	r2, [r3, #20]
 80066d8:	0792      	lsls	r2, r2, #30
 80066da:	d507      	bpl.n	80066ec <EXTI1_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80066dc:	4a05      	ldr	r2, [pc, #20]	; (80066f4 <EXTI1_IRQHandler+0x20>)
 80066de:	6852      	ldr	r2, [r2, #4]
		EXTI -> PR = (1U << Pin);
 80066e0:	2102      	movs	r1, #2
 80066e2:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80066e4:	b112      	cbz	r2, 80066ec <EXTI1_IRQHandler+0x18>
 80066e6:	4b04      	ldr	r3, [pc, #16]	; (80066f8 <EXTI1_IRQHandler+0x24>)
 80066e8:	6858      	ldr	r0, [r3, #4]
 80066ea:	4710      	bx	r2

void EXTI1_IRQHandler(void){
	EXTI_IRQHandler(1);
}
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40013c00 	.word	0x40013c00
 80066f4:	2000b4d8 	.word	0x2000b4d8
 80066f8:	2000b518 	.word	0x2000b518

080066fc <EXTI2_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <EXTI2_IRQHandler+0x1c>)
 80066fe:	695a      	ldr	r2, [r3, #20]
 8006700:	0752      	lsls	r2, r2, #29
 8006702:	d507      	bpl.n	8006714 <EXTI2_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006704:	4a05      	ldr	r2, [pc, #20]	; (800671c <EXTI2_IRQHandler+0x20>)
 8006706:	6892      	ldr	r2, [r2, #8]
		EXTI -> PR = (1U << Pin);
 8006708:	2104      	movs	r1, #4
 800670a:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800670c:	b112      	cbz	r2, 8006714 <EXTI2_IRQHandler+0x18>
 800670e:	4b04      	ldr	r3, [pc, #16]	; (8006720 <EXTI2_IRQHandler+0x24>)
 8006710:	6898      	ldr	r0, [r3, #8]
 8006712:	4710      	bx	r2

void EXTI2_IRQHandler(void){
	EXTI_IRQHandler(2);
}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40013c00 	.word	0x40013c00
 800671c:	2000b4d8 	.word	0x2000b4d8
 8006720:	2000b518 	.word	0x2000b518

08006724 <EXTI3_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <EXTI3_IRQHandler+0x1c>)
 8006726:	695a      	ldr	r2, [r3, #20]
 8006728:	0712      	lsls	r2, r2, #28
 800672a:	d507      	bpl.n	800673c <EXTI3_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800672c:	4a05      	ldr	r2, [pc, #20]	; (8006744 <EXTI3_IRQHandler+0x20>)
 800672e:	68d2      	ldr	r2, [r2, #12]
		EXTI -> PR = (1U << Pin);
 8006730:	2108      	movs	r1, #8
 8006732:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006734:	b112      	cbz	r2, 800673c <EXTI3_IRQHandler+0x18>
 8006736:	4b04      	ldr	r3, [pc, #16]	; (8006748 <EXTI3_IRQHandler+0x24>)
 8006738:	68d8      	ldr	r0, [r3, #12]
 800673a:	4710      	bx	r2

void EXTI3_IRQHandler(void){
	EXTI_IRQHandler(3);
}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40013c00 	.word	0x40013c00
 8006744:	2000b4d8 	.word	0x2000b4d8
 8006748:	2000b518 	.word	0x2000b518

0800674c <EXTI4_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <EXTI4_IRQHandler+0x1c>)
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	06d2      	lsls	r2, r2, #27
 8006752:	d507      	bpl.n	8006764 <EXTI4_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006754:	4a05      	ldr	r2, [pc, #20]	; (800676c <EXTI4_IRQHandler+0x20>)
 8006756:	6912      	ldr	r2, [r2, #16]
		EXTI -> PR = (1U << Pin);
 8006758:	2110      	movs	r1, #16
 800675a:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800675c:	b112      	cbz	r2, 8006764 <EXTI4_IRQHandler+0x18>
 800675e:	4b04      	ldr	r3, [pc, #16]	; (8006770 <EXTI4_IRQHandler+0x24>)
 8006760:	6918      	ldr	r0, [r3, #16]
 8006762:	4710      	bx	r2

void EXTI4_IRQHandler(void){
	EXTI_IRQHandler(4);
}
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40013c00 	.word	0x40013c00
 800676c:	2000b4d8 	.word	0x2000b4d8
 8006770:	2000b518 	.word	0x2000b518

08006774 <EXTI9_5_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006774:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <EXTI9_5_IRQHandler+0x84>)
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	0692      	lsls	r2, r2, #26

void EXTI9_5_IRQHandler(void){
 800677a:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 800677c:	d507      	bpl.n	800678e <EXTI9_5_IRQHandler+0x1a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800677e:	4a1f      	ldr	r2, [pc, #124]	; (80067fc <EXTI9_5_IRQHandler+0x88>)
 8006780:	6952      	ldr	r2, [r2, #20]
		EXTI -> PR = (1U << Pin);
 8006782:	2120      	movs	r1, #32
 8006784:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006786:	b112      	cbz	r2, 800678e <EXTI9_5_IRQHandler+0x1a>
 8006788:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <EXTI9_5_IRQHandler+0x8c>)
 800678a:	6958      	ldr	r0, [r3, #20]
 800678c:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 800678e:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <EXTI9_5_IRQHandler+0x84>)
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	0654      	lsls	r4, r2, #25
 8006794:	d507      	bpl.n	80067a6 <EXTI9_5_IRQHandler+0x32>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006796:	4a19      	ldr	r2, [pc, #100]	; (80067fc <EXTI9_5_IRQHandler+0x88>)
 8006798:	6992      	ldr	r2, [r2, #24]
		EXTI -> PR = (1U << Pin);
 800679a:	2140      	movs	r1, #64	; 0x40
 800679c:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800679e:	b112      	cbz	r2, 80067a6 <EXTI9_5_IRQHandler+0x32>
 80067a0:	4b17      	ldr	r3, [pc, #92]	; (8006800 <EXTI9_5_IRQHandler+0x8c>)
 80067a2:	6998      	ldr	r0, [r3, #24]
 80067a4:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 80067a6:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <EXTI9_5_IRQHandler+0x84>)
 80067a8:	695a      	ldr	r2, [r3, #20]
 80067aa:	0610      	lsls	r0, r2, #24
 80067ac:	d507      	bpl.n	80067be <EXTI9_5_IRQHandler+0x4a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80067ae:	4a13      	ldr	r2, [pc, #76]	; (80067fc <EXTI9_5_IRQHandler+0x88>)
 80067b0:	69d2      	ldr	r2, [r2, #28]
		EXTI -> PR = (1U << Pin);
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80067b6:	b112      	cbz	r2, 80067be <EXTI9_5_IRQHandler+0x4a>
 80067b8:	4b11      	ldr	r3, [pc, #68]	; (8006800 <EXTI9_5_IRQHandler+0x8c>)
 80067ba:	69d8      	ldr	r0, [r3, #28]
 80067bc:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 80067be:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <EXTI9_5_IRQHandler+0x84>)
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	05d1      	lsls	r1, r2, #23
 80067c4:	d508      	bpl.n	80067d8 <EXTI9_5_IRQHandler+0x64>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80067c6:	4a0d      	ldr	r2, [pc, #52]	; (80067fc <EXTI9_5_IRQHandler+0x88>)
 80067c8:	6a12      	ldr	r2, [r2, #32]
		EXTI -> PR = (1U << Pin);
 80067ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067ce:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80067d0:	b112      	cbz	r2, 80067d8 <EXTI9_5_IRQHandler+0x64>
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <EXTI9_5_IRQHandler+0x8c>)
 80067d4:	6a18      	ldr	r0, [r3, #32]
 80067d6:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 80067d8:	4b07      	ldr	r3, [pc, #28]	; (80067f8 <EXTI9_5_IRQHandler+0x84>)
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	0592      	lsls	r2, r2, #22
 80067de:	d50a      	bpl.n	80067f6 <EXTI9_5_IRQHandler+0x82>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80067e0:	4a06      	ldr	r2, [pc, #24]	; (80067fc <EXTI9_5_IRQHandler+0x88>)
 80067e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
		EXTI -> PR = (1U << Pin);
 80067e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067e8:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80067ea:	b122      	cbz	r2, 80067f6 <EXTI9_5_IRQHandler+0x82>
 80067ec:	4b04      	ldr	r3, [pc, #16]	; (8006800 <EXTI9_5_IRQHandler+0x8c>)
	EXTI_IRQHandler(5);
	EXTI_IRQHandler(6);
	EXTI_IRQHandler(7);
	EXTI_IRQHandler(8);
	EXTI_IRQHandler(9);
}
 80067ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80067f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80067f4:	4710      	bx	r2
}
 80067f6:	bd10      	pop	{r4, pc}
 80067f8:	40013c00 	.word	0x40013c00
 80067fc:	2000b4d8 	.word	0x2000b4d8
 8006800:	2000b518 	.word	0x2000b518

08006804 <EXTI15_10_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006804:	4b28      	ldr	r3, [pc, #160]	; (80068a8 <EXTI15_10_IRQHandler+0xa4>)
 8006806:	695a      	ldr	r2, [r3, #20]
 8006808:	0551      	lsls	r1, r2, #21

void EXTI15_10_IRQHandler(void){
 800680a:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 800680c:	d508      	bpl.n	8006820 <EXTI15_10_IRQHandler+0x1c>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800680e:	4a27      	ldr	r2, [pc, #156]	; (80068ac <EXTI15_10_IRQHandler+0xa8>)
 8006810:	6a92      	ldr	r2, [r2, #40]	; 0x28
		EXTI -> PR = (1U << Pin);
 8006812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006816:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006818:	b112      	cbz	r2, 8006820 <EXTI15_10_IRQHandler+0x1c>
 800681a:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <EXTI15_10_IRQHandler+0xac>)
 800681c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800681e:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006820:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <EXTI15_10_IRQHandler+0xa4>)
 8006822:	695a      	ldr	r2, [r3, #20]
 8006824:	0512      	lsls	r2, r2, #20
 8006826:	d508      	bpl.n	800683a <EXTI15_10_IRQHandler+0x36>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006828:	4a20      	ldr	r2, [pc, #128]	; (80068ac <EXTI15_10_IRQHandler+0xa8>)
 800682a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		EXTI -> PR = (1U << Pin);
 800682c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006830:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006832:	b112      	cbz	r2, 800683a <EXTI15_10_IRQHandler+0x36>
 8006834:	4b1e      	ldr	r3, [pc, #120]	; (80068b0 <EXTI15_10_IRQHandler+0xac>)
 8006836:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006838:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 800683a:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <EXTI15_10_IRQHandler+0xa4>)
 800683c:	695a      	ldr	r2, [r3, #20]
 800683e:	04d4      	lsls	r4, r2, #19
 8006840:	d508      	bpl.n	8006854 <EXTI15_10_IRQHandler+0x50>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006842:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <EXTI15_10_IRQHandler+0xa8>)
 8006844:	6b12      	ldr	r2, [r2, #48]	; 0x30
		EXTI -> PR = (1U << Pin);
 8006846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800684a:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800684c:	b112      	cbz	r2, 8006854 <EXTI15_10_IRQHandler+0x50>
 800684e:	4b18      	ldr	r3, [pc, #96]	; (80068b0 <EXTI15_10_IRQHandler+0xac>)
 8006850:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006852:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006854:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <EXTI15_10_IRQHandler+0xa4>)
 8006856:	695a      	ldr	r2, [r3, #20]
 8006858:	0490      	lsls	r0, r2, #18
 800685a:	d508      	bpl.n	800686e <EXTI15_10_IRQHandler+0x6a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800685c:	4a13      	ldr	r2, [pc, #76]	; (80068ac <EXTI15_10_IRQHandler+0xa8>)
 800685e:	6b52      	ldr	r2, [r2, #52]	; 0x34
		EXTI -> PR = (1U << Pin);
 8006860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006864:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006866:	b112      	cbz	r2, 800686e <EXTI15_10_IRQHandler+0x6a>
 8006868:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <EXTI15_10_IRQHandler+0xac>)
 800686a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800686c:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 800686e:	4b0e      	ldr	r3, [pc, #56]	; (80068a8 <EXTI15_10_IRQHandler+0xa4>)
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	0451      	lsls	r1, r2, #17
 8006874:	d508      	bpl.n	8006888 <EXTI15_10_IRQHandler+0x84>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006876:	4a0d      	ldr	r2, [pc, #52]	; (80068ac <EXTI15_10_IRQHandler+0xa8>)
 8006878:	6b92      	ldr	r2, [r2, #56]	; 0x38
		EXTI -> PR = (1U << Pin);
 800687a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800687e:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006880:	b112      	cbz	r2, 8006888 <EXTI15_10_IRQHandler+0x84>
 8006882:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <EXTI15_10_IRQHandler+0xac>)
 8006884:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006886:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006888:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <EXTI15_10_IRQHandler+0xa4>)
 800688a:	695a      	ldr	r2, [r3, #20]
 800688c:	0412      	lsls	r2, r2, #16
 800688e:	d50a      	bpl.n	80068a6 <EXTI15_10_IRQHandler+0xa2>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006890:	4a06      	ldr	r2, [pc, #24]	; (80068ac <EXTI15_10_IRQHandler+0xa8>)
 8006892:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
		EXTI -> PR = (1U << Pin);
 8006894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006898:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800689a:	b122      	cbz	r2, 80068a6 <EXTI15_10_IRQHandler+0xa2>
 800689c:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <EXTI15_10_IRQHandler+0xac>)
	EXTI_IRQHandler(11);
	EXTI_IRQHandler(12);
	EXTI_IRQHandler(13);
	EXTI_IRQHandler(14);
	EXTI_IRQHandler(15);
}
 800689e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80068a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80068a4:	4710      	bx	r2
}
 80068a6:	bd10      	pop	{r4, pc}
 80068a8:	40013c00 	.word	0x40013c00
 80068ac:	2000b4d8 	.word	0x2000b4d8
 80068b0:	2000b518 	.word	0x2000b518

080068b4 <sdram_init>:
 * @brief
 *
 * @pre
 * @post
 */
void sdram_init(void){
 80068b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 80068b8:	4c3a      	ldr	r4, [pc, #232]	; (80069a4 <sdram_init+0xf0>)
	sdram_command_t Command;

	Command.mode            = FMC_SDRAM_CMD_CLK_ENABLE;
	if(_conf -> bank == SDRAM_BANK1)
 80068ba:	4d3b      	ldr	r5, [pc, #236]	; (80069a8 <sdram_init+0xf4>)
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 80068bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 80068be:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80069b0 <sdram_init+0xfc>
	if(_conf -> bank == SDRAM_BANK1)
 80068c2:	682a      	ldr	r2, [r5, #0]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 80068c4:	4939      	ldr	r1, [pc, #228]	; (80069ac <sdram_init+0xf8>)
	if(_conf -> bank == SDRAM_BANK1)
 80068c6:	7812      	ldrb	r2, [r2, #0]
void sdram_init(void){
 80068c8:	b088      	sub	sp, #32
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK1;
	else
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 80068ca:	2a00      	cmp	r2, #0
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 80068cc:	9305      	str	r3, [sp, #20]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 80068ce:	9b05      	ldr	r3, [sp, #20]
 80068d0:	ea03 0308 	and.w	r3, r3, r8
 80068d4:	9305      	str	r3, [sp, #20]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 80068d6:	9b05      	ldr	r3, [sp, #20]
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 80068d8:	bf0c      	ite	eq
 80068da:	2710      	moveq	r7, #16
 80068dc:	2708      	movne	r7, #8
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 80068de:	433b      	orrs	r3, r7
 80068e0:	f043 0301 	orr.w	r3, r3, #1
 80068e4:	9305      	str	r3, [sp, #20]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 80068e6:	f241 3688 	movw	r6, #5000	; 0x1388
	SDRAM_DEVICE -> SDCMR = tmpreg;
 80068ea:	9b05      	ldr	r3, [sp, #20]
 80068ec:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 80068ee:	2220      	movs	r2, #32
 80068f0:	2300      	movs	r3, #0
 80068f2:	a806      	add	r0, sp, #24
 80068f4:	9600      	str	r6, [sp, #0]
 80068f6:	f002 fe75 	bl	80095e4 <wait_flag_in_register_timeout>
	Command.autorefresh_num = 1;
	Command.registermode    = 0;
	fmc_sdram_sendcommand(Command);
	delay_ms(1);
 80068fa:	2001      	movs	r0, #1
 80068fc:	f001 fce6 	bl	80082cc <delay_ms>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006900:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006902:	9304      	str	r3, [sp, #16]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006904:	9b04      	ldr	r3, [sp, #16]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006906:	4929      	ldr	r1, [pc, #164]	; (80069ac <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006908:	ea03 0308 	and.w	r3, r3, r8
 800690c:	9304      	str	r3, [sp, #16]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 800690e:	9b04      	ldr	r3, [sp, #16]
 8006910:	433b      	orrs	r3, r7
 8006912:	f043 0302 	orr.w	r3, r3, #2
 8006916:	9304      	str	r3, [sp, #16]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006918:	9b04      	ldr	r3, [sp, #16]
 800691a:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 800691c:	a806      	add	r0, sp, #24
 800691e:	9600      	str	r6, [sp, #0]
 8006920:	2300      	movs	r3, #0
 8006922:	2220      	movs	r2, #32
 8006924:	f002 fe5e 	bl	80095e4 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006928:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800692a:	9303      	str	r3, [sp, #12]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 800692c:	9b03      	ldr	r3, [sp, #12]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 800692e:	491f      	ldr	r1, [pc, #124]	; (80069ac <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006930:	ea03 0308 	and.w	r3, r3, r8
 8006934:	9303      	str	r3, [sp, #12]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	433b      	orrs	r3, r7
 800693a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 800693e:	9303      	str	r3, [sp, #12]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006944:	a806      	add	r0, sp, #24
 8006946:	9600      	str	r6, [sp, #0]
 8006948:	2300      	movs	r3, #0
 800694a:	2220      	movs	r2, #32
 800694c:	f002 fe4a 	bl	80095e4 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006950:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006952:	9302      	str	r3, [sp, #8]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006954:	9b02      	ldr	r3, [sp, #8]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006956:	4915      	ldr	r1, [pc, #84]	; (80069ac <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006958:	ea03 0308 	and.w	r3, r3, r8
 800695c:	9302      	str	r3, [sp, #8]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 800695e:	9b02      	ldr	r3, [sp, #8]
 8006960:	433b      	orrs	r3, r7
 8006962:	f443 2388 	orr.w	r3, r3, #278528	; 0x44000
 8006966:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800696a:	9302      	str	r3, [sp, #8]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 800696c:	9b02      	ldr	r3, [sp, #8]
 800696e:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006970:	a806      	add	r0, sp, #24
 8006972:	2300      	movs	r3, #0
 8006974:	9600      	str	r6, [sp, #0]
 8006976:	2220      	movs	r2, #32
 8006978:	f002 fe34 	bl	80095e4 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDRTR;
 800697c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800697e:	9306      	str	r3, [sp, #24]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006980:	9b06      	ldr	r3, [sp, #24]
	Command.mode            = FMC_SDRAM_CMD_LOAD_MODE;
	Command.registermode =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
	fmc_sdram_sendcommand(Command);
	/* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
		  = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006982:	682a      	ldr	r2, [r5, #0]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006984:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006988:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800698c:	9306      	str	r3, [sp, #24]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 800698e:	9b06      	ldr	r3, [sp, #24]
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006990:	6952      	ldr	r2, [r2, #20]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 8006992:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006996:	9306      	str	r3, [sp, #24]
	SDRAM_DEVICE -> SDRTR = tmpreg;
 8006998:	9b06      	ldr	r3, [sp, #24]
 800699a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800699c:	b008      	add	sp, #32
 800699e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a2:	bf00      	nop
 80069a4:	a0000100 	.word	0xa0000100
 80069a8:	2000b558 	.word	0x2000b558
 80069ac:	a0000158 	.word	0xa0000158
 80069b0:	ffc00000 	.word	0xffc00000

080069b4 <_Z23fmc_sdram_hardware_initv>:
 * @brief
 *
 * @pre
 * @post
 */
void fmc_sdram_hardware_init(void){
 80069b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_port_clock_enable(GPIOC);
 80069b8:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8006cf0 <_Z23fmc_sdram_hardware_initv+0x33c>
	gpio_port_clock_enable(GPIOD);
 80069bc:	4ec8      	ldr	r6, [pc, #800]	; (8006ce0 <_Z23fmc_sdram_hardware_initv+0x32c>)
	gpio_port_clock_enable(GPIOE);
 80069be:	4dc9      	ldr	r5, [pc, #804]	; (8006ce4 <_Z23fmc_sdram_hardware_initv+0x330>)
	gpio_port_clock_enable(GPIOF);
 80069c0:	4cc9      	ldr	r4, [pc, #804]	; (8006ce8 <_Z23fmc_sdram_hardware_initv+0x334>)
	gpio_port_clock_enable(GPIOG);
 80069c2:	4fca      	ldr	r7, [pc, #808]	; (8006cec <_Z23fmc_sdram_hardware_initv+0x338>)
	gpio_port_clock_enable(GPIOC);
 80069c4:	4640      	mov	r0, r8
 80069c6:	f000 fa5d 	bl	8006e84 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOD);
 80069ca:	4630      	mov	r0, r6
 80069cc:	f000 fa5a 	bl	8006e84 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOE);
 80069d0:	4628      	mov	r0, r5
 80069d2:	f000 fa57 	bl	8006e84 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOF);
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fa54 	bl	8006e84 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOG);
 80069dc:	4638      	mov	r0, r7
 80069de:	f000 fa51 	bl	8006e84 <gpio_port_clock_enable>


/**
 * Initialize Address pin.
 */
	gpio_set_alternatefunction(FMC_A0_P, FMC_A0, AF12_FSMC_SDIO_USB);
 80069e2:	4620      	mov	r0, r4
 80069e4:	220c      	movs	r2, #12
 80069e6:	2100      	movs	r1, #0
 80069e8:	f000 fb2a 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A0_P, FMC_A0, GPIO_OUTPUT_PUSHPULL);
 80069ec:	4620      	mov	r0, r4
 80069ee:	2206      	movs	r2, #6
 80069f0:	2100      	movs	r1, #0
 80069f2:	f000 fb63 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A1_P, FMC_A1, AF12_FSMC_SDIO_USB);
 80069f6:	4620      	mov	r0, r4
 80069f8:	220c      	movs	r2, #12
 80069fa:	2101      	movs	r1, #1
 80069fc:	f000 fb20 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A1_P, FMC_A1, GPIO_OUTPUT_PUSHPULL);
 8006a00:	4620      	mov	r0, r4
 8006a02:	2206      	movs	r2, #6
 8006a04:	2101      	movs	r1, #1
 8006a06:	f000 fb59 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A2_P, FMC_A2, AF12_FSMC_SDIO_USB);
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	220c      	movs	r2, #12
 8006a0e:	2102      	movs	r1, #2
 8006a10:	f000 fb16 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A2_P, FMC_A2, GPIO_OUTPUT_PUSHPULL);
 8006a14:	4620      	mov	r0, r4
 8006a16:	2206      	movs	r2, #6
 8006a18:	2102      	movs	r1, #2
 8006a1a:	f000 fb4f 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A3_P, FMC_A3, AF12_FSMC_SDIO_USB);
 8006a1e:	4620      	mov	r0, r4
 8006a20:	220c      	movs	r2, #12
 8006a22:	2103      	movs	r1, #3
 8006a24:	f000 fb0c 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A3_P, FMC_A3, GPIO_OUTPUT_PUSHPULL);
 8006a28:	4620      	mov	r0, r4
 8006a2a:	2206      	movs	r2, #6
 8006a2c:	2103      	movs	r1, #3
 8006a2e:	f000 fb45 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A4_P, FMC_A4, AF12_FSMC_SDIO_USB);
 8006a32:	4620      	mov	r0, r4
 8006a34:	220c      	movs	r2, #12
 8006a36:	2104      	movs	r1, #4
 8006a38:	f000 fb02 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A4_P, FMC_A4, GPIO_OUTPUT_PUSHPULL);
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	2206      	movs	r2, #6
 8006a40:	2104      	movs	r1, #4
 8006a42:	f000 fb3b 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A5_P, FMC_A5, AF12_FSMC_SDIO_USB);
 8006a46:	4620      	mov	r0, r4
 8006a48:	220c      	movs	r2, #12
 8006a4a:	2105      	movs	r1, #5
 8006a4c:	f000 faf8 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A5_P, FMC_A5, GPIO_OUTPUT_PUSHPULL);
 8006a50:	4620      	mov	r0, r4
 8006a52:	2206      	movs	r2, #6
 8006a54:	2105      	movs	r1, #5
 8006a56:	f000 fb31 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A6_P, FMC_A6, AF12_FSMC_SDIO_USB);
 8006a5a:	220c      	movs	r2, #12
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 faee 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A6_P, FMC_A6, GPIO_OUTPUT_PUSHPULL);
 8006a64:	4620      	mov	r0, r4
 8006a66:	2206      	movs	r2, #6
 8006a68:	210c      	movs	r1, #12
 8006a6a:	f000 fb27 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A7_P, FMC_A7, AF12_FSMC_SDIO_USB);
 8006a6e:	4620      	mov	r0, r4
 8006a70:	220c      	movs	r2, #12
 8006a72:	210d      	movs	r1, #13
 8006a74:	f000 fae4 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A7_P, FMC_A7, GPIO_OUTPUT_PUSHPULL);
 8006a78:	4620      	mov	r0, r4
 8006a7a:	2206      	movs	r2, #6
 8006a7c:	210d      	movs	r1, #13
 8006a7e:	f000 fb1d 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A8_P, FMC_A8, AF12_FSMC_SDIO_USB);
 8006a82:	4620      	mov	r0, r4
 8006a84:	220c      	movs	r2, #12
 8006a86:	210e      	movs	r1, #14
 8006a88:	f000 fada 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A8_P, FMC_A8, GPIO_OUTPUT_PUSHPULL);
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	2206      	movs	r2, #6
 8006a90:	210e      	movs	r1, #14
 8006a92:	f000 fb13 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A9_P, FMC_A9, AF12_FSMC_SDIO_USB);
 8006a96:	4620      	mov	r0, r4
 8006a98:	220c      	movs	r2, #12
 8006a9a:	210f      	movs	r1, #15
 8006a9c:	f000 fad0 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A9_P, FMC_A9, GPIO_OUTPUT_PUSHPULL);
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	2206      	movs	r2, #6
 8006aa4:	210f      	movs	r1, #15
 8006aa6:	f000 fb09 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A10_P, FMC_A10, AF12_FSMC_SDIO_USB);
 8006aaa:	4638      	mov	r0, r7
 8006aac:	220c      	movs	r2, #12
 8006aae:	2100      	movs	r1, #0
 8006ab0:	f000 fac6 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A10_P, FMC_A10, GPIO_OUTPUT_PUSHPULL);
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	2206      	movs	r2, #6
 8006ab8:	2100      	movs	r1, #0
 8006aba:	f000 faff 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A11_P, FMC_A11, AF12_FSMC_SDIO_USB);
 8006abe:	4638      	mov	r0, r7
 8006ac0:	220c      	movs	r2, #12
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	f000 fabc 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A11_P, FMC_A11, GPIO_OUTPUT_PUSHPULL);
 8006ac8:	4638      	mov	r0, r7
 8006aca:	2206      	movs	r2, #6
 8006acc:	2101      	movs	r1, #1
 8006ace:	f000 faf5 	bl	80070bc <gpio_set_alternatefunction_type>

/**
 * Initialize dataI/O pin.
 */
	gpio_set_alternatefunction(FMC_D0_P, FMC_D0, AF12_FSMC_SDIO_USB);
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	220c      	movs	r2, #12
 8006ad6:	210e      	movs	r1, #14
 8006ad8:	f000 fab2 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D0_P, FMC_D0, GPIO_OUTPUT_PUSHPULL);
 8006adc:	4630      	mov	r0, r6
 8006ade:	2206      	movs	r2, #6
 8006ae0:	210e      	movs	r1, #14
 8006ae2:	f000 faeb 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D1_P, FMC_D1, AF12_FSMC_SDIO_USB);
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	220c      	movs	r2, #12
 8006aea:	210f      	movs	r1, #15
 8006aec:	f000 faa8 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D1_P, FMC_D1, GPIO_OUTPUT_PUSHPULL);
 8006af0:	4630      	mov	r0, r6
 8006af2:	2206      	movs	r2, #6
 8006af4:	210f      	movs	r1, #15
 8006af6:	f000 fae1 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D2_P, FMC_D2, AF12_FSMC_SDIO_USB);
 8006afa:	4630      	mov	r0, r6
 8006afc:	220c      	movs	r2, #12
 8006afe:	2100      	movs	r1, #0
 8006b00:	f000 fa9e 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D2_P, FMC_D2, GPIO_OUTPUT_PUSHPULL);
 8006b04:	4630      	mov	r0, r6
 8006b06:	2206      	movs	r2, #6
 8006b08:	2100      	movs	r1, #0
 8006b0a:	f000 fad7 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D3_P, FMC_D3, AF12_FSMC_SDIO_USB);
 8006b0e:	4630      	mov	r0, r6
 8006b10:	220c      	movs	r2, #12
 8006b12:	2101      	movs	r1, #1
 8006b14:	f000 fa94 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D3_P, FMC_D3, GPIO_OUTPUT_PUSHPULL);
 8006b18:	4630      	mov	r0, r6
 8006b1a:	2206      	movs	r2, #6
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	f000 facd 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D4_P, FMC_D4, AF12_FSMC_SDIO_USB);
 8006b22:	4628      	mov	r0, r5
 8006b24:	220c      	movs	r2, #12
 8006b26:	2107      	movs	r1, #7
 8006b28:	f000 fa8a 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D4_P, FMC_D4, GPIO_OUTPUT_PUSHPULL);
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	2206      	movs	r2, #6
 8006b30:	2107      	movs	r1, #7
 8006b32:	f000 fac3 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D5_P, FMC_D5, AF12_FSMC_SDIO_USB);
 8006b36:	4628      	mov	r0, r5
 8006b38:	220c      	movs	r2, #12
 8006b3a:	2108      	movs	r1, #8
 8006b3c:	f000 fa80 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D5_P, FMC_D5, GPIO_OUTPUT_PUSHPULL);
 8006b40:	4628      	mov	r0, r5
 8006b42:	2206      	movs	r2, #6
 8006b44:	2108      	movs	r1, #8
 8006b46:	f000 fab9 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D6_P, FMC_D6, AF12_FSMC_SDIO_USB);
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	220c      	movs	r2, #12
 8006b4e:	2109      	movs	r1, #9
 8006b50:	f000 fa76 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D6_P, FMC_D6, GPIO_OUTPUT_PUSHPULL);
 8006b54:	4628      	mov	r0, r5
 8006b56:	2206      	movs	r2, #6
 8006b58:	2109      	movs	r1, #9
 8006b5a:	f000 faaf 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D7_P, FMC_D7, AF12_FSMC_SDIO_USB);
 8006b5e:	4628      	mov	r0, r5
 8006b60:	220c      	movs	r2, #12
 8006b62:	210a      	movs	r1, #10
 8006b64:	f000 fa6c 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D7_P, FMC_D7, GPIO_OUTPUT_PUSHPULL);
 8006b68:	4628      	mov	r0, r5
 8006b6a:	2206      	movs	r2, #6
 8006b6c:	210a      	movs	r1, #10
 8006b6e:	f000 faa5 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D8_P, FMC_D8, AF12_FSMC_SDIO_USB);
 8006b72:	4628      	mov	r0, r5
 8006b74:	220c      	movs	r2, #12
 8006b76:	210b      	movs	r1, #11
 8006b78:	f000 fa62 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D8_P, FMC_D8, GPIO_OUTPUT_PUSHPULL);
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	2206      	movs	r2, #6
 8006b80:	210b      	movs	r1, #11
 8006b82:	f000 fa9b 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D9_P, FMC_D9, AF12_FSMC_SDIO_USB);
 8006b86:	220c      	movs	r2, #12
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 fa58 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D9_P, FMC_D9, GPIO_OUTPUT_PUSHPULL);
 8006b90:	4628      	mov	r0, r5
 8006b92:	2206      	movs	r2, #6
 8006b94:	210c      	movs	r1, #12
 8006b96:	f000 fa91 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D10_P, FMC_D10, AF12_FSMC_SDIO_USB);
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	220c      	movs	r2, #12
 8006b9e:	210d      	movs	r1, #13
 8006ba0:	f000 fa4e 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D10_P, FMC_D10, GPIO_OUTPUT_PUSHPULL);
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	2206      	movs	r2, #6
 8006ba8:	210d      	movs	r1, #13
 8006baa:	f000 fa87 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D11_P, FMC_D11, AF12_FSMC_SDIO_USB);
 8006bae:	4628      	mov	r0, r5
 8006bb0:	220c      	movs	r2, #12
 8006bb2:	210e      	movs	r1, #14
 8006bb4:	f000 fa44 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D11_P, FMC_D11, GPIO_OUTPUT_PUSHPULL);
 8006bb8:	4628      	mov	r0, r5
 8006bba:	2206      	movs	r2, #6
 8006bbc:	210e      	movs	r1, #14
 8006bbe:	f000 fa7d 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D12_P, FMC_D12, AF12_FSMC_SDIO_USB);
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	220c      	movs	r2, #12
 8006bc6:	210f      	movs	r1, #15
 8006bc8:	f000 fa3a 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D12_P, FMC_D12, GPIO_OUTPUT_PUSHPULL);
 8006bcc:	4628      	mov	r0, r5
 8006bce:	2206      	movs	r2, #6
 8006bd0:	210f      	movs	r1, #15
 8006bd2:	f000 fa73 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D13_P, FMC_D13, AF12_FSMC_SDIO_USB);
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	220c      	movs	r2, #12
 8006bda:	2108      	movs	r1, #8
 8006bdc:	f000 fa30 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D13_P, FMC_D13, GPIO_OUTPUT_PUSHPULL);
 8006be0:	4630      	mov	r0, r6
 8006be2:	2206      	movs	r2, #6
 8006be4:	2108      	movs	r1, #8
 8006be6:	f000 fa69 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D14_P, FMC_D14, AF12_FSMC_SDIO_USB);
 8006bea:	4630      	mov	r0, r6
 8006bec:	220c      	movs	r2, #12
 8006bee:	2109      	movs	r1, #9
 8006bf0:	f000 fa26 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D14_P, FMC_D14, GPIO_OUTPUT_PUSHPULL);
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	2206      	movs	r2, #6
 8006bf8:	2109      	movs	r1, #9
 8006bfa:	f000 fa5f 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D15_P, FMC_D15, AF12_FSMC_SDIO_USB);
 8006bfe:	4630      	mov	r0, r6
 8006c00:	220c      	movs	r2, #12
 8006c02:	210a      	movs	r1, #10
 8006c04:	f000 fa1c 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D15_P, FMC_D15, GPIO_OUTPUT_PUSHPULL);
 8006c08:	4630      	mov	r0, r6
 8006c0a:	2206      	movs	r2, #6
 8006c0c:	210a      	movs	r1, #10
 8006c0e:	f000 fa55 	bl	80070bc <gpio_set_alternatefunction_type>

/**
 * Initialize control pin.
 */
	gpio_set_alternatefunction(FMC_NBL0_P, FMC_NBL0, AF12_FSMC_SDIO_USB);
 8006c12:	4628      	mov	r0, r5
 8006c14:	220c      	movs	r2, #12
 8006c16:	2100      	movs	r1, #0
 8006c18:	f000 fa12 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL0_P, FMC_NBL0, GPIO_OUTPUT_PUSHPULL);
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	2206      	movs	r2, #6
 8006c20:	2100      	movs	r1, #0
 8006c22:	f000 fa4b 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NBL1_P, FMC_NBL1, AF12_FSMC_SDIO_USB);
 8006c26:	4628      	mov	r0, r5
 8006c28:	220c      	movs	r2, #12
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	f000 fa08 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL1_P, FMC_NBL1, GPIO_OUTPUT_PUSHPULL);
 8006c30:	4628      	mov	r0, r5
 8006c32:	2206      	movs	r2, #6
 8006c34:	2101      	movs	r1, #1
 8006c36:	f000 fa41 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA0_P, FMC_BA0, AF12_FSMC_SDIO_USB);
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	220c      	movs	r2, #12
 8006c3e:	2104      	movs	r1, #4
 8006c40:	f000 f9fe 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA0_P, FMC_BA0, GPIO_OUTPUT_PUSHPULL);
 8006c44:	4638      	mov	r0, r7
 8006c46:	2206      	movs	r2, #6
 8006c48:	2104      	movs	r1, #4
 8006c4a:	f000 fa37 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA1_P, FMC_BA1, AF12_FSMC_SDIO_USB);
 8006c4e:	4638      	mov	r0, r7
 8006c50:	220c      	movs	r2, #12
 8006c52:	2105      	movs	r1, #5
 8006c54:	f000 f9f4 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA1_P, FMC_BA1, GPIO_OUTPUT_PUSHPULL);
 8006c58:	4638      	mov	r0, r7
 8006c5a:	2206      	movs	r2, #6
 8006c5c:	2105      	movs	r1, #5
 8006c5e:	f000 fa2d 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CAS_P, FMC_CAS, AF12_FSMC_SDIO_USB);
 8006c62:	4638      	mov	r0, r7
 8006c64:	220c      	movs	r2, #12
 8006c66:	210f      	movs	r1, #15
 8006c68:	f000 f9ea 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CAS_P, FMC_CAS, GPIO_OUTPUT_PUSHPULL);
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	2206      	movs	r2, #6
 8006c70:	210f      	movs	r1, #15
 8006c72:	f000 fa23 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_RAS_P, FMC_RAS, AF12_FSMC_SDIO_USB);
 8006c76:	4620      	mov	r0, r4
 8006c78:	220c      	movs	r2, #12
 8006c7a:	210b      	movs	r1, #11
 8006c7c:	f000 f9e0 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_RAS_P, FMC_RAS, GPIO_OUTPUT_PUSHPULL);
 8006c80:	4620      	mov	r0, r4
 8006c82:	2206      	movs	r2, #6
 8006c84:	210b      	movs	r1, #11
 8006c86:	f000 fa19 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CLK_P, FMC_CLK, AF12_FSMC_SDIO_USB);
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	220c      	movs	r2, #12
 8006c8e:	2108      	movs	r1, #8
 8006c90:	f000 f9d6 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CLK_P, FMC_CLK, GPIO_OUTPUT_PUSHPULL);
 8006c94:	4638      	mov	r0, r7
 8006c96:	2206      	movs	r2, #6
 8006c98:	2108      	movs	r1, #8
 8006c9a:	f000 fa0f 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NWE_P, FMC_NWE, AF12_FSMC_SDIO_USB);
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	220c      	movs	r2, #12
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	f000 f9cc 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NWE_P, FMC_NWE, GPIO_OUTPUT_PUSHPULL);
 8006ca8:	4640      	mov	r0, r8
 8006caa:	2206      	movs	r2, #6
 8006cac:	2100      	movs	r1, #0
 8006cae:	f000 fa05 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NE_P, FMC_NE, AF12_FSMC_SDIO_USB);
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	220c      	movs	r2, #12
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	f000 f9c2 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NE_P, FMC_NE, GPIO_OUTPUT_PUSHPULL);
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	2206      	movs	r2, #6
 8006cc0:	2102      	movs	r1, #2
 8006cc2:	f000 f9fb 	bl	80070bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CKE_P, FMC_CKE, AF12_FSMC_SDIO_USB);
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	220c      	movs	r2, #12
 8006cca:	2103      	movs	r1, #3
 8006ccc:	f000 f9b8 	bl	8007040 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	2206      	movs	r2, #6

}
 8006cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006cd8:	2103      	movs	r1, #3
 8006cda:	f000 b9ef 	b.w	80070bc <gpio_set_alternatefunction_type>
 8006cde:	bf00      	nop
 8006ce0:	40020c00 	.word	0x40020c00
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	40021400 	.word	0x40021400
 8006cec:	40021800 	.word	0x40021800
 8006cf0:	40020800 	.word	0x40020800

08006cf4 <fmc_sdram_init>:
void fmc_sdram_init(sdram_config_t *conf){
 8006cf4:	b530      	push	{r4, r5, lr}
	_conf = conf;
 8006cf6:	4c60      	ldr	r4, [pc, #384]	; (8006e78 <fmc_sdram_init+0x184>)
void fmc_sdram_init(sdram_config_t *conf){
 8006cf8:	b083      	sub	sp, #12
	_conf = conf;
 8006cfa:	6020      	str	r0, [r4, #0]
	fmc_sdram_hardware_init();
 8006cfc:	f7ff fe5a 	bl	80069b4 <_Z23fmc_sdram_hardware_initv>
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006d00:	4a5e      	ldr	r2, [pc, #376]	; (8006e7c <fmc_sdram_init+0x188>)
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006d02:	495f      	ldr	r1, [pc, #380]	; (8006e80 <fmc_sdram_init+0x18c>)
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006d04:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	6393      	str	r3, [r2, #56]	; 0x38
	if(_conf -> bank == SDRAM_BANK1){
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	d148      	bne.n	8006da6 <fmc_sdram_init+0xb2>
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006d14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d16:	9100      	str	r1, [sp, #0]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006d18:	7a9c      	ldrb	r4, [r3, #10]
 8006d1a:	891a      	ldrh	r2, [r3, #8]
		tmpreg &=~ 0xFFFFU;
 8006d1c:	9900      	ldr	r1, [sp, #0]
				| _conf -> rowaddr_size | _conf -> data_size
 8006d1e:	7ad8      	ldrb	r0, [r3, #11]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006d20:	4322      	orrs	r2, r4
				| _conf -> rowaddr_size | _conf -> data_size
 8006d22:	7b1c      	ldrb	r4, [r3, #12]
 8006d24:	4302      	orrs	r2, r0
		tmpreg &=~ 0xFFFFU;
 8006d26:	0c09      	lsrs	r1, r1, #16
				| _conf -> num_banks | _conf -> cas_latency
 8006d28:	7b58      	ldrb	r0, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 8006d2a:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8006d2c:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency
 8006d2e:	89dc      	ldrh	r4, [r3, #14]
		tmpreg &=~ 0xFFFFU;
 8006d30:	9100      	str	r1, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 8006d32:	4302      	orrs	r2, r0
			    | _conf ->read_delay;
 8006d34:	8a19      	ldrh	r1, [r3, #16]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006d36:	9800      	ldr	r0, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 8006d38:	4322      	orrs	r2, r4
			    | _conf ->read_delay;
 8006d3a:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006d3c:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006d3e:	4302      	orrs	r2, r0
 8006d40:	9200      	str	r2, [sp, #0]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006d42:	b119      	cbz	r1, 8006d4c <fmc_sdram_init+0x58>
 8006d44:	9a00      	ldr	r2, [sp, #0]
 8006d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d4a:	9200      	str	r2, [sp, #0]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006d4c:	7cda      	ldrb	r2, [r3, #19]
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	f040 808c 	bne.w	8006e6c <fmc_sdram_init+0x178>
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8006d54:	494a      	ldr	r1, [pc, #296]	; (8006e80 <fmc_sdram_init+0x18c>)
 8006d56:	9a00      	ldr	r2, [sp, #0]
 8006d58:	640a      	str	r2, [r1, #64]	; 0x40
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 8006d5a:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8006d5c:	9200      	str	r2, [sp, #0]
		tmpreg &=~ 0xFFFFFFFF;
 8006d5e:	2000      	movs	r0, #0
 8006d60:	9a00      	ldr	r2, [sp, #0]
 8006d62:	9000      	str	r0, [sp, #0]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006d64:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006d66:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006d68:	9d00      	ldr	r5, [sp, #0]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006d6a:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006d6c:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006d6e:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006d70:	432a      	orrs	r2, r5
 8006d72:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006d76:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006d78:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006d7c:	e9d3 4009 	ldrd	r4, r0, [r3, #36]	; 0x24
				| ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006d80:	3c01      	subs	r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006d82:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006d86:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006d88:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006d8c:	e9d3 400b 	ldrd	r4, r0, [r3, #44]	; 0x2c
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos)
 8006d90:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006d92:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006d96:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006d98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d9c:	9300      	str	r3, [sp, #0]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8006d9e:	9b00      	ldr	r3, [sp, #0]
 8006da0:	648b      	str	r3, [r1, #72]	; 0x48
}
 8006da2:	b003      	add	sp, #12
 8006da4:	bd30      	pop	{r4, r5, pc}
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006da6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006da8:	9101      	str	r1, [sp, #4]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 8006daa:	9901      	ldr	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006dac:	891a      	ldrh	r2, [r3, #8]
 8006dae:	8a1c      	ldrh	r4, [r3, #16]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 8006db0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8006db4:	9101      	str	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006db6:	9801      	ldr	r0, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006db8:	7cd9      	ldrb	r1, [r3, #19]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006dba:	4322      	orrs	r2, r4
 8006dbc:	b292      	uxth	r2, r2
 8006dbe:	4302      	orrs	r2, r0
 8006dc0:	9201      	str	r2, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006dc2:	b119      	cbz	r1, 8006dcc <fmc_sdram_init+0xd8>
 8006dc4:	9a01      	ldr	r2, [sp, #4]
 8006dc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dca:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8006dcc:	4a2c      	ldr	r2, [pc, #176]	; (8006e80 <fmc_sdram_init+0x18c>)
 8006dce:	9901      	ldr	r1, [sp, #4]
 8006dd0:	6411      	str	r1, [r2, #64]	; 0x40
		tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK2];
 8006dd2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006dd4:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFU;
 8006dd6:	9901      	ldr	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 8006dd8:	7adc      	ldrb	r4, [r3, #11]
 8006dda:	7a9a      	ldrb	r2, [r3, #10]
 8006ddc:	7b18      	ldrb	r0, [r3, #12]
		tmpreg &=~ 0xFFFFU;
 8006dde:	0c09      	lsrs	r1, r1, #16
 8006de0:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8006de2:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency;
 8006de4:	7b5c      	ldrb	r4, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 8006de6:	9101      	str	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 8006de8:	4302      	orrs	r2, r0
				| _conf -> num_banks | _conf -> cas_latency;
 8006dea:	89d9      	ldrh	r1, [r3, #14]
		tmpreg |= _conf -> coladdr_size
 8006dec:	9801      	ldr	r0, [sp, #4]
				| _conf -> num_banks | _conf -> cas_latency;
 8006dee:	4322      	orrs	r2, r4
 8006df0:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006df2:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> coladdr_size
 8006df4:	4302      	orrs	r2, r0
 8006df6:	9201      	str	r2, [sp, #4]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006df8:	b119      	cbz	r1, 8006e02 <fmc_sdram_init+0x10e>
 8006dfa:	9a01      	ldr	r2, [sp, #4]
 8006dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e00:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK2] = tmpreg;
 8006e02:	491f      	ldr	r1, [pc, #124]	; (8006e80 <fmc_sdram_init+0x18c>)
 8006e04:	9a01      	ldr	r2, [sp, #4]
 8006e06:	644a      	str	r2, [r1, #68]	; 0x44
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 8006e08:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8006e0a:	9201      	str	r2, [sp, #4]
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 8006e0c:	9801      	ldr	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006e10:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 8006e12:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 8006e16:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
 8006e1a:	9001      	str	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8006e1c:	3a01      	subs	r2, #1
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006e1e:	9801      	ldr	r0, [sp, #4]
 8006e20:	3c01      	subs	r4, #1
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8006e22:	0512      	lsls	r2, r2, #20
 8006e24:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006e28:	4302      	orrs	r2, r0
 8006e2a:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8006e2c:	9a01      	ldr	r2, [sp, #4]
 8006e2e:	648a      	str	r2, [r1, #72]	; 0x48
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK2];
 8006e30:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006e32:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFFFFF;
 8006e34:	2000      	movs	r0, #0
 8006e36:	9a01      	ldr	r2, [sp, #4]
 8006e38:	9001      	str	r0, [sp, #4]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006e3a:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006e3c:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006e3e:	9d01      	ldr	r5, [sp, #4]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006e40:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006e42:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006e44:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006e46:	432a      	orrs	r2, r5
 8006e48:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006e4c:	3801      	subs	r0, #1
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006e4e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006e50:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006e54:	6b18      	ldr	r0, [r3, #48]	; 0x30
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006e56:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006e58:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006e5c:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006e5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006e62:	9301      	str	r3, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK2] = tmpreg;
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8006e68:	b003      	add	sp, #12
 8006e6a:	bd30      	pop	{r4, r5, pc}
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006e6c:	9a00      	ldr	r2, [sp, #0]
 8006e6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e72:	9200      	str	r2, [sp, #0]
 8006e74:	e76e      	b.n	8006d54 <fmc_sdram_init+0x60>
 8006e76:	bf00      	nop
 8006e78:	2000b558 	.word	0x2000b558
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	a0000100 	.word	0xa0000100

08006e84 <gpio_port_clock_enable>:
 * @post
 * @param port gpio port selected.
 */
void gpio_port_clock_enable(GPIO_TypeDef *port){
#if defined(GPIOA)
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 8006e84:	4b28      	ldr	r3, [pc, #160]	; (8006f28 <gpio_port_clock_enable+0xa4>)
 8006e86:	4298      	cmp	r0, r3
 8006e88:	d01e      	beq.n	8006ec8 <gpio_port_clock_enable+0x44>
#endif /* defined(GPIOA */
#if defined(GPIOB)
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 8006e8a:	4b28      	ldr	r3, [pc, #160]	; (8006f2c <gpio_port_clock_enable+0xa8>)
 8006e8c:	4298      	cmp	r0, r3
 8006e8e:	d021      	beq.n	8006ed4 <gpio_port_clock_enable+0x50>
#endif /* defined(GPIOB */
#if defined(GPIOC)
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 8006e90:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <gpio_port_clock_enable+0xac>)
 8006e92:	4298      	cmp	r0, r3
 8006e94:	d024      	beq.n	8006ee0 <gpio_port_clock_enable+0x5c>
#endif /* defined(GPIOC */
#if defined(GPIOD)
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 8006e96:	4b27      	ldr	r3, [pc, #156]	; (8006f34 <gpio_port_clock_enable+0xb0>)
 8006e98:	4298      	cmp	r0, r3
 8006e9a:	d00f      	beq.n	8006ebc <gpio_port_clock_enable+0x38>
#endif /* defined(GPIOD */
#if defined(GPIOE)
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8006e9c:	4b26      	ldr	r3, [pc, #152]	; (8006f38 <gpio_port_clock_enable+0xb4>)
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	d024      	beq.n	8006eec <gpio_port_clock_enable+0x68>
#endif /* defined(GPIOE */
#if defined(GPIOF)
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 8006ea2:	4b26      	ldr	r3, [pc, #152]	; (8006f3c <gpio_port_clock_enable+0xb8>)
 8006ea4:	4298      	cmp	r0, r3
 8006ea6:	d027      	beq.n	8006ef8 <gpio_port_clock_enable+0x74>
#endif /* defined(GPIOF */
#if defined(GPIOG)
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 8006ea8:	4b25      	ldr	r3, [pc, #148]	; (8006f40 <gpio_port_clock_enable+0xbc>)
 8006eaa:	4298      	cmp	r0, r3
 8006eac:	d02a      	beq.n	8006f04 <gpio_port_clock_enable+0x80>
#endif /* defined(GPIOG */
#if defined(GPIOH)
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 8006eae:	4b25      	ldr	r3, [pc, #148]	; (8006f44 <gpio_port_clock_enable+0xc0>)
 8006eb0:	4298      	cmp	r0, r3
 8006eb2:	d033      	beq.n	8006f1c <gpio_port_clock_enable+0x98>
#endif /* defined(GPIOH */
#if defined(GPIOI)
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 8006eb4:	4b24      	ldr	r3, [pc, #144]	; (8006f48 <gpio_port_clock_enable+0xc4>)
 8006eb6:	4298      	cmp	r0, r3
 8006eb8:	d02a      	beq.n	8006f10 <gpio_port_clock_enable+0x8c>
#endif /* defined(GPIO */

}
 8006eba:	4770      	bx	lr
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 8006ebc:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <gpio_port_clock_enable+0xc8>)
 8006ebe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006ec0:	f043 0308 	orr.w	r3, r3, #8
 8006ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec6:	4770      	bx	lr
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 8006ec8:	4a20      	ldr	r2, [pc, #128]	; (8006f4c <gpio_port_clock_enable+0xc8>)
 8006eca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006ecc:	f043 0301 	orr.w	r3, r3, #1
 8006ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ed2:	4770      	bx	lr
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 8006ed4:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <gpio_port_clock_enable+0xc8>)
 8006ed6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006ed8:	f043 0302 	orr.w	r3, r3, #2
 8006edc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ede:	4770      	bx	lr
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 8006ee0:	4a1a      	ldr	r2, [pc, #104]	; (8006f4c <gpio_port_clock_enable+0xc8>)
 8006ee2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006ee4:	f043 0304 	orr.w	r3, r3, #4
 8006ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eea:	4770      	bx	lr
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8006eec:	4a17      	ldr	r2, [pc, #92]	; (8006f4c <gpio_port_clock_enable+0xc8>)
 8006eee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006ef0:	f043 0310 	orr.w	r3, r3, #16
 8006ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef6:	4770      	bx	lr
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 8006ef8:	4a14      	ldr	r2, [pc, #80]	; (8006f4c <gpio_port_clock_enable+0xc8>)
 8006efa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006efc:	f043 0320 	orr.w	r3, r3, #32
 8006f00:	6313      	str	r3, [r2, #48]	; 0x30
 8006f02:	4770      	bx	lr
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 8006f04:	4a11      	ldr	r2, [pc, #68]	; (8006f4c <gpio_port_clock_enable+0xc8>)
 8006f06:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0e:	4770      	bx	lr
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 8006f10:	4a0e      	ldr	r2, [pc, #56]	; (8006f4c <gpio_port_clock_enable+0xc8>)
 8006f12:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f18:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1a:	e7ce      	b.n	8006eba <gpio_port_clock_enable+0x36>
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 8006f1c:	4a0b      	ldr	r2, [pc, #44]	; (8006f4c <gpio_port_clock_enable+0xc8>)
 8006f1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f24:	6313      	str	r3, [r2, #48]	; 0x30
 8006f26:	4770      	bx	lr
 8006f28:	40020000 	.word	0x40020000
 8006f2c:	40020400 	.word	0x40020400
 8006f30:	40020800 	.word	0x40020800
 8006f34:	40020c00 	.word	0x40020c00
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	40021400 	.word	0x40021400
 8006f40:	40021800 	.word	0x40021800
 8006f44:	40021c00 	.word	0x40021c00
 8006f48:	40022000 	.word	0x40022000
 8006f4c:	40023800 	.word	0x40023800

08006f50 <gpio_set_mode>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 * @param mode gpio pin mode.
 */
void gpio_set_mode(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
 8006f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f52:	b083      	sub	sp, #12
	else if(mode == GPIO_INPUT_PULLDOWN || mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN)
		gpio_set_pulldown(port, pin);


#elif defined(STM32F4)
	__IO uint32_t tmpreg = 0U;
 8006f54:	2300      	movs	r3, #0
	/* *************************************************** */
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 8006f56:	2a02      	cmp	r2, #2
	__IO uint32_t tmpreg = 0U;
 8006f58:	9301      	str	r3, [sp, #4]
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 8006f5a:	d81b      	bhi.n	8006f94 <gpio_set_mode+0x44>
		port -> MODER &=~ (3U << (pin * 2));
 8006f5c:	6804      	ldr	r4, [r0, #0]
 8006f5e:	0049      	lsls	r1, r1, #1
 8006f60:	2303      	movs	r3, #3
 8006f62:	408b      	lsls	r3, r1
 8006f64:	ea24 0403 	bic.w	r4, r4, r3
 8006f68:	6004      	str	r4, [r0, #0]

		tmpreg = port -> PUPDR;
 8006f6a:	68c4      	ldr	r4, [r0, #12]
 8006f6c:	9401      	str	r4, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 8006f6e:	9c01      	ldr	r4, [sp, #4]
		switch(mode){
 8006f70:	2a01      	cmp	r2, #1
		tmpreg &=~ (3U << (pin * 2));
 8006f72:	ea24 0303 	bic.w	r3, r4, r3
 8006f76:	9301      	str	r3, [sp, #4]
		switch(mode){
 8006f78:	d001      	beq.n	8006f7e <gpio_set_mode+0x2e>
 8006f7a:	2a02      	cmp	r2, #2
 8006f7c:	d104      	bne.n	8006f88 <gpio_set_mode+0x38>
			case GPIO_INPUT_PULLUP:
				tmpreg |=  (1U << (pin * 2));
			break;
			case GPIO_INPUT_PULLDOWN:
				tmpreg |=  (2U << (pin * 2));
 8006f7e:	9b01      	ldr	r3, [sp, #4]
 8006f80:	fa02 f101 	lsl.w	r1, r2, r1
 8006f84:	4319      	orrs	r1, r3
 8006f86:	9101      	str	r1, [sp, #4]

		tmpreg = port -> PUPDR;
		tmpreg &=~ (3U << (pin * 2));
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
		port -> PUPDR |=tmpreg;
 8006f88:	9a01      	ldr	r2, [sp, #4]
 8006f8a:	68c3      	ldr	r3, [r0, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60c3      	str	r3, [r0, #12]
	/* *************************************************** */
	else{ // GPIO_ANALOG.
		port -> MODER |= (3U << (pin * 2));
	}
#endif /* STM32F4 */
}
 8006f90:	b003      	add	sp, #12
 8006f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_PUSHPULL_PULLDOWN){ // GPIO_OUTPUT.
 8006f94:	1ed3      	subs	r3, r2, #3
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b05      	cmp	r3, #5
 8006f9a:	d829      	bhi.n	8006ff0 <gpio_set_mode+0xa0>
		port -> MODER &=~ (3U << (pin * 2));
 8006f9c:	6806      	ldr	r6, [r0, #0]
 8006f9e:	004d      	lsls	r5, r1, #1
 8006fa0:	2403      	movs	r4, #3
 8006fa2:	40ac      	lsls	r4, r5
 8006fa4:	ea26 0604 	bic.w	r6, r6, r4
 8006fa8:	6006      	str	r6, [r0, #0]
		port -> MODER |=  (1U << (pin * 2));
 8006faa:	6807      	ldr	r7, [r0, #0]
 8006fac:	f04f 0c01 	mov.w	ip, #1
 8006fb0:	fa0c f605 	lsl.w	r6, ip, r5
 8006fb4:	4337      	orrs	r7, r6
 8006fb6:	6007      	str	r7, [r0, #0]
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 8006fb8:	2b02      	cmp	r3, #2
		port -> MODER &=~ (3U << (pin * 2));
 8006fba:	ea6f 0e04 	mvn.w	lr, r4
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 8006fbe:	6843      	ldr	r3, [r0, #4]
 8006fc0:	fa0c f101 	lsl.w	r1, ip, r1
 8006fc4:	d81d      	bhi.n	8007002 <gpio_set_mode+0xb2>
 8006fc6:	4319      	orrs	r1, r3
 8006fc8:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 8006fca:	6883      	ldr	r3, [r0, #8]
 8006fcc:	ea0e 0303 	and.w	r3, lr, r3
 8006fd0:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8006fd2:	6883      	ldr	r3, [r0, #8]
 8006fd4:	431c      	orrs	r4, r3
 8006fd6:	6084      	str	r4, [r0, #8]
		tmpreg = port -> PUPDR;
 8006fd8:	68c3      	ldr	r3, [r0, #12]
 8006fda:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 8006fdc:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8006fde:	2a04      	cmp	r2, #4
		tmpreg &=~ (3U << (pin * 2));
 8006fe0:	ea0e 0303 	and.w	r3, lr, r3
 8006fe4:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8006fe6:	d127      	bne.n	8007038 <gpio_set_mode+0xe8>
 8006fe8:	9b01      	ldr	r3, [sp, #4]
 8006fea:	431e      	orrs	r6, r3
 8006fec:	9601      	str	r6, [sp, #4]
 8006fee:	e7cb      	b.n	8006f88 <gpio_set_mode+0x38>
		port -> MODER |= (3U << (pin * 2));
 8006ff0:	6802      	ldr	r2, [r0, #0]
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	0049      	lsls	r1, r1, #1
 8006ff6:	fa03 f101 	lsl.w	r1, r3, r1
 8006ffa:	4311      	orrs	r1, r2
 8006ffc:	6001      	str	r1, [r0, #0]
}
 8006ffe:	b003      	add	sp, #12
 8007000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else port -> OTYPER &=~ (1U << pin);
 8007002:	ea23 0101 	bic.w	r1, r3, r1
 8007006:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 8007008:	6883      	ldr	r3, [r0, #8]
 800700a:	ea0e 0303 	and.w	r3, lr, r3
 800700e:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8007010:	6883      	ldr	r3, [r0, #8]
 8007012:	431c      	orrs	r4, r3
 8007014:	6084      	str	r4, [r0, #8]
		tmpreg = port -> PUPDR;
 8007016:	68c3      	ldr	r3, [r0, #12]
 8007018:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 800701a:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 800701c:	2a07      	cmp	r2, #7
		tmpreg &=~ (3U << (pin * 2));
 800701e:	ea0e 0303 	and.w	r3, lr, r3
 8007022:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8007024:	d0e0      	beq.n	8006fe8 <gpio_set_mode+0x98>
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
 8007026:	2a08      	cmp	r2, #8
 8007028:	d1ae      	bne.n	8006f88 <gpio_set_mode+0x38>
 800702a:	9a01      	ldr	r2, [sp, #4]
 800702c:	2302      	movs	r3, #2
 800702e:	fa03 f505 	lsl.w	r5, r3, r5
 8007032:	4315      	orrs	r5, r2
 8007034:	9501      	str	r5, [sp, #4]
 8007036:	e7a7      	b.n	8006f88 <gpio_set_mode+0x38>
 8007038:	2a05      	cmp	r2, #5
 800703a:	d0f6      	beq.n	800702a <gpio_set_mode+0xda>
 800703c:	e7a4      	b.n	8006f88 <gpio_set_mode+0x38>
 800703e:	bf00      	nop

08007040 <gpio_set_alternatefunction>:
		if(function == GPIO_ALTERNATE_OPENDRAIN) port -> CRH |= (3UL << (2 + (pin-8)*4));
		else port -> CRH |= (2UL << (2 + (pin-8)*4));

	}
#elif defined(STM32F4)
	port -> MODER &=~ (3U << (pin*2));
 8007040:	ea4f 0c41 	mov.w	ip, r1, lsl #1
void gpio_set_alternatefunction(GPIO_TypeDef *port, uint16_t pin, gpio_alternatefunction_t function){
 8007044:	b430      	push	{r4, r5}
	port -> MODER &=~ (3U << (pin*2));
 8007046:	2303      	movs	r3, #3
 8007048:	6805      	ldr	r5, [r0, #0]
 800704a:	fa03 f30c 	lsl.w	r3, r3, ip
 800704e:	ea25 0503 	bic.w	r5, r5, r3
 8007052:	6005      	str	r5, [r0, #0]
	port -> MODER |=  (2U << (pin*2));
 8007054:	6805      	ldr	r5, [r0, #0]
 8007056:	2402      	movs	r4, #2
 8007058:	fa04 f40c 	lsl.w	r4, r4, ip
 800705c:	432c      	orrs	r4, r5
 800705e:	6004      	str	r4, [r0, #0]

	port -> OTYPER &=~ (1U<<pin);
 8007060:	6844      	ldr	r4, [r0, #4]
 8007062:	f04f 0c01 	mov.w	ip, #1
 8007066:	fa0c fc01 	lsl.w	ip, ip, r1
 800706a:	ea24 040c 	bic.w	r4, r4, ip
 800706e:	6044      	str	r4, [r0, #4]

	port -> OSPEEDR &=~ (3U << (pin * 2));
 8007070:	6884      	ldr	r4, [r0, #8]
 8007072:	ea24 0403 	bic.w	r4, r4, r3
 8007076:	6084      	str	r4, [r0, #8]
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8007078:	6884      	ldr	r4, [r0, #8]

	if(pin < 8){
 800707a:	2907      	cmp	r1, #7
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 800707c:	ea43 0304 	orr.w	r3, r3, r4
 8007080:	6083      	str	r3, [r0, #8]
	if(pin < 8){
 8007082:	d80d      	bhi.n	80070a0 <gpio_set_alternatefunction+0x60>
		port -> AFR[0] &=~ (0x0FU << (pin*4));
 8007084:	6a03      	ldr	r3, [r0, #32]
 8007086:	0089      	lsls	r1, r1, #2
 8007088:	240f      	movs	r4, #15
 800708a:	408c      	lsls	r4, r1
 800708c:	ea23 0304 	bic.w	r3, r3, r4
 8007090:	6203      	str	r3, [r0, #32]
		port -> AFR[0] |=  (function  << (pin*4));
 8007092:	6a03      	ldr	r3, [r0, #32]
 8007094:	fa02 f101 	lsl.w	r1, r2, r1
 8007098:	4319      	orrs	r1, r3
	else{
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
		port -> AFR[1] |=  (function  << ((pin-8)*4));
	}
#endif /* STM32F4 */
}
 800709a:	bc30      	pop	{r4, r5}
		port -> AFR[0] |=  (function  << (pin*4));
 800709c:	6201      	str	r1, [r0, #32]
}
 800709e:	4770      	bx	lr
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
 80070a0:	3908      	subs	r1, #8
 80070a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80070a4:	0089      	lsls	r1, r1, #2
 80070a6:	240f      	movs	r4, #15
 80070a8:	408c      	lsls	r4, r1
 80070aa:	ea23 0304 	bic.w	r3, r3, r4
 80070ae:	6243      	str	r3, [r0, #36]	; 0x24
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 80070b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80070b2:	408a      	lsls	r2, r1
 80070b4:	431a      	orrs	r2, r3
}
 80070b6:	bc30      	pop	{r4, r5}
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 80070b8:	6242      	str	r2, [r0, #36]	; 0x24
}
 80070ba:	4770      	bx	lr

080070bc <gpio_set_alternatefunction_type>:
 * @param pin  gpio pin selected.
 * @param mode gpio mode(type).
 */
void gpio_set_alternatefunction_type(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
#if defined(STM32F4)
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 80070bc:	2a03      	cmp	r2, #3
 80070be:	d00a      	beq.n	80070d6 <gpio_set_alternatefunction_type+0x1a>
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 80070c0:	2a06      	cmp	r2, #6
 80070c2:	d000      	beq.n	80070c6 <gpio_set_alternatefunction_type+0xa>
#endif /* STM32F4 */
}
 80070c4:	4770      	bx	lr
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 80070c6:	6843      	ldr	r3, [r0, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	fa02 f101 	lsl.w	r1, r2, r1
 80070ce:	ea23 0101 	bic.w	r1, r3, r1
 80070d2:	6041      	str	r1, [r0, #4]
}
 80070d4:	4770      	bx	lr
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 80070d6:	6842      	ldr	r2, [r0, #4]
 80070d8:	2301      	movs	r3, #1
 80070da:	fa03 f101 	lsl.w	r1, r3, r1
 80070de:	4311      	orrs	r1, r2
 80070e0:	6041      	str	r1, [r0, #4]
 80070e2:	4770      	bx	lr

080070e4 <gpio_set_pulldown>:
 */
void gpio_set_pulldown(GPIO_TypeDef *port, uint16_t pin){
#if defined(STM32F1)
	port -> ODR &=~ (1 << pin);
#elif defined(STM32F4)
	port ->PUPDR &=~ (3U << (pin*2));
 80070e4:	68c3      	ldr	r3, [r0, #12]
 80070e6:	0049      	lsls	r1, r1, #1
 80070e8:	2203      	movs	r2, #3
 80070ea:	408a      	lsls	r2, r1
 80070ec:	ea23 0302 	bic.w	r3, r3, r2
 80070f0:	60c3      	str	r3, [r0, #12]
	port ->PUPDR |= (2U << (pin*2));
 80070f2:	68c2      	ldr	r2, [r0, #12]
 80070f4:	2302      	movs	r3, #2
 80070f6:	fa03 f101 	lsl.w	r1, r3, r1
 80070fa:	4311      	orrs	r1, r2
 80070fc:	60c1      	str	r1, [r0, #12]
#endif /* STM32F4 */
}
 80070fe:	4770      	bx	lr

08007100 <gpio_set>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_set(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << pin);
 8007100:	6982      	ldr	r2, [r0, #24]
 8007102:	2301      	movs	r3, #1
 8007104:	fa03 f101 	lsl.w	r1, r3, r1
 8007108:	4311      	orrs	r1, r2
 800710a:	6181      	str	r1, [r0, #24]
}
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop

08007110 <gpio_reset>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_reset(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << (pin + 16));
 8007110:	6982      	ldr	r2, [r0, #24]
 8007112:	3110      	adds	r1, #16
 8007114:	2301      	movs	r3, #1
 8007116:	fa03 f101 	lsl.w	r1, r3, r1
 800711a:	4311      	orrs	r1, r2
 800711c:	6181      	str	r1, [r0, #24]
}
 800711e:	4770      	bx	lr

08007120 <gpio_toggle>:
 * @pre
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_toggle(GPIO_TypeDef *port, uint16_t pin){
 8007120:	b410      	push	{r4}
	(port -> ODR & (1<<pin))? gpio_reset(port, pin) : gpio_set(port, pin);
 8007122:	2301      	movs	r3, #1
 8007124:	6944      	ldr	r4, [r0, #20]
 8007126:	fa03 f201 	lsl.w	r2, r3, r1
 800712a:	4214      	tst	r4, r2
 800712c:	d008      	beq.n	8007140 <gpio_toggle+0x20>
	port -> BSRR |= (1 << (pin + 16));
 800712e:	6982      	ldr	r2, [r0, #24]
}
 8007130:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << (pin + 16));
 8007134:	3110      	adds	r1, #16
 8007136:	fa03 f101 	lsl.w	r1, r3, r1
 800713a:	4311      	orrs	r1, r2
 800713c:	6181      	str	r1, [r0, #24]
}
 800713e:	4770      	bx	lr
	port -> BSRR |= (1 << pin);
 8007140:	6983      	ldr	r3, [r0, #24]
}
 8007142:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << pin);
 8007146:	431a      	orrs	r2, r3
 8007148:	6182      	str	r2, [r0, #24]
}
 800714a:	4770      	bx	lr

0800714c <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef>:
i2c i2c_3(I2C3);
i2c_t i2c3 = &i2c_3;
void I2C3_IRQHandler(void);
void I2C3_IRQHandler(void){

}
 800714c:	b410      	push	{r4}
i2c::i2c(I2C_TypeDef *i2c){
 800714e:	480a      	ldr	r0, [pc, #40]	; (8007178 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x2c>)
 8007150:	4c0a      	ldr	r4, [pc, #40]	; (800717c <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x30>)
 8007152:	490b      	ldr	r1, [pc, #44]	; (8007180 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x34>)
 8007154:	2200      	movs	r2, #0
 8007156:	2300      	movs	r3, #0
 8007158:	e9c4 2300 	strd	r2, r3, [r4]
 800715c:	e9c0 2300 	strd	r2, r3, [r0]
 8007160:	e9c1 2300 	strd	r2, r3, [r1]
	_i2c = i2c;
 8007164:	4b07      	ldr	r3, [pc, #28]	; (8007184 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x38>)
 8007166:	60a3      	str	r3, [r4, #8]
 8007168:	4a07      	ldr	r2, [pc, #28]	; (8007188 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x3c>)
}
 800716a:	f85d 4b04 	ldr.w	r4, [sp], #4
	_i2c = i2c;
 800716e:	6082      	str	r2, [r0, #8]
 8007170:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007174:	608b      	str	r3, [r1, #8]
}
 8007176:	4770      	bx	lr
 8007178:	2000b560 	.word	0x2000b560
 800717c:	2000b580 	.word	0x2000b580
 8007180:	2000b570 	.word	0x2000b570
 8007184:	40005c00 	.word	0x40005c00
 8007188:	40005400 	.word	0x40005400

0800718c <iwdg_init>:
#define IWDG_PRESCALER_32               (IWDG_PR_PR_1 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_64               IWDG_PR_PR_2
#define IWDG_PRESCALER_128              (IWDG_PR_PR_2 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_256              (IWDG_PR_PR_2 | IWDG_PR_PR_1)

stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 800718c:	b530      	push	{r4, r5, lr}
	stm_ret_t ret;

	IWDG -> KR = IWDG_KEY_ENABLE;
 800718e:	4c0c      	ldr	r4, [pc, #48]	; (80071c0 <iwdg_init+0x34>)
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 8007190:	b083      	sub	sp, #12
	IWDG -> KR = IWDG_KEY_ENABLE;
 8007192:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8007196:	6023      	str	r3, [r4, #0]

	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;

	IWDG -> PR = psc;
	IWDG -> RLR = arr-1;
 8007198:	3a01      	subs	r2, #1
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 800719a:	f245 5355 	movw	r3, #21845	; 0x5555

	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 800719e:	2531      	movs	r5, #49	; 0x31
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 80071a0:	6023      	str	r3, [r4, #0]
	IWDG -> PR = psc;
 80071a2:	6061      	str	r1, [r4, #4]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80071a4:	2300      	movs	r3, #0
	IWDG -> RLR = arr-1;
 80071a6:	60a2      	str	r2, [r4, #8]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80071a8:	4906      	ldr	r1, [pc, #24]	; (80071c4 <iwdg_init+0x38>)
 80071aa:	9500      	str	r5, [sp, #0]
 80071ac:	2203      	movs	r2, #3
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 80071ae:	4605      	mov	r5, r0
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80071b0:	f002 fa18 	bl	80095e4 <wait_flag_in_register_timeout>

	IWDG -> KR = IWDG_KEY_RELOAD;
 80071b4:	f64a 23aa 	movw	r3, #43690	; 0xaaaa

	return ret;
}
 80071b8:	4628      	mov	r0, r5
	IWDG -> KR = IWDG_KEY_RELOAD;
 80071ba:	6023      	str	r3, [r4, #0]
}
 80071bc:	b003      	add	sp, #12
 80071be:	bd30      	pop	{r4, r5, pc}
 80071c0:	40003000 	.word	0x40003000
 80071c4:	4000300c 	.word	0x4000300c

080071c8 <iwdg_disable_in_debugmode>:

void iwdg_disable_in_debugmode(void){
#if defined(STM32F1)
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP;
#elif defined(STM32F4)
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP;
 80071c8:	4a02      	ldr	r2, [pc, #8]	; (80071d4 <iwdg_disable_in_debugmode+0xc>)
 80071ca:	6893      	ldr	r3, [r2, #8]
 80071cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071d0:	6093      	str	r3, [r2, #8]
#endif /* STM32F4 */
}
 80071d2:	4770      	bx	lr
 80071d4:	e0042000 	.word	0xe0042000

080071d8 <iwdg_refresh>:

void iwdg_refresh(void){
	IWDG -> KR = IWDG_KEY_RELOAD;
 80071d8:	4b02      	ldr	r3, [pc, #8]	; (80071e4 <iwdg_refresh+0xc>)
 80071da:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80071de:	601a      	str	r2, [r3, #0]
}
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40003000 	.word	0x40003000

080071e8 <rcc_init>:
#include "math.h"


static rcc_config_t *_conf;

stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 80071e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	b086      	sub	sp, #24
#error "APB2_CLOCK_FREQUENCY out of range. Modify APB2 clock frequency less than or equal to CONFIG_MAX_APB2_CLOCK_FREQUENCY in sdkconfig.h file."
#endif
#endif


	stm_ret_t ret;
 80071ee:	2300      	movs	r3, #0
	 */

#if defined(STM32F1)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> CFGR & RCC_CFGR_PLLSRC))){
#elif defined(STM32F4)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80071f0:	4ab9      	ldr	r2, [pc, #740]	; (80074d8 <rcc_init+0x2f0>)
	stm_ret_t ret;
 80071f2:	6043      	str	r3, [r0, #4]
	__IO uint32_t tmpreg = 0;
 80071f4:	9305      	str	r3, [sp, #20]
	stm_ret_t ret;
 80071f6:	2301      	movs	r3, #1
 80071f8:	7003      	strb	r3, [r0, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80071fa:	6893      	ldr	r3, [r2, #8]
	_conf = rcc_conf;
 80071fc:	4eb7      	ldr	r6, [pc, #732]	; (80074dc <rcc_init+0x2f4>)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80071fe:	075b      	lsls	r3, r3, #29
stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 8007200:	4604      	mov	r4, r0
	_conf = rcc_conf;
 8007202:	6031      	str	r1, [r6, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007204:	d412      	bmi.n	800722c <rcc_init+0x44>
 8007206:	6893      	ldr	r3, [r2, #8]
 8007208:	071f      	lsls	r7, r3, #28
 800720a:	d40c      	bmi.n	8007226 <rcc_init+0x3e>
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
	}

	if(_conf -> osc_source == HSI_CRYSTAL){
 800720c:	7b0b      	ldrb	r3, [r1, #12]
 800720e:	b1db      	cbz	r3, 8007248 <rcc_init+0x60>
		}
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);

	}
	else if(_conf -> osc_source == HSE_CRYSTAL){
 8007210:	2b01      	cmp	r3, #1
 8007212:	d03b      	beq.n	800728c <rcc_init+0xa4>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	else{
		set_return(&ret, STM_ERR, __LINE__);
 8007214:	2255      	movs	r2, #85	; 0x55
 8007216:	2100      	movs	r1, #0
 8007218:	4620      	mov	r0, r4
 800721a:	f002 fa1f 	bl	800965c <set_return>
	AFIO -> MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;

#endif /* STM32F1 */

	return ret;
}
 800721e:	4620      	mov	r0, r4
 8007220:	b006      	add	sp, #24
 8007222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007226:	6853      	ldr	r3, [r2, #4]
 8007228:	025d      	lsls	r5, r3, #9
 800722a:	d5ef      	bpl.n	800720c <rcc_init+0x24>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 800722c:	4baa      	ldr	r3, [pc, #680]	; (80074d8 <rcc_init+0x2f0>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8007234:	d1ea      	bne.n	800720c <rcc_init+0x24>
			set_return(&ret, STM_ERR, __LINE__);
 8007236:	4620      	mov	r0, r4
 8007238:	2234      	movs	r2, #52	; 0x34
 800723a:	4619      	mov	r1, r3
 800723c:	f002 fa0e 	bl	800965c <set_return>
}
 8007240:	4620      	mov	r0, r4
 8007242:	b006      	add	sp, #24
 8007244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RCC -> CR |= RCC_CR_HSION;
 8007248:	4fa3      	ldr	r7, [pc, #652]	; (80074d8 <rcc_init+0x2f0>)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	603b      	str	r3, [r7, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSIRDY, FLAG_SET, RCC_HSI_TIMEOUT);
 8007252:	ad02      	add	r5, sp, #8
 8007254:	2364      	movs	r3, #100	; 0x64
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	4639      	mov	r1, r7
 800725a:	4628      	mov	r0, r5
 800725c:	2301      	movs	r3, #1
 800725e:	2202      	movs	r2, #2
 8007260:	f002 f9c0 	bl	80095e4 <wait_flag_in_register_timeout>
 8007264:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007268:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 800726c:	4620      	mov	r0, r4
 800726e:	f002 fa03 	bl	8009678 <is_timeout>
 8007272:	2800      	cmp	r0, #0
 8007274:	d155      	bne.n	8007322 <rcc_init+0x13a>
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 8007276:	683b      	ldr	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8007278:	6832      	ldr	r2, [r6, #0]
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 800727a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800727e:	603b      	str	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	6891      	ldr	r1, [r2, #8]
 8007284:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007288:	603b      	str	r3, [r7, #0]
 800728a:	e016      	b.n	80072ba <rcc_init+0xd2>
		RCC -> CR |= RCC_CR_HSEON;
 800728c:	4992      	ldr	r1, [pc, #584]	; (80074d8 <rcc_init+0x2f0>)
 800728e:	680a      	ldr	r2, [r1, #0]
 8007290:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007294:	600a      	str	r2, [r1, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSERDY, FLAG_SET, RCC_HSE_TIMEOUT);
 8007296:	ad02      	add	r5, sp, #8
 8007298:	22c8      	movs	r2, #200	; 0xc8
 800729a:	9200      	str	r2, [sp, #0]
 800729c:	4628      	mov	r0, r5
 800729e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80072a2:	f002 f99f 	bl	80095e4 <wait_flag_in_register_timeout>
 80072a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80072aa:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 80072ae:	4620      	mov	r0, r4
 80072b0:	f002 f9e2 	bl	8009678 <is_timeout>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d17c      	bne.n	80073b2 <rcc_init+0x1ca>
	if(_conf -> sysclock_source == PLLCLK){
 80072b8:	6832      	ldr	r2, [r6, #0]
 80072ba:	7b53      	ldrb	r3, [r2, #13]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d104      	bne.n	80072ca <rcc_init+0xe2>
		if(!(RCC -> CFGR & RCC_CFGR_SWS_PLL)){
 80072c0:	4f85      	ldr	r7, [pc, #532]	; (80074d8 <rcc_init+0x2f0>)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f013 0308 	ands.w	r3, r3, #8
 80072c8:	d078      	beq.n	80073bc <rcc_init+0x1d4>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 80072ca:	6910      	ldr	r0, [r2, #16]
 80072cc:	f002 fa2e 	bl	800972c <embedded_flash_calculate_latency>
 80072d0:	4607      	mov	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 80072d2:	f002 fa57 	bl	8009784 <embedded_flash_get_latency>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80072d6:	4287      	cmp	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 80072d8:	4680      	mov	r8, r0
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80072da:	d866      	bhi.n	80073aa <rcc_init+0x1c2>
	PWR -> CR |= PWR_CR_ODEN;
 80072dc:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80074ec <rcc_init+0x304>
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80072e0:	497f      	ldr	r1, [pc, #508]	; (80074e0 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODEN;
 80072e2:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80072e6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	PWR -> CR |= PWR_CR_ODEN;
 80072ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ee:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80072f2:	4628      	mov	r0, r5
 80072f4:	f8cd a000 	str.w	sl, [sp]
 80072f8:	2301      	movs	r3, #1
 80072fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80072fe:	f002 f971 	bl	80095e4 <wait_flag_in_register_timeout>
 8007302:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007306:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 800730a:	4620      	mov	r0, r4
 800730c:	f002 f9b4 	bl	8009678 <is_timeout>
 8007310:	b160      	cbz	r0, 800732c <rcc_init+0x144>
		set_return_line(&ret, __LINE__);
 8007312:	4620      	mov	r0, r4
 8007314:	2188      	movs	r1, #136	; 0x88
 8007316:	f002 f9a5 	bl	8009664 <set_return_line>
}
 800731a:	4620      	mov	r0, r4
 800731c:	b006      	add	sp, #24
 800731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			set_return_line(&ret, __LINE__);
 8007322:	2141      	movs	r1, #65	; 0x41
 8007324:	4620      	mov	r0, r4
 8007326:	f002 f99d 	bl	8009664 <set_return_line>
			return ret;
 800732a:	e778      	b.n	800721e <rcc_init+0x36>
	PWR -> CR |= PWR_CR_ODSWEN;
 800732c:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 8007330:	496b      	ldr	r1, [pc, #428]	; (80074e0 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODSWEN;
 8007332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007336:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 800733a:	4628      	mov	r0, r5
 800733c:	f8cd a000 	str.w	sl, [sp]
 8007340:	2301      	movs	r3, #1
 8007342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007346:	f002 f94d 	bl	80095e4 <wait_flag_in_register_timeout>
 800734a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800734e:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8007352:	4620      	mov	r0, r4
 8007354:	f002 f990 	bl	8009678 <is_timeout>
 8007358:	2800      	cmp	r0, #0
 800735a:	f040 8087 	bne.w	800746c <rcc_init+0x284>
	if(_conf -> sysclock_source == HSI){
 800735e:	6833      	ldr	r3, [r6, #0]
 8007360:	7b5a      	ldrb	r2, [r3, #13]
 8007362:	2a00      	cmp	r2, #0
 8007364:	d074      	beq.n	8007450 <rcc_init+0x268>
	else if(_conf -> sysclock_source == HSE){
 8007366:	2a01      	cmp	r2, #1
 8007368:	f000 80a8 	beq.w	80074bc <rcc_init+0x2d4>
	else if(_conf -> sysclock_source == PLLCLK){
 800736c:	2a02      	cmp	r2, #2
 800736e:	f000 80bf 	beq.w	80074f0 <rcc_init+0x308>
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8007372:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80074d8 <rcc_init+0x2f0>
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8007376:	495b      	ldr	r1, [pc, #364]	; (80074e4 <rcc_init+0x2fc>)
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8007378:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800737c:	f8c9 2008 	str.w	r2, [r9, #8]
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8007380:	f241 3388 	movw	r3, #5000	; 0x1388
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4628      	mov	r0, r5
 8007388:	2301      	movs	r3, #1
 800738a:	f002 f92b 	bl	80095e4 <wait_flag_in_register_timeout>
 800738e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007392:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8007396:	4620      	mov	r0, r4
 8007398:	f002 f96e 	bl	8009678 <is_timeout>
 800739c:	2800      	cmp	r0, #0
 800739e:	d06a      	beq.n	8007476 <rcc_init+0x28e>
		set_return_line(&ret, __LINE__);
 80073a0:	21ad      	movs	r1, #173	; 0xad
 80073a2:	4620      	mov	r0, r4
 80073a4:	f002 f95e 	bl	8009664 <set_return_line>
		return ret;
 80073a8:	e739      	b.n	800721e <rcc_init+0x36>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80073aa:	4638      	mov	r0, r7
 80073ac:	f002 f9b4 	bl	8009718 <embedded_flash_set_latency>
 80073b0:	e794      	b.n	80072dc <rcc_init+0xf4>
			set_return_line(&ret, __LINE__);
 80073b2:	2150      	movs	r1, #80	; 0x50
 80073b4:	4620      	mov	r0, r4
 80073b6:	f002 f955 	bl	8009664 <set_return_line>
			return ret;
 80073ba:	e730      	b.n	800721e <rcc_init+0x36>
			RCC -> CR &=~ RCC_CR_PLLON;
 80073bc:	683a      	ldr	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 80073be:	f04f 0864 	mov.w	r8, #100	; 0x64
			RCC -> CR &=~ RCC_CR_PLLON;
 80073c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80073c6:	603a      	str	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 80073c8:	4639      	mov	r1, r7
 80073ca:	4628      	mov	r0, r5
 80073cc:	f8cd 8000 	str.w	r8, [sp]
 80073d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073d4:	f002 f906 	bl	80095e4 <wait_flag_in_register_timeout>
 80073d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80073dc:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 80073e0:	4620      	mov	r0, r4
 80073e2:	f002 f949 	bl	8009678 <is_timeout>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d13b      	bne.n	8007462 <rcc_init+0x27a>
			tmpreg = RCC -> PLLCFGR;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	9305      	str	r3, [sp, #20]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 80073ee:	9b05      	ldr	r3, [sp, #20]
 80073f0:	4a3d      	ldr	r2, [pc, #244]	; (80074e8 <rcc_init+0x300>)
 80073f2:	4013      	ands	r3, r2
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80073f4:	6832      	ldr	r2, [r6, #0]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 80073f6:	9305      	str	r3, [sp, #20]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80073f8:	9b05      	ldr	r3, [sp, #20]
 80073fa:	6991      	ldr	r1, [r2, #24]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 80073fc:	6a50      	ldr	r0, [r2, #36]	; 0x24
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80073fe:	430b      	orrs	r3, r1
 8007400:	69d1      	ldr	r1, [r2, #28]
 8007402:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8007406:	6a11      	ldr	r1, [r2, #32]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 8007408:	7b92      	ldrb	r2, [r2, #14]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 800740a:	0849      	lsrs	r1, r1, #1
 800740c:	3901      	subs	r1, #1
 800740e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007416:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800741a:	9305      	str	r3, [sp, #20]
			RCC -> PLLCFGR = tmpreg;
 800741c:	9b05      	ldr	r3, [sp, #20]
 800741e:	607b      	str	r3, [r7, #4]
			RCC -> CR |= RCC_CR_PLLON;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007426:	603b      	str	r3, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_SET, RCC_PLL_TIMEOUT);
 8007428:	4639      	mov	r1, r7
 800742a:	4628      	mov	r0, r5
 800742c:	f8cd 8000 	str.w	r8, [sp]
 8007430:	2301      	movs	r3, #1
 8007432:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007436:	f002 f8d5 	bl	80095e4 <wait_flag_in_register_timeout>
 800743a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800743e:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 8007442:	4620      	mov	r0, r4
 8007444:	f002 f918 	bl	8009678 <is_timeout>
 8007448:	2800      	cmp	r0, #0
 800744a:	d15b      	bne.n	8007504 <rcc_init+0x31c>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 800744c:	6832      	ldr	r2, [r6, #0]
 800744e:	e73c      	b.n	80072ca <rcc_init+0xe2>
		if(!(RCC -> CR & RCC_CR_HSIRDY)){
 8007450:	4b21      	ldr	r3, [pc, #132]	; (80074d8 <rcc_init+0x2f0>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	0798      	lsls	r0, r3, #30
 8007456:	d48c      	bmi.n	8007372 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8007458:	2199      	movs	r1, #153	; 0x99
 800745a:	4620      	mov	r0, r4
 800745c:	f002 f902 	bl	8009664 <set_return_line>
			return ret;
 8007460:	e6dd      	b.n	800721e <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 8007462:	2161      	movs	r1, #97	; 0x61
 8007464:	4620      	mov	r0, r4
 8007466:	f002 f8fd 	bl	8009664 <set_return_line>
				return ret;
 800746a:	e6d8      	b.n	800721e <rcc_init+0x36>
		set_return_line(&ret, __LINE__);
 800746c:	218f      	movs	r1, #143	; 0x8f
 800746e:	4620      	mov	r0, r4
 8007470:	f002 f8f8 	bl	8009664 <set_return_line>
		return ret;
 8007474:	e6d3      	b.n	800721e <rcc_init+0x36>
	tmpreg = RCC -> CFGR;
 8007476:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800747a:	9305      	str	r3, [sp, #20]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 800747c:	9b05      	ldr	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 800747e:	6832      	ldr	r2, [r6, #0]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 8007480:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8007484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007488:	9305      	str	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 800748a:	7d53      	ldrb	r3, [r2, #21]
 800748c:	7d11      	ldrb	r1, [r2, #20]
 800748e:	7d92      	ldrb	r2, [r2, #22]
 8007490:	3303      	adds	r3, #3
 8007492:	3107      	adds	r1, #7
 8007494:	029b      	lsls	r3, r3, #10
 8007496:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800749a:	9905      	ldr	r1, [sp, #20]
 800749c:	3203      	adds	r2, #3
 800749e:	430b      	orrs	r3, r1
 80074a0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80074a4:	9305      	str	r3, [sp, #20]
	RCC -> CFGR = tmpreg;
 80074a6:	9b05      	ldr	r3, [sp, #20]
 80074a8:	f8c9 3008 	str.w	r3, [r9, #8]
	SystemCoreClockUpdate();
 80074ac:	f7f9 fec4 	bl	8001238 <SystemCoreClockUpdate>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 80074b0:	4547      	cmp	r7, r8
 80074b2:	d30d      	bcc.n	80074d0 <rcc_init+0x2e8>
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 80074b4:	200f      	movs	r0, #15
 80074b6:	f000 fee1 	bl	800827c <systick_init>
	return ret;
 80074ba:	e6b0      	b.n	800721e <rcc_init+0x36>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <rcc_init+0x2f0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	0399      	lsls	r1, r3, #14
 80074c2:	f53f af56 	bmi.w	8007372 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 80074c6:	219f      	movs	r1, #159	; 0x9f
 80074c8:	4620      	mov	r0, r4
 80074ca:	f002 f8cb 	bl	8009664 <set_return_line>
			return ret;
 80074ce:	e6a6      	b.n	800721e <rcc_init+0x36>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 80074d0:	4638      	mov	r0, r7
 80074d2:	f002 f921 	bl	8009718 <embedded_flash_set_latency>
 80074d6:	e7ed      	b.n	80074b4 <rcc_init+0x2cc>
 80074d8:	40023800 	.word	0x40023800
 80074dc:	2000b590 	.word	0x2000b590
 80074e0:	40007004 	.word	0x40007004
 80074e4:	40023808 	.word	0x40023808
 80074e8:	f0bc8000 	.word	0xf0bc8000
 80074ec:	40007000 	.word	0x40007000
		if(!(RCC -> CR & RCC_CR_PLLRDY)){
 80074f0:	4b07      	ldr	r3, [pc, #28]	; (8007510 <rcc_init+0x328>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	019b      	lsls	r3, r3, #6
 80074f6:	f53f af3c 	bmi.w	8007372 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 80074fa:	21a5      	movs	r1, #165	; 0xa5
 80074fc:	4620      	mov	r0, r4
 80074fe:	f002 f8b1 	bl	8009664 <set_return_line>
			return ret;
 8007502:	e68c      	b.n	800721e <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 8007504:	2172      	movs	r1, #114	; 0x72
 8007506:	4620      	mov	r0, r4
 8007508:	f002 f8ac 	bl	8009664 <set_return_line>
				return ret;
 800750c:	e687      	b.n	800721e <rcc_init+0x36>
 800750e:	bf00      	nop
 8007510:	40023800 	.word	0x40023800

08007514 <rcc_get_bus_frequency>:

	return ret;
}

uint32_t rcc_get_bus_frequency(rcc_busclock_t bus){
	switch(bus){
 8007514:	2805      	cmp	r0, #5
 8007516:	d819      	bhi.n	800754c <rcc_get_bus_frequency+0x38>
 8007518:	e8df f000 	tbb	[pc, r0]
 800751c:	2f251a0e 	.word	0x2f251a0e
 8007520:	0339      	.short	0x0339
		case APB1_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
		break;

		case APB2_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]));
 8007522:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <rcc_get_bus_frequency+0xb8>)
 8007524:	492a      	ldr	r1, [pc, #168]	; (80075d0 <rcc_get_bus_frequency+0xbc>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	4a2a      	ldr	r2, [pc, #168]	; (80075d4 <rcc_get_bus_frequency+0xc0>)
 800752a:	6808      	ldr	r0, [r1, #0]
 800752c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007530:	5cd3      	ldrb	r3, [r2, r3]
 8007532:	40d8      	lsrs	r0, r3
 8007534:	0040      	lsls	r0, r0, #1
 8007536:	4770      	bx	lr
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8007538:	4b27      	ldr	r3, [pc, #156]	; (80075d8 <rcc_get_bus_frequency+0xc4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	7b1a      	ldrb	r2, [r3, #12]
 800753e:	2a01      	cmp	r2, #1
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 8007540:	7b5a      	ldrb	r2, [r3, #13]
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8007542:	d02f      	beq.n	80075a4 <rcc_get_bus_frequency+0x90>
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 8007544:	2a00      	cmp	r2, #0
 8007546:	d03f      	beq.n	80075c8 <rcc_get_bus_frequency+0xb4>
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 8007548:	2a02      	cmp	r2, #2
 800754a:	d032      	beq.n	80075b2 <rcc_get_bus_frequency+0x9e>
		break;

	}
	return 0;
 800754c:	2000      	movs	r0, #0
}
 800754e:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 8007550:	4b21      	ldr	r3, [pc, #132]	; (80075d8 <rcc_get_bus_frequency+0xc4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	7d18      	ldrb	r0, [r3, #20]
 8007556:	2807      	cmp	r0, #7
 8007558:	d928      	bls.n	80075ac <rcc_get_bus_frequency+0x98>
			return (uint32_t)(SystemCoreClock / (uint32_t)abs((int)(_conf -> ahb_prescaler - 6U)));
 800755a:	4a1d      	ldr	r2, [pc, #116]	; (80075d0 <rcc_get_bus_frequency+0xbc>)
 800755c:	1f83      	subs	r3, r0, #6
 800755e:	6810      	ldr	r0, [r2, #0]
 8007560:	fbb0 f0f3 	udiv	r0, r0, r3
 8007564:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007566:	4b19      	ldr	r3, [pc, #100]	; (80075cc <rcc_get_bus_frequency+0xb8>)
 8007568:	4919      	ldr	r1, [pc, #100]	; (80075d0 <rcc_get_bus_frequency+0xbc>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	4a19      	ldr	r2, [pc, #100]	; (80075d4 <rcc_get_bus_frequency+0xc0>)
 800756e:	6808      	ldr	r0, [r1, #0]
 8007570:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007574:	5cd3      	ldrb	r3, [r2, r3]
 8007576:	40d8      	lsrs	r0, r3
 8007578:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800757a:	4b14      	ldr	r3, [pc, #80]	; (80075cc <rcc_get_bus_frequency+0xb8>)
 800757c:	4914      	ldr	r1, [pc, #80]	; (80075d0 <rcc_get_bus_frequency+0xbc>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	4a14      	ldr	r2, [pc, #80]	; (80075d4 <rcc_get_bus_frequency+0xc0>)
 8007582:	6808      	ldr	r0, [r1, #0]
 8007584:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007588:	5cd3      	ldrb	r3, [r2, r3]
 800758a:	40d8      	lsrs	r0, r3
 800758c:	4770      	bx	lr
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
 800758e:	4b0f      	ldr	r3, [pc, #60]	; (80075cc <rcc_get_bus_frequency+0xb8>)
 8007590:	490f      	ldr	r1, [pc, #60]	; (80075d0 <rcc_get_bus_frequency+0xbc>)
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	4a0f      	ldr	r2, [pc, #60]	; (80075d4 <rcc_get_bus_frequency+0xc0>)
 8007596:	6808      	ldr	r0, [r1, #0]
 8007598:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800759c:	5cd3      	ldrb	r3, [r2, r3]
 800759e:	40d8      	lsrs	r0, r3
 80075a0:	0040      	lsls	r0, r0, #1
 80075a2:	4770      	bx	lr
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 80075a4:	2a01      	cmp	r2, #1
 80075a6:	d1cf      	bne.n	8007548 <rcc_get_bus_frequency+0x34>
 80075a8:	480c      	ldr	r0, [pc, #48]	; (80075dc <rcc_get_bus_frequency+0xc8>)
 80075aa:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 80075ac:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <rcc_get_bus_frequency+0xbc>)
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	4770      	bx	lr
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	6999      	ldr	r1, [r3, #24]
 80075b6:	4809      	ldr	r0, [pc, #36]	; (80075dc <rcc_get_bus_frequency+0xc8>)
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	fbb0 f0f1 	udiv	r0, r0, r1
 80075be:	fb02 f000 	mul.w	r0, r2, r0
 80075c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80075c6:	4770      	bx	lr
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 80075c8:	4805      	ldr	r0, [pc, #20]	; (80075e0 <rcc_get_bus_frequency+0xcc>)
 80075ca:	4770      	bx	lr
 80075cc:	40023800 	.word	0x40023800
 80075d0:	20000000 	.word	0x20000000
 80075d4:	0800ce38 	.word	0x0800ce38
 80075d8:	2000b590 	.word	0x2000b590
 80075dc:	017d7840 	.word	0x017d7840
 80075e0:	00f42400 	.word	0x00f42400

080075e4 <rng_init>:
#include "system/system.h"


uint32_t _seed = 0;
void rng_init(void){
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 80075e4:	4907      	ldr	r1, [pc, #28]	; (8007604 <rng_init+0x20>)

	RNG -> CR |=  RNG_CR_RNGEN;
 80075e6:	4a08      	ldr	r2, [pc, #32]	; (8007608 <rng_init+0x24>)
void rng_init(void){
 80075e8:	b508      	push	{r3, lr}
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 80075ea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80075ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f0:	634b      	str	r3, [r1, #52]	; 0x34
	RNG -> CR |=  RNG_CR_RNGEN;
 80075f2:	6813      	ldr	r3, [r2, #0]
 80075f4:	f043 0304 	orr.w	r3, r3, #4
 80075f8:	6013      	str	r3, [r2, #0]

	rng_set_seed(sys_get_free_heap_size());
 80075fa:	f002 f90f 	bl	800981c <sys_get_free_heap_size>
uint32_t rng_random_invert(void){
	return ~rng_random();
}

void rng_set_seed(uint32_t seed){
	_seed = seed;
 80075fe:	4b03      	ldr	r3, [pc, #12]	; (800760c <rng_init+0x28>)
 8007600:	6018      	str	r0, [r3, #0]
}
 8007602:	bd08      	pop	{r3, pc}
 8007604:	40023800 	.word	0x40023800
 8007608:	50060800 	.word	0x50060800
 800760c:	2000b594 	.word	0x2000b594

08007610 <rng_set_seed>:
	_seed = seed;
 8007610:	4b01      	ldr	r3, [pc, #4]	; (8007618 <rng_set_seed+0x8>)
 8007612:	6018      	str	r0, [r3, #0]
}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	2000b594 	.word	0x2000b594

0800761c <rng_generate_random_number>:

uint32_t rng_generate_random_number(void){
 800761c:	b570      	push	{r4, r5, r6, lr}
	__IO uint32_t rand = _seed;
 800761e:	4b1b      	ldr	r3, [pc, #108]	; (800768c <rng_generate_random_number+0x70>)
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8007620:	4c1b      	ldr	r4, [pc, #108]	; (8007690 <rng_generate_random_number+0x74>)
	__IO uint32_t rand = _seed;
 8007622:	681b      	ldr	r3, [r3, #0]
uint32_t rng_generate_random_number(void){
 8007624:	b086      	sub	sp, #24
	__IO uint32_t rand = _seed;
 8007626:	2602      	movs	r6, #2
 8007628:	9301      	str	r3, [sp, #4]
	__IO uint32_t random_number = 0U;
 800762a:	2500      	movs	r5, #0
	__IO uint32_t tick = get_tick();
 800762c:	f000 fe48 	bl	80082c0 <get_tick>
 8007630:	9004      	str	r0, [sp, #16]
	__IO uint32_t random_number = 0U;
 8007632:	9505      	str	r5, [sp, #20]
 8007634:	e005      	b.n	8007642 <rng_generate_random_number+0x26>
		if(get_tick() - tick > RNG_TIMEOUT){
 8007636:	f000 fe43 	bl	80082c0 <get_tick>
 800763a:	9b04      	ldr	r3, [sp, #16]
 800763c:	1ac0      	subs	r0, r0, r3
 800763e:	2802      	cmp	r0, #2
 8007640:	d802      	bhi.n	8007648 <rng_generate_random_number+0x2c>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8007642:	6863      	ldr	r3, [r4, #4]
 8007644:	07da      	lsls	r2, r3, #31
 8007646:	d5f6      	bpl.n	8007636 <rng_generate_random_number+0x1a>
	random_number = RNG -> DR;
 8007648:	68a3      	ldr	r3, [r4, #8]
 800764a:	9305      	str	r3, [sp, #20]
	return random_number;
 800764c:	9a05      	ldr	r2, [sp, #20]
	for(int i=0; i<2; i++){
		rand ^= rng_random();
 800764e:	9b01      	ldr	r3, [sp, #4]
 8007650:	4053      	eors	r3, r2
 8007652:	9301      	str	r3, [sp, #4]
	__IO uint32_t tick = get_tick();
 8007654:	f000 fe34 	bl	80082c0 <get_tick>
 8007658:	9002      	str	r0, [sp, #8]
	__IO uint32_t random_number = 0U;
 800765a:	9503      	str	r5, [sp, #12]
 800765c:	e005      	b.n	800766a <rng_generate_random_number+0x4e>
		if(get_tick() - tick > RNG_TIMEOUT){
 800765e:	f000 fe2f 	bl	80082c0 <get_tick>
 8007662:	9b02      	ldr	r3, [sp, #8]
 8007664:	1ac0      	subs	r0, r0, r3
 8007666:	2802      	cmp	r0, #2
 8007668:	d802      	bhi.n	8007670 <rng_generate_random_number+0x54>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 800766a:	6863      	ldr	r3, [r4, #4]
 800766c:	07db      	lsls	r3, r3, #31
 800766e:	d5f6      	bpl.n	800765e <rng_generate_random_number+0x42>
	random_number = RNG -> DR;
 8007670:	68a3      	ldr	r3, [r4, #8]
 8007672:	9303      	str	r3, [sp, #12]
	return random_number;
 8007674:	9a03      	ldr	r2, [sp, #12]
		rand ^= rng_random_invert();
 8007676:	9b01      	ldr	r3, [sp, #4]
 8007678:	4053      	eors	r3, r2
 800767a:	43db      	mvns	r3, r3
	for(int i=0; i<2; i++){
 800767c:	2e01      	cmp	r6, #1
		rand ^= rng_random_invert();
 800767e:	9301      	str	r3, [sp, #4]
	for(int i=0; i<2; i++){
 8007680:	d102      	bne.n	8007688 <rng_generate_random_number+0x6c>
	}
	return rand;
 8007682:	9801      	ldr	r0, [sp, #4]
}
 8007684:	b006      	add	sp, #24
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	2601      	movs	r6, #1
 800768a:	e7cf      	b.n	800762c <rng_generate_random_number+0x10>
 800768c:	2000b594 	.word	0x2000b594
 8007690:	50060800 	.word	0x50060800

08007694 <_ZN3spi4initEP12spi_config_t>:

spi::spi(SPI_TypeDef *Spi){
	_spi = Spi;
}

stm_ret_t spi::init(spi_config_t *conf){
 8007694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007696:	460c      	mov	r4, r1
 8007698:	4605      	mov	r5, r0
	stm_ret_t ret;
	_conf = conf;
#if ENABLE_DMA
	_txdma = _conf->txdma;
 800769a:	6b10      	ldr	r0, [r2, #48]	; 0x30
	_rxdma = _conf->rxdma;
#endif /* ENABLE_DMA */

#if defined(SPI1)
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 800769c:	68cb      	ldr	r3, [r1, #12]
 800769e:	499e      	ldr	r1, [pc, #632]	; (8007918 <_ZN3spi4initEP12spi_config_t+0x284>)
	_txdma = _conf->txdma;
 80076a0:	6020      	str	r0, [r4, #0]
	stm_ret_t ret;
 80076a2:	2001      	movs	r0, #1
 80076a4:	7028      	strb	r0, [r5, #0]
	_rxdma = _conf->rxdma;
 80076a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80076a8:	6060      	str	r0, [r4, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80076aa:	428b      	cmp	r3, r1
	stm_ret_t ret;
 80076ac:	f04f 0000 	mov.w	r0, #0
	_conf = conf;
 80076b0:	60a2      	str	r2, [r4, #8]
	stm_ret_t ret;
 80076b2:	6068      	str	r0, [r5, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80076b4:	f000 80cd 	beq.w	8007852 <_ZN3spi4initEP12spi_config_t+0x1be>
#endif /* defined(SPI1) */
#if defined(SPI2)
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 80076b8:	4998      	ldr	r1, [pc, #608]	; (800791c <_ZN3spi4initEP12spi_config_t+0x288>)
 80076ba:	428b      	cmp	r3, r1
 80076bc:	d015      	beq.n	80076ea <_ZN3spi4initEP12spi_config_t+0x56>
#endif /* defined(SPI2) */
#if defined(SPI3)
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80076be:	4998      	ldr	r1, [pc, #608]	; (8007920 <_ZN3spi4initEP12spi_config_t+0x28c>)
 80076c0:	428b      	cmp	r3, r1
 80076c2:	f000 810b 	beq.w	80078dc <_ZN3spi4initEP12spi_config_t+0x248>
#endif /* defined(SPI3) */
#if defined(SPI4)
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 80076c6:	4997      	ldr	r1, [pc, #604]	; (8007924 <_ZN3spi4initEP12spi_config_t+0x290>)
 80076c8:	428b      	cmp	r3, r1
 80076ca:	f000 8112 	beq.w	80078f2 <_ZN3spi4initEP12spi_config_t+0x25e>
#endif /* defined(SPI4) */
#if defined(SPI5)
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 80076ce:	4996      	ldr	r1, [pc, #600]	; (8007928 <_ZN3spi4initEP12spi_config_t+0x294>)
 80076d0:	428b      	cmp	r3, r1
 80076d2:	f000 80d5 	beq.w	8007880 <_ZN3spi4initEP12spi_config_t+0x1ec>
#endif /* defined(SPI6) */
#if defined(SPI6)
	else if(_spi == SPI6) RCC -> APB2ENR |= RCC_APB2ENR_SPI6EN;
 80076d6:	4995      	ldr	r1, [pc, #596]	; (800792c <_ZN3spi4initEP12spi_config_t+0x298>)
 80076d8:	428b      	cmp	r3, r1
 80076da:	d10c      	bne.n	80076f6 <_ZN3spi4initEP12spi_config_t+0x62>
 80076dc:	f501 4164 	add.w	r1, r1, #58368	; 0xe400
 80076e0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80076e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076e6:	644b      	str	r3, [r1, #68]	; 0x44
 80076e8:	e005      	b.n	80076f6 <_ZN3spi4initEP12spi_config_t+0x62>
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 80076ea:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 80076ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076f4:	640b      	str	r3, [r1, #64]	; 0x40
		if(_conf->nss == SPI_HARDWARE_NSS) gpio_set_mode(_conf->nssport, _conf->nsspin, GPIO_INPUT);
	}

#elif defined(STM32F4)
/* Configuration CLK Pin */
	gpio_port_clock_enable(_conf -> clkport);
 80076f6:	6910      	ldr	r0, [r2, #16]
 80076f8:	f7ff fbc4 	bl	8006e84 <gpio_port_clock_enable>
#if defined(SPI4) && defined(SPI5) && defined(SPI6)
	gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF5_SPI1_6);
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	2205      	movs	r2, #5
 8007700:	8a99      	ldrh	r1, [r3, #20]
 8007702:	6918      	ldr	r0, [r3, #16]
 8007704:	f7ff fc9c 	bl	8007040 <gpio_set_alternatefunction>
	else{
		gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF6_SPI3);
	}
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
 8007708:	68a3      	ldr	r3, [r4, #8]
 800770a:	2206      	movs	r2, #6
 800770c:	8a99      	ldrh	r1, [r3, #20]
 800770e:	6918      	ldr	r0, [r3, #16]
 8007710:	f7ff fcd4 	bl	80070bc <gpio_set_alternatefunction_type>

/* Configuration MISO Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE | SPI_HALFDUPLEX_SLAVE)){
 8007714:	68a2      	ldr	r2, [r4, #8]
 8007716:	7813      	ldrb	r3, [r2, #0]
 8007718:	f013 0f0d 	tst.w	r3, #13
 800771c:	f040 8087 	bne.w	800782e <_ZN3spi4initEP12spi_config_t+0x19a>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration MOSI Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8007720:	075b      	lsls	r3, r3, #29
 8007722:	d15f      	bne.n	80077e4 <_ZN3spi4initEP12spi_config_t+0x150>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration NSS Pin */
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8007724:	7b10      	ldrb	r0, [r2, #12]
 8007726:	2801      	cmp	r0, #1
 8007728:	d06f      	beq.n	800780a <_ZN3spi4initEP12spi_config_t+0x176>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
	}
#endif /* STM32F4 */

	_spi -> CR1 = 0x00U;
 800772a:	68e3      	ldr	r3, [r4, #12]

	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 800772c:	7956      	ldrb	r6, [r2, #5]
	_spi -> CR1 = 0x00U;
 800772e:	2100      	movs	r1, #0
 8007730:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007732:	7991      	ldrb	r1, [r2, #6]
 8007734:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 8007738:	681e      	ldr	r6, [r3, #0]
 800773a:	4331      	orrs	r1, r6
 800773c:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->datasize << SPI_CR1_DFF_Pos) | (_conf->bitordering << SPI_CR1_LSBFIRST_Pos);
 800773e:	7911      	ldrb	r1, [r2, #4]
 8007740:	78d6      	ldrb	r6, [r2, #3]
 8007742:	01c9      	lsls	r1, r1, #7
 8007744:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8007748:	681e      	ldr	r6, [r3, #0]
 800774a:	4331      	orrs	r1, r6
 800774c:	6019      	str	r1, [r3, #0]
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) _spi -> CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI;
 800774e:	7811      	ldrb	r1, [r2, #0]
 8007750:	f011 0703 	ands.w	r7, r1, #3
 8007754:	d003      	beq.n	800775e <_ZN3spi4initEP12spi_config_t+0xca>
 8007756:	681e      	ldr	r6, [r3, #0]
 8007758:	f446 7682 	orr.w	r6, r6, #260	; 0x104
 800775c:	601e      	str	r6, [r3, #0]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) _spi -> CR1 |= SPI_CR1_BIDIMODE;
 800775e:	f011 0f0a 	tst.w	r1, #10
 8007762:	d003      	beq.n	800776c <_ZN3spi4initEP12spi_config_t+0xd8>
 8007764:	6819      	ldr	r1, [r3, #0]
 8007766:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800776a:	6019      	str	r1, [r3, #0]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 800776c:	bb78      	cbnz	r0, 80077ce <_ZN3spi4initEP12spi_config_t+0x13a>
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007774:	6019      	str	r1, [r3, #0]

	_spi -> CR2 = 0x00U;
 8007776:	6058      	str	r0, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;

	if(_conf->control & (SPI_INTERRUPT_CONTROL | SPI_INTERRUPT_DMA_CONTROL)){
 8007778:	7851      	ldrb	r1, [r2, #1]
 800777a:	f011 0f05 	tst.w	r1, #5
 800777e:	d024      	beq.n	80077ca <_ZN3spi4initEP12spi_config_t+0x136>
#if defined(SPI1)
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007780:	4965      	ldr	r1, [pc, #404]	; (8007918 <_ZN3spi4initEP12spi_config_t+0x284>)
 8007782:	428b      	cmp	r3, r1
 8007784:	f000 8083 	beq.w	800788e <_ZN3spi4initEP12spi_config_t+0x1fa>
#endif /* defined(SPI1) */
#if defined(SPI2)
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8007788:	4964      	ldr	r1, [pc, #400]	; (800791c <_ZN3spi4initEP12spi_config_t+0x288>)
 800778a:	428b      	cmp	r3, r1
 800778c:	f000 80ad 	beq.w	80078ea <_ZN3spi4initEP12spi_config_t+0x256>
#endif /* defined(SPI2) */
#if defined(SPI3)
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8007790:	4963      	ldr	r1, [pc, #396]	; (8007920 <_ZN3spi4initEP12spi_config_t+0x28c>)
 8007792:	428b      	cmp	r3, r1
 8007794:	d064      	beq.n	8007860 <_ZN3spi4initEP12spi_config_t+0x1cc>
#endif /* defined(SPI3) */
#if defined(SPI4)
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8007796:	4963      	ldr	r1, [pc, #396]	; (8007924 <_ZN3spi4initEP12spi_config_t+0x290>)
 8007798:	428b      	cmp	r3, r1
 800779a:	f000 80b1 	beq.w	8007900 <_ZN3spi4initEP12spi_config_t+0x26c>
#endif /* defined(SPI4) */
#if defined(SPI5)
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 800779e:	4962      	ldr	r1, [pc, #392]	; (8007928 <_ZN3spi4initEP12spi_config_t+0x294>)
 80077a0:	428b      	cmp	r3, r1
 80077a2:	f000 80b1 	beq.w	8007908 <_ZN3spi4initEP12spi_config_t+0x274>
#endif /* defined(SPI6) */
#if defined(SPI6)
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 80077a6:	4961      	ldr	r1, [pc, #388]	; (800792c <_ZN3spi4initEP12spi_config_t+0x298>)
 80077a8:	428b      	cmp	r3, r1
 80077aa:	f000 80b1 	beq.w	8007910 <_ZN3spi4initEP12spi_config_t+0x27c>
#endif /* defined(SPI4) */

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 80077ae:	6892      	ldr	r2, [r2, #8]
 80077b0:	2a03      	cmp	r2, #3
 80077b2:	d972      	bls.n	800789a <_ZN3spi4initEP12spi_config_t+0x206>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
			__NVIC_SystemReset();
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 80077b4:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
  if ((int32_t)(IRQn) >= 0)
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	da57      	bge.n	800786c <_ZN3spi4initEP12spi_config_t+0x1d8>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077bc:	495c      	ldr	r1, [pc, #368]	; (8007930 <_ZN3spi4initEP12spi_config_t+0x29c>)
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	0112      	lsls	r2, r2, #4
 80077c4:	4419      	add	r1, r3
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	760a      	strb	r2, [r1, #24]
	}

	return ret;
}
 80077ca:	4628      	mov	r0, r5
 80077cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_spi -> CR2 = 0x00U;
 80077ce:	2100      	movs	r1, #0
 80077d0:	6059      	str	r1, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;
 80077d2:	2f00      	cmp	r7, #0
 80077d4:	d0d0      	beq.n	8007778 <_ZN3spi4initEP12spi_config_t+0xe4>
 80077d6:	2801      	cmp	r0, #1
 80077d8:	d1ce      	bne.n	8007778 <_ZN3spi4initEP12spi_config_t+0xe4>
 80077da:	6859      	ldr	r1, [r3, #4]
 80077dc:	f041 0104 	orr.w	r1, r1, #4
 80077e0:	6059      	str	r1, [r3, #4]
 80077e2:	e7c9      	b.n	8007778 <_ZN3spi4initEP12spi_config_t+0xe4>
		gpio_port_clock_enable(_conf -> mosiport);
 80077e4:	6a10      	ldr	r0, [r2, #32]
 80077e6:	f7ff fb4d 	bl	8006e84 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> mosiport, _conf -> mosipin, AF5_SPI1_6);
 80077ea:	68a3      	ldr	r3, [r4, #8]
 80077ec:	2205      	movs	r2, #5
 80077ee:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80077f0:	6a18      	ldr	r0, [r3, #32]
 80077f2:	f7ff fc25 	bl	8007040 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
 80077f6:	68a3      	ldr	r3, [r4, #8]
 80077f8:	2206      	movs	r2, #6
 80077fa:	6a18      	ldr	r0, [r3, #32]
 80077fc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80077fe:	f7ff fc5d 	bl	80070bc <gpio_set_alternatefunction_type>
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8007802:	68a2      	ldr	r2, [r4, #8]
 8007804:	7b10      	ldrb	r0, [r2, #12]
 8007806:	2801      	cmp	r0, #1
 8007808:	d18f      	bne.n	800772a <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> nssport);
 800780a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800780c:	f7ff fb3a 	bl	8006e84 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> nssport, _conf -> nsspin, AF5_SPI1_6);
 8007810:	68a3      	ldr	r3, [r4, #8]
 8007812:	2205      	movs	r2, #5
 8007814:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007816:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007818:	f7ff fc12 	bl	8007040 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
 800781c:	68a3      	ldr	r3, [r4, #8]
 800781e:	2206      	movs	r2, #6
 8007820:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007822:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007824:	f7ff fc4a 	bl	80070bc <gpio_set_alternatefunction_type>
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007828:	68a2      	ldr	r2, [r4, #8]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 800782a:	7b10      	ldrb	r0, [r2, #12]
 800782c:	e77d      	b.n	800772a <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> misoport);
 800782e:	6990      	ldr	r0, [r2, #24]
 8007830:	f7ff fb28 	bl	8006e84 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> misoport, _conf -> misopin, AF5_SPI1_6);
 8007834:	68a3      	ldr	r3, [r4, #8]
 8007836:	2205      	movs	r2, #5
 8007838:	8b99      	ldrh	r1, [r3, #28]
 800783a:	6998      	ldr	r0, [r3, #24]
 800783c:	f7ff fc00 	bl	8007040 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
 8007840:	68a3      	ldr	r3, [r4, #8]
 8007842:	2206      	movs	r2, #6
 8007844:	8b99      	ldrh	r1, [r3, #28]
 8007846:	6998      	ldr	r0, [r3, #24]
 8007848:	f7ff fc38 	bl	80070bc <gpio_set_alternatefunction_type>
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 800784c:	68a2      	ldr	r2, [r4, #8]
 800784e:	7813      	ldrb	r3, [r2, #0]
 8007850:	e766      	b.n	8007720 <_ZN3spi4initEP12spi_config_t+0x8c>
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8007852:	f501 3184 	add.w	r1, r1, #67584	; 0x10800
 8007856:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800785c:	644b      	str	r3, [r1, #68]	; 0x44
 800785e:	e74a      	b.n	80076f6 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8007860:	2333      	movs	r3, #51	; 0x33
 8007862:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007866:	6892      	ldr	r2, [r2, #8]
 8007868:	2a03      	cmp	r2, #3
 800786a:	d916      	bls.n	800789a <_ZN3spi4initEP12spi_config_t+0x206>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800786c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8007870:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8007874:	0112      	lsls	r2, r2, #4
 8007876:	b2d2      	uxtb	r2, r2
 8007878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800787c:	4628      	mov	r0, r5
 800787e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 8007880:	f501 4168 	add.w	r1, r1, #59392	; 0xe800
 8007884:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800788a:	644b      	str	r3, [r1, #68]	; 0x44
 800788c:	e733      	b.n	80076f6 <_ZN3spi4initEP12spi_config_t+0x62>
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 800788e:	6892      	ldr	r2, [r2, #8]
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007890:	2323      	movs	r3, #35	; 0x23
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007892:	2a03      	cmp	r2, #3
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007894:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007898:	d8e8      	bhi.n	800786c <_ZN3spi4initEP12spi_config_t+0x1d8>
			set_return(&ret, STM_ERR, __LINE__);
 800789a:	4628      	mov	r0, r5
 800789c:	22b0      	movs	r2, #176	; 0xb0
 800789e:	2100      	movs	r1, #0
 80078a0:	f001 fedc 	bl	800965c <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 80078a4:	4b23      	ldr	r3, [pc, #140]	; (8007934 <_ZN3spi4initEP12spi_config_t+0x2a0>)
 80078a6:	4a24      	ldr	r2, [pc, #144]	; (8007938 <_ZN3spi4initEP12spi_config_t+0x2a4>)
 80078a8:	4924      	ldr	r1, [pc, #144]	; (800793c <_ZN3spi4initEP12spi_config_t+0x2a8>)
 80078aa:	4825      	ldr	r0, [pc, #148]	; (8007940 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 80078ac:	f001 fe1e 	bl	80094ec <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 80078b0:	4924      	ldr	r1, [pc, #144]	; (8007944 <_ZN3spi4initEP12spi_config_t+0x2b0>)
 80078b2:	4823      	ldr	r0, [pc, #140]	; (8007940 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 80078b4:	2205      	movs	r2, #5
 80078b6:	f001 fd9d 	bl	80093f4 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 80078ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80078be:	f000 fccf 	bl	8008260 <systick_delay_ms>
 80078c2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80078c6:	4920      	ldr	r1, [pc, #128]	; (8007948 <_ZN3spi4initEP12spi_config_t+0x2b4>)
 80078c8:	4b20      	ldr	r3, [pc, #128]	; (800794c <_ZN3spi4initEP12spi_config_t+0x2b8>)
 80078ca:	68ca      	ldr	r2, [r1, #12]
 80078cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80078d0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80078d2:	60cb      	str	r3, [r1, #12]
 80078d4:	f3bf 8f4f 	dsb	sy
    __NOP();
 80078d8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80078da:	e7fd      	b.n	80078d8 <_ZN3spi4initEP12spi_config_t+0x244>
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80078dc:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 80078e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e6:	640b      	str	r3, [r1, #64]	; 0x40
 80078e8:	e705      	b.n	80076f6 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 80078ea:	2324      	movs	r3, #36	; 0x24
 80078ec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80078f0:	e7b9      	b.n	8007866 <_ZN3spi4initEP12spi_config_t+0x1d2>
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 80078f2:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 80078f6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80078f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078fc:	644b      	str	r3, [r1, #68]	; 0x44
 80078fe:	e6fa      	b.n	80076f6 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8007900:	2354      	movs	r3, #84	; 0x54
 8007902:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007906:	e7ae      	b.n	8007866 <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8007908:	2355      	movs	r3, #85	; 0x55
 800790a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800790e:	e7aa      	b.n	8007866 <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 8007910:	2356      	movs	r3, #86	; 0x56
 8007912:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007916:	e7a6      	b.n	8007866 <_ZN3spi4initEP12spi_config_t+0x1d2>
 8007918:	40013000 	.word	0x40013000
 800791c:	40003800 	.word	0x40003800
 8007920:	40003c00 	.word	0x40003c00
 8007924:	40013400 	.word	0x40013400
 8007928:	40015000 	.word	0x40015000
 800792c:	40015400 	.word	0x40015400
 8007930:	e000ecfc 	.word	0xe000ecfc
 8007934:	0800d5b8 	.word	0x0800d5b8
 8007938:	0800d5c0 	.word	0x0800d5c0
 800793c:	0800d550 	.word	0x0800d550
 8007940:	0800d5e8 	.word	0x0800d5e8
 8007944:	0800d59c 	.word	0x0800d59c
 8007948:	e000ed00 	.word	0xe000ed00
 800794c:	05fa0004 	.word	0x05fa0004

08007950 <_ZN3spi8transmitEmm>:

spi_config_t *spi::get_config(void){
	return _conf;
}

stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007954:	460c      	mov	r4, r1
	stm_ret_t ret;
 8007956:	2101      	movs	r1, #1
 8007958:	7001      	strb	r1, [r0, #0]
 800795a:	2100      	movs	r1, #0
 800795c:	6041      	str	r1, [r0, #4]

	txcount = 0U;
 800795e:	6221      	str	r1, [r4, #32]
	txlen = size;
	txbuf = data;

	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007960:	68a1      	ldr	r1, [r4, #8]
	txlen = size;
 8007962:	6263      	str	r3, [r4, #36]	; 0x24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007964:	7809      	ldrb	r1, [r1, #0]
	txbuf = data;
 8007966:	61a2      	str	r2, [r4, #24]
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007968:	4605      	mov	r5, r0
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 800796a:	0708      	lsls	r0, r1, #28
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 800796c:	b086      	sub	sp, #24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 800796e:	d463      	bmi.n	8007a38 <_ZN3spi8transmitEmm+0xe8>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007970:	f011 0f0a 	tst.w	r1, #10
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007974:	68e1      	ldr	r1, [r4, #12]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007976:	d007      	beq.n	8007988 <_ZN3spi8transmitEmm+0x38>
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007978:	680a      	ldr	r2, [r1, #0]
 800797a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797e:	600a      	str	r2, [r1, #0]
		_spi -> CR1 |= SPI_CR1_BIDIOE;
 8007980:	680a      	ldr	r2, [r1, #0]
 8007982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007986:	600a      	str	r2, [r1, #0]
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007988:	680a      	ldr	r2, [r1, #0]
 800798a:	0652      	lsls	r2, r2, #25
 800798c:	d54f      	bpl.n	8007a2e <_ZN3spi8transmitEmm+0xde>

	while(txcount < txlen){
 800798e:	ae02      	add	r6, sp, #8
 8007990:	b36b      	cbz	r3, 80079ee <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007992:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007996:	e006      	b.n	80079a6 <_ZN3spi8transmitEmm+0x56>
	while(txcount < txlen){
 8007998:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		_spi -> DR = *(uint32_t *)(txbuf);

		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);

		txcount++;
 800799c:	3301      	adds	r3, #1
	while(txcount < txlen){
 800799e:	429a      	cmp	r2, r3
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 80079a0:	61a0      	str	r0, [r4, #24]
		txcount++;
 80079a2:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 80079a4:	d923      	bls.n	80079ee <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 80079a6:	3108      	adds	r1, #8
 80079a8:	4630      	mov	r0, r6
 80079aa:	2301      	movs	r3, #1
 80079ac:	2202      	movs	r2, #2
 80079ae:	f8cd 8000 	str.w	r8, [sp]
 80079b2:	f001 fe17 	bl	80095e4 <wait_flag_in_register_timeout>
 80079b6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80079ba:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 80079be:	4628      	mov	r0, r5
 80079c0:	f001 fe52 	bl	8009668 <is_oke>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d047      	beq.n	8007a58 <_ZN3spi8transmitEmm+0x108>
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 80079c8:	68a2      	ldr	r2, [r4, #8]
		_spi -> DR = *(uint32_t *)(txbuf);
 80079ca:	69a3      	ldr	r3, [r4, #24]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 80079cc:	78d2      	ldrb	r2, [r2, #3]
		_spi -> DR = *(uint32_t *)(txbuf);
 80079ce:	68e1      	ldr	r1, [r4, #12]
 80079d0:	681f      	ldr	r7, [r3, #0]
 80079d2:	60cf      	str	r7, [r1, #12]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 80079d4:	1c58      	adds	r0, r3, #1
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	d0de      	beq.n	8007998 <_ZN3spi8transmitEmm+0x48>
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);
 80079da:	2a01      	cmp	r2, #1
 80079dc:	bf04      	itt	eq
 80079de:	3302      	addeq	r3, #2
 80079e0:	61a3      	streq	r3, [r4, #24]
	while(txcount < txlen){
 80079e2:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		txcount++;
 80079e6:	3301      	adds	r3, #1
	while(txcount < txlen){
 80079e8:	429a      	cmp	r2, r3
		txcount++;
 80079ea:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 80079ec:	d8db      	bhi.n	80079a6 <_ZN3spi8transmitEmm+0x56>
	}

	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 80079ee:	2364      	movs	r3, #100	; 0x64
 80079f0:	3108      	adds	r1, #8
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	4630      	mov	r0, r6
 80079f6:	2300      	movs	r3, #0
 80079f8:	2280      	movs	r2, #128	; 0x80
 80079fa:	f001 fdf3 	bl	80095e4 <wait_flag_in_register_timeout>
 80079fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007a02:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007a06:	4628      	mov	r0, r5
 8007a08:	f001 fe2e 	bl	8009668 <is_oke>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d032      	beq.n	8007a76 <_ZN3spi8transmitEmm+0x126>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return_line(&ret, __LINE__);
		return ret;
	}

	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007a10:	68a3      	ldr	r3, [r4, #8]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	f013 0f0a 	tst.w	r3, #10
 8007a18:	d105      	bne.n	8007a26 <_ZN3spi8transmitEmm+0xd6>
		__IO uint32_t tmp = _spi -> DR;
 8007a1a:	68e3      	ldr	r3, [r4, #12]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007a24:	9b05      	ldr	r3, [sp, #20]
	}

	return ret;
}
 8007a26:	4628      	mov	r0, r5
 8007a28:	b006      	add	sp, #24
 8007a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007a2e:	680a      	ldr	r2, [r1, #0]
 8007a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a34:	600a      	str	r2, [r1, #0]
 8007a36:	e7aa      	b.n	800798e <_ZN3spi8transmitEmm+0x3e>
		LOG_ERROR(TAG, "%s -> %s -> Mode half duplex slave unsupported transmit function.", __FILE__, __FUNCTION__);
 8007a38:	4b16      	ldr	r3, [pc, #88]	; (8007a94 <_ZN3spi8transmitEmm+0x144>)
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <_ZN3spi8transmitEmm+0x148>)
 8007a3c:	4917      	ldr	r1, [pc, #92]	; (8007a9c <_ZN3spi8transmitEmm+0x14c>)
 8007a3e:	4818      	ldr	r0, [pc, #96]	; (8007aa0 <_ZN3spi8transmitEmm+0x150>)
 8007a40:	f001 fd54 	bl	80094ec <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007a44:	4628      	mov	r0, r5
 8007a46:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007a4a:	2103      	movs	r1, #3
 8007a4c:	f001 fe06 	bl	800965c <set_return>
}
 8007a50:	4628      	mov	r0, r5
 8007a52:	b006      	add	sp, #24
 8007a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007a58:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <_ZN3spi8transmitEmm+0x144>)
 8007a5a:	4a0f      	ldr	r2, [pc, #60]	; (8007a98 <_ZN3spi8transmitEmm+0x148>)
 8007a5c:	4911      	ldr	r1, [pc, #68]	; (8007aa4 <_ZN3spi8transmitEmm+0x154>)
 8007a5e:	4810      	ldr	r0, [pc, #64]	; (8007aa0 <_ZN3spi8transmitEmm+0x150>)
 8007a60:	f001 fd44 	bl	80094ec <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007a64:	4628      	mov	r0, r5
 8007a66:	f240 1123 	movw	r1, #291	; 0x123
 8007a6a:	f001 fdfb 	bl	8009664 <set_return_line>
}
 8007a6e:	4628      	mov	r0, r5
 8007a70:	b006      	add	sp, #24
 8007a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007a76:	4b07      	ldr	r3, [pc, #28]	; (8007a94 <_ZN3spi8transmitEmm+0x144>)
 8007a78:	4a07      	ldr	r2, [pc, #28]	; (8007a98 <_ZN3spi8transmitEmm+0x148>)
 8007a7a:	490a      	ldr	r1, [pc, #40]	; (8007aa4 <_ZN3spi8transmitEmm+0x154>)
 8007a7c:	4808      	ldr	r0, [pc, #32]	; (8007aa0 <_ZN3spi8transmitEmm+0x150>)
 8007a7e:	f001 fd35 	bl	80094ec <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007a82:	4628      	mov	r0, r5
 8007a84:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007a88:	f001 fdec 	bl	8009664 <set_return_line>
}
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	b006      	add	sp, #24
 8007a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a94:	0800d5ec 	.word	0x0800d5ec
 8007a98:	0800d5c0 	.word	0x0800d5c0
 8007a9c:	0800d5f8 	.word	0x0800d5f8
 8007aa0:	0800d5e8 	.word	0x0800d5e8
 8007aa4:	0800d63c 	.word	0x0800d63c

08007aa8 <_ZN3spi16transmit_receiveEmmm>:
	}

	return ret;
}

stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	txcount = 0U;
	rxcount = 0U;
	rxlen = size;
	txlen = size;
	txbuf = txdata;
 8007aac:	618a      	str	r2, [r1, #24]
	rxbuf = rxdata;

	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007aae:	688a      	ldr	r2, [r1, #8]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007ab0:	4605      	mov	r5, r0
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007ab2:	7812      	ldrb	r2, [r2, #0]
	rxbuf = rxdata;
 8007ab4:	61cb      	str	r3, [r1, #28]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007ab6:	b086      	sub	sp, #24
	stm_ret_t ret;
 8007ab8:	2300      	movs	r3, #0
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007aba:	980c      	ldr	r0, [sp, #48]	; 0x30
	stm_ret_t ret;
 8007abc:	606b      	str	r3, [r5, #4]
	txcount = 0U;
 8007abe:	620b      	str	r3, [r1, #32]
	rxcount = 0U;
 8007ac0:	628b      	str	r3, [r1, #40]	; 0x28
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007ac2:	f012 0f0a 	tst.w	r2, #10
	stm_ret_t ret;
 8007ac6:	f04f 0301 	mov.w	r3, #1
	rxlen = size;
 8007aca:	62c8      	str	r0, [r1, #44]	; 0x2c
	txlen = size;
 8007acc:	6248      	str	r0, [r1, #36]	; 0x24
	stm_ret_t ret;
 8007ace:	702b      	strb	r3, [r5, #0]
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007ad0:	d158      	bne.n	8007b84 <_ZN3spi16transmit_receiveEmmm+0xdc>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	68c9      	ldr	r1, [r1, #12]
 8007ad6:	680b      	ldr	r3, [r1, #0]
 8007ad8:	065b      	lsls	r3, r3, #25
 8007ada:	d54e      	bpl.n	8007b7a <_ZN3spi16transmit_receiveEmmm+0xd2>

	while(txcount < txlen){
 8007adc:	ae02      	add	r6, sp, #8
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d060      	beq.n	8007ba4 <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007ae2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007ae6:	e00e      	b.n	8007b06 <_ZN3spi16transmit_receiveEmmm+0x5e>
		}
		*(uint32_t *)rxbuf = _spi -> DR;

		if(_conf->datasize == SPI_DATASIZE_8BIT) {
			txbuf += sizeof(uint8_t);
			rxbuf += sizeof(uint8_t);
 8007ae8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
			txbuf += sizeof(uint8_t);
 8007aec:	3201      	adds	r2, #1
			rxbuf += sizeof(uint8_t);
 8007aee:	3301      	adds	r3, #1
 8007af0:	e9c4 2306 	strd	r2, r3, [r4, #24]
	while(txcount < txlen){
 8007af4:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
			txbuf += sizeof(uint16_t);
			rxbuf += sizeof(uint16_t);
		}

		txcount++;
 8007af8:	6a23      	ldr	r3, [r4, #32]
 8007afa:	3301      	adds	r3, #1
		rxcount++;
 8007afc:	3201      	adds	r2, #1
	while(txcount < txlen){
 8007afe:	4298      	cmp	r0, r3
		txcount++;
 8007b00:	6223      	str	r3, [r4, #32]
		rxcount++;
 8007b02:	62a2      	str	r2, [r4, #40]	; 0x28
	while(txcount < txlen){
 8007b04:	d94e      	bls.n	8007ba4 <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007b06:	2301      	movs	r3, #1
 8007b08:	2202      	movs	r2, #2
 8007b0a:	3108      	adds	r1, #8
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f8cd 8000 	str.w	r8, [sp]
 8007b12:	f001 fd67 	bl	80095e4 <wait_flag_in_register_timeout>
 8007b16:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007b1a:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f001 fda2 	bl	8009668 <is_oke>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007b24:	2301      	movs	r3, #1
		if(!is_oke(&ret)) {
 8007b26:	4601      	mov	r1, r0
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4630      	mov	r0, r6
		if(!is_oke(&ret)) {
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	d055      	beq.n	8007bdc <_ZN3spi16transmit_receiveEmmm+0x134>
		_spi -> DR = *(uint32_t *)txbuf;
 8007b30:	69a7      	ldr	r7, [r4, #24]
 8007b32:	68e1      	ldr	r1, [r4, #12]
 8007b34:	f8d7 c000 	ldr.w	ip, [r7]
 8007b38:	f8c1 c00c 	str.w	ip, [r1, #12]
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007b3c:	3108      	adds	r1, #8
 8007b3e:	f8cd 8000 	str.w	r8, [sp]
 8007b42:	f001 fd4f 	bl	80095e4 <wait_flag_in_register_timeout>
 8007b46:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007b4a:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f001 fd8a 	bl	8009668 <is_oke>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d050      	beq.n	8007bfa <_ZN3spi16transmit_receiveEmmm+0x152>
		*(uint32_t *)rxbuf = _spi -> DR;
 8007b58:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8007b5c:	69e2      	ldr	r2, [r4, #28]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007b5e:	78db      	ldrb	r3, [r3, #3]
		*(uint32_t *)rxbuf = _spi -> DR;
 8007b60:	68c8      	ldr	r0, [r1, #12]
 8007b62:	6010      	str	r0, [r2, #0]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0bf      	beq.n	8007ae8 <_ZN3spi16transmit_receiveEmmm+0x40>
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d1c3      	bne.n	8007af4 <_ZN3spi16transmit_receiveEmmm+0x4c>
			txbuf += sizeof(uint16_t);
 8007b6c:	69a3      	ldr	r3, [r4, #24]
 8007b6e:	3302      	adds	r3, #2
 8007b70:	61a3      	str	r3, [r4, #24]
			rxbuf += sizeof(uint16_t);
 8007b72:	69e3      	ldr	r3, [r4, #28]
 8007b74:	3302      	adds	r3, #2
 8007b76:	61e3      	str	r3, [r4, #28]
 8007b78:	e7bc      	b.n	8007af4 <_ZN3spi16transmit_receiveEmmm+0x4c>
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007b7a:	680b      	ldr	r3, [r1, #0]
 8007b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b80:	600b      	str	r3, [r1, #0]
 8007b82:	e7ab      	b.n	8007adc <_ZN3spi16transmit_receiveEmmm+0x34>
			LOG_ERROR(TAG, "%s -> %s -> Mode half duplex master/slave unsupported transmit and receive function.", __FILE__, __FUNCTION__);
 8007b84:	4a2a      	ldr	r2, [pc, #168]	; (8007c30 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007b86:	492b      	ldr	r1, [pc, #172]	; (8007c34 <_ZN3spi16transmit_receiveEmmm+0x18c>)
 8007b88:	482b      	ldr	r0, [pc, #172]	; (8007c38 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007b8a:	4b2c      	ldr	r3, [pc, #176]	; (8007c3c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007b8c:	f001 fcae 	bl	80094ec <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007b90:	f240 1293 	movw	r2, #403	; 0x193
 8007b94:	2103      	movs	r1, #3
 8007b96:	4628      	mov	r0, r5
 8007b98:	f001 fd60 	bl	800965c <set_return>
		tmp = _spi -> SR;
		(void)tmp;
	}

	return ret;
}
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	b006      	add	sp, #24
 8007ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007ba4:	2364      	movs	r3, #100	; 0x64
 8007ba6:	3108      	adds	r1, #8
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	4630      	mov	r0, r6
 8007bac:	2300      	movs	r3, #0
 8007bae:	2280      	movs	r2, #128	; 0x80
 8007bb0:	f001 fd18 	bl	80095e4 <wait_flag_in_register_timeout>
 8007bb4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007bb8:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f001 fd53 	bl	8009668 <is_oke>
 8007bc2:	b348      	cbz	r0, 8007c18 <_ZN3spi16transmit_receiveEmmm+0x170>
	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007bc4:	68a3      	ldr	r3, [r4, #8]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	f013 0f0a 	tst.w	r3, #10
 8007bcc:	d1e6      	bne.n	8007b9c <_ZN3spi16transmit_receiveEmmm+0xf4>
		__IO uint32_t tmp = _spi -> DR;
 8007bce:	68e3      	ldr	r3, [r4, #12]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007bd8:	9b05      	ldr	r3, [sp, #20]
 8007bda:	e7df      	b.n	8007b9c <_ZN3spi16transmit_receiveEmmm+0xf4>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007bdc:	4b17      	ldr	r3, [pc, #92]	; (8007c3c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007bde:	4a14      	ldr	r2, [pc, #80]	; (8007c30 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007be0:	4917      	ldr	r1, [pc, #92]	; (8007c40 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007be2:	4815      	ldr	r0, [pc, #84]	; (8007c38 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007be4:	f001 fc82 	bl	80094ec <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007be8:	4628      	mov	r0, r5
 8007bea:	f240 119f 	movw	r1, #415	; 0x19f
 8007bee:	f001 fd39 	bl	8009664 <set_return_line>
}
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	b006      	add	sp, #24
 8007bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007bfa:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007bfc:	4a0c      	ldr	r2, [pc, #48]	; (8007c30 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007bfe:	4910      	ldr	r1, [pc, #64]	; (8007c40 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007c00:	480d      	ldr	r0, [pc, #52]	; (8007c38 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007c02:	f001 fc73 	bl	80094ec <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007c06:	4628      	mov	r0, r5
 8007c08:	f240 11a9 	movw	r1, #425	; 0x1a9
 8007c0c:	f001 fd2a 	bl	8009664 <set_return_line>
}
 8007c10:	4628      	mov	r0, r5
 8007c12:	b006      	add	sp, #24
 8007c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007c18:	4b08      	ldr	r3, [pc, #32]	; (8007c3c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007c1a:	4a05      	ldr	r2, [pc, #20]	; (8007c30 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007c1c:	4908      	ldr	r1, [pc, #32]	; (8007c40 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007c1e:	4806      	ldr	r0, [pc, #24]	; (8007c38 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007c20:	f001 fc64 	bl	80094ec <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007c24:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f001 fd1b 	bl	8009664 <set_return_line>
		return ret;
 8007c2e:	e7b5      	b.n	8007b9c <_ZN3spi16transmit_receiveEmmm+0xf4>
 8007c30:	0800d5c0 	.word	0x0800d5c0
 8007c34:	0800d670 	.word	0x0800d670
 8007c38:	0800d5e8 	.word	0x0800d5e8
 8007c3c:	0800d65c 	.word	0x0800d65c
 8007c40:	0800d63c 	.word	0x0800d63c

08007c44 <_Z10SPI_Tx_ISRP3spi>:
}
#endif /* ENABLE_DMA */



stm_ret_t SPI_Tx_ISR(spi *spi){
 8007c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	stm_ret_t ret;

	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007c48:	698a      	ldr	r2, [r1, #24]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007c4a:	460c      	mov	r4, r1
	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007c4c:	68c9      	ldr	r1, [r1, #12]
 8007c4e:	6813      	ldr	r3, [r2, #0]
 8007c50:	60cb      	str	r3, [r1, #12]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007c52:	4605      	mov	r5, r0
	spi -> txcount++;

	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007c54:	68a0      	ldr	r0, [r4, #8]
	spi -> txcount++;
 8007c56:	6a23      	ldr	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007c58:	78c0      	ldrb	r0, [r0, #3]
	spi -> txcount++;
 8007c5a:	3301      	adds	r3, #1
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007c5c:	b088      	sub	sp, #32
	spi -> txcount++;
 8007c5e:	6223      	str	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007c60:	b960      	cbnz	r0, 8007c7c <_Z10SPI_Tx_ISRP3spi+0x38>
		spi -> txbuf += sizeof(uint8_t);
 8007c62:	3201      	adds	r2, #1
 8007c64:	61a2      	str	r2, [r4, #24]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> txbuf += sizeof(uint16_t);

	if(spi -> txcount == spi -> txlen){
 8007c66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00e      	beq.n	8007c8a <_Z10SPI_Tx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	2300      	movs	r3, #0
 8007c70:	702a      	strb	r2, [r5, #0]
 8007c72:	606b      	str	r3, [r5, #4]
}
 8007c74:	4628      	mov	r0, r5
 8007c76:	b008      	add	sp, #32
 8007c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007c7c:	2801      	cmp	r0, #1
		spi -> txbuf += sizeof(uint16_t);
 8007c7e:	bf04      	itt	eq
 8007c80:	3202      	addeq	r2, #2
 8007c82:	61a2      	streq	r2, [r4, #24]
	if(spi -> txcount == spi -> txlen){
 8007c84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d1f0      	bne.n	8007c6c <_Z10SPI_Tx_ISRP3spi+0x28>
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007c8a:	ae06      	add	r6, sp, #24
 8007c8c:	2764      	movs	r7, #100	; 0x64
 8007c8e:	4630      	mov	r0, r6
 8007c90:	3108      	adds	r1, #8
 8007c92:	9700      	str	r7, [sp, #0]
 8007c94:	2301      	movs	r3, #1
 8007c96:	2202      	movs	r2, #2
 8007c98:	f001 fca4 	bl	80095e4 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f001 fce3 	bl	8009668 <is_oke>
 8007ca2:	b1f8      	cbz	r0, 8007ce4 <_Z10SPI_Tx_ISRP3spi+0xa0>
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007ca4:	68e1      	ldr	r1, [r4, #12]
 8007ca6:	684b      	ldr	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007ca8:	f10d 0808 	add.w	r8, sp, #8
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cb0:	604b      	str	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	3108      	adds	r1, #8
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2280      	movs	r2, #128	; 0x80
 8007cba:	9700      	str	r7, [sp, #0]
 8007cbc:	f001 fc92 	bl	80095e4 <wait_flag_in_register_timeout>
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007cc0:	68a3      	ldr	r3, [r4, #8]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007cc2:	e898 0003 	ldmia.w	r8, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	079a      	lsls	r2, r3, #30
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007cca:	e886 0003 	stmia.w	r6, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007cce:	d11c      	bne.n	8007d0a <_Z10SPI_Tx_ISRP3spi+0xc6>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007cd0:	f013 0f0a 	tst.w	r3, #10
 8007cd4:	d1ca      	bne.n	8007c6c <_Z10SPI_Tx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 8007cd6:	68e3      	ldr	r3, [r4, #12]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	9205      	str	r2, [sp, #20]
			tmp = spi -> _spi -> SR;
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	9305      	str	r3, [sp, #20]
			(void)tmp;
 8007ce0:	9b05      	ldr	r3, [sp, #20]
 8007ce2:	e7c3      	b.n	8007c6c <_Z10SPI_Tx_ISRP3spi+0x28>
			set_return_line(&ret, __LINE__);
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f240 3129 	movw	r1, #809	; 0x329
 8007cea:	f001 fcbb 	bl	8009664 <set_return_line>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007cee:	4919      	ldr	r1, [pc, #100]	; (8007d54 <_Z10SPI_Tx_ISRP3spi+0x110>)
 8007cf0:	4819      	ldr	r0, [pc, #100]	; (8007d58 <_Z10SPI_Tx_ISRP3spi+0x114>)
 8007cf2:	4b1a      	ldr	r3, [pc, #104]	; (8007d5c <_Z10SPI_Tx_ISRP3spi+0x118>)
 8007cf4:	4a1a      	ldr	r2, [pc, #104]	; (8007d60 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 8007cf6:	f001 fbf9 	bl	80094ec <LOG_ERROR>
			return ret;
 8007cfa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007cfe:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8007d02:	4628      	mov	r0, r5
 8007d04:	b008      	add	sp, #32
 8007d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(!is_oke(&ret)) {
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f001 fcac 	bl	8009668 <is_oke>
 8007d10:	b110      	cbz	r0, 8007d18 <_Z10SPI_Tx_ISRP3spi+0xd4>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	e7db      	b.n	8007cd0 <_Z10SPI_Tx_ISRP3spi+0x8c>
				LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007d18:	4b10      	ldr	r3, [pc, #64]	; (8007d5c <_Z10SPI_Tx_ISRP3spi+0x118>)
 8007d1a:	4a11      	ldr	r2, [pc, #68]	; (8007d60 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 8007d1c:	490d      	ldr	r1, [pc, #52]	; (8007d54 <_Z10SPI_Tx_ISRP3spi+0x110>)
 8007d1e:	480e      	ldr	r0, [pc, #56]	; (8007d58 <_Z10SPI_Tx_ISRP3spi+0x114>)
 8007d20:	f001 fbe4 	bl	80094ec <LOG_ERROR>
				set_return_line(&ret, __LINE__);
 8007d24:	f44f 714e 	mov.w	r1, #824	; 0x338
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f001 fc9b 	bl	8009664 <set_return_line>
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007d2e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8007d32:	6853      	ldr	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007d34:	7809      	ldrb	r1, [r1, #0]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8007d36:	f023 03a1 	bic.w	r3, r3, #161	; 0xa1
 8007d3a:	6053      	str	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007d3c:	078b      	lsls	r3, r1, #30
 8007d3e:	d503      	bpl.n	8007d48 <_Z10SPI_Tx_ISRP3spi+0x104>
 8007d40:	6813      	ldr	r3, [r2, #0]
 8007d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d46:	6013      	str	r3, [r2, #0]
				return ret;
 8007d48:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007d4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d50:	e790      	b.n	8007c74 <_Z10SPI_Tx_ISRP3spi+0x30>
 8007d52:	bf00      	nop
 8007d54:	0800d63c 	.word	0x0800d63c
 8007d58:	0800d5e8 	.word	0x0800d5e8
 8007d5c:	0800d6c8 	.word	0x0800d6c8
 8007d60:	0800d5c0 	.word	0x0800d5c0

08007d64 <_Z10SPI_Rx_ISRP3spi>:

stm_ret_t SPI_Rx_ISR(spi *spi){
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	460c      	mov	r4, r1
	stm_ret_t ret;

	*(uint32_t *)(spi -> rxbuf) = spi -> _spi -> DR ;
 8007d68:	68c9      	ldr	r1, [r1, #12]
 8007d6a:	69e3      	ldr	r3, [r4, #28]
 8007d6c:	68ca      	ldr	r2, [r1, #12]
 8007d6e:	601a      	str	r2, [r3, #0]
	spi -> rxcount++;
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007d70:	68a2      	ldr	r2, [r4, #8]
	spi -> rxcount++;
 8007d72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007d74:	78d2      	ldrb	r2, [r2, #3]
	spi -> rxcount++;
 8007d76:	3301      	adds	r3, #1
stm_ret_t SPI_Rx_ISR(spi *spi){
 8007d78:	b086      	sub	sp, #24
 8007d7a:	4605      	mov	r5, r0
	spi -> rxcount++;
 8007d7c:	62a3      	str	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007d7e:	b962      	cbnz	r2, 8007d9a <_Z10SPI_Rx_ISRP3spi+0x36>
		spi -> rxbuf += sizeof(uint8_t);
 8007d80:	69e2      	ldr	r2, [r4, #28]
 8007d82:	3201      	adds	r2, #1
 8007d84:	61e2      	str	r2, [r4, #28]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> rxbuf += sizeof(uint16_t);

	if(spi -> rxcount == spi -> rxlen){
 8007d86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00e      	beq.n	8007daa <_Z10SPI_Rx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2300      	movs	r3, #0
 8007d90:	702a      	strb	r2, [r5, #0]
 8007d92:	606b      	str	r3, [r5, #4]
}
 8007d94:	4628      	mov	r0, r5
 8007d96:	b006      	add	sp, #24
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007d9a:	2a01      	cmp	r2, #1
 8007d9c:	d1f3      	bne.n	8007d86 <_Z10SPI_Rx_ISRP3spi+0x22>
		spi -> rxbuf += sizeof(uint16_t);
 8007d9e:	69e2      	ldr	r2, [r4, #28]
 8007da0:	3202      	adds	r2, #2
 8007da2:	61e2      	str	r2, [r4, #28]
	if(spi -> rxcount == spi -> rxlen){
 8007da4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d1f0      	bne.n	8007d8c <_Z10SPI_Rx_ISRP3spi+0x28>
		spi -> _spi -> CR2 &=~ (SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 8007daa:	684b      	ldr	r3, [r1, #4]
 8007dac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007db0:	604b      	str	r3, [r1, #4]
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_RXNE, FLAG_RESET, SPI_TIMEOUT);
 8007db2:	ae04      	add	r6, sp, #16
 8007db4:	2364      	movs	r3, #100	; 0x64
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	4630      	mov	r0, r6
 8007dba:	3108      	adds	r1, #8
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f001 fc10 	bl	80095e4 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f001 fc4f 	bl	8009668 <is_oke>
 8007dca:	b158      	cbz	r0, 8007de4 <_Z10SPI_Rx_ISRP3spi+0x80>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007dcc:	68a3      	ldr	r3, [r4, #8]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f013 0f0a 	tst.w	r3, #10
 8007dd4:	d1da      	bne.n	8007d8c <_Z10SPI_Rx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 8007dd6:	68e3      	ldr	r3, [r4, #12]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	9203      	str	r2, [sp, #12]
			tmp = spi -> _spi -> SR;
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	9303      	str	r3, [sp, #12]
			(void)tmp;
 8007de0:	9b03      	ldr	r3, [sp, #12]
 8007de2:	e7d3      	b.n	8007d8c <_Z10SPI_Rx_ISRP3spi+0x28>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007de4:	4b07      	ldr	r3, [pc, #28]	; (8007e04 <_Z10SPI_Rx_ISRP3spi+0xa0>)
 8007de6:	4a08      	ldr	r2, [pc, #32]	; (8007e08 <_Z10SPI_Rx_ISRP3spi+0xa4>)
 8007de8:	4908      	ldr	r1, [pc, #32]	; (8007e0c <_Z10SPI_Rx_ISRP3spi+0xa8>)
 8007dea:	4809      	ldr	r0, [pc, #36]	; (8007e10 <_Z10SPI_Rx_ISRP3spi+0xac>)
 8007dec:	f001 fb7e 	bl	80094ec <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007df0:	f240 315d 	movw	r1, #861	; 0x35d
 8007df4:	4630      	mov	r0, r6
 8007df6:	f001 fc35 	bl	8009664 <set_return_line>
			return ret;
 8007dfa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007dfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8007e02:	e7c7      	b.n	8007d94 <_Z10SPI_Rx_ISRP3spi+0x30>
 8007e04:	0800d6d4 	.word	0x0800d6d4
 8007e08:	0800d5c0 	.word	0x0800d5c0
 8007e0c:	0800d63c 	.word	0x0800d63c
 8007e10:	0800d5e8 	.word	0x0800d5e8

08007e14 <SPI1_IRQHandler>:


#if defined(SPI1)
spi spi_1(SPI1);
spi_t spi1 = &spi_1;
void SPI1_IRQHandler(void){
 8007e14:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007e16:	4c22      	ldr	r4, [pc, #136]	; (8007ea0 <SPI1_IRQHandler+0x8c>)
 8007e18:	68e3      	ldr	r3, [r4, #12]
void SPI1_IRQHandler(void){
 8007e1a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007e24:	9a00      	ldr	r2, [sp, #0]
 8007e26:	0611      	lsls	r1, r2, #24
 8007e28:	d502      	bpl.n	8007e30 <SPI1_IRQHandler+0x1c>
 8007e2a:	9a01      	ldr	r2, [sp, #4]
 8007e2c:	0792      	lsls	r2, r2, #30
 8007e2e:	d41e      	bmi.n	8007e6e <SPI1_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8007e30:	9a00      	ldr	r2, [sp, #0]
 8007e32:	0650      	lsls	r0, r2, #25
 8007e34:	d502      	bpl.n	8007e3c <SPI1_IRQHandler+0x28>
 8007e36:	9a01      	ldr	r2, [sp, #4]
 8007e38:	07d1      	lsls	r1, r2, #31
 8007e3a:	d424      	bmi.n	8007e86 <SPI1_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8007e3c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8007e3e:	0652      	lsls	r2, r2, #25
 8007e40:	d40a      	bmi.n	8007e58 <SPI1_IRQHandler+0x44>
 8007e42:	9801      	ldr	r0, [sp, #4]
 8007e44:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007e48:	d106      	bne.n	8007e58 <SPI1_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007e4a:	6963      	ldr	r3, [r4, #20]
 8007e4c:	b16b      	cbz	r3, 8007e6a <SPI1_IRQHandler+0x56>
 8007e4e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_1);
}
 8007e50:	b004      	add	sp, #16
 8007e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007e56:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8007e60:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007e62:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8007e64:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1f1      	bne.n	8007e4e <SPI1_IRQHandler+0x3a>
}
 8007e6a:	b004      	add	sp, #16
 8007e6c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8007e6e:	4621      	mov	r1, r4
 8007e70:	a802      	add	r0, sp, #8
 8007e72:	f7ff fee7 	bl	8007c44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007e76:	a802      	add	r0, sp, #8
 8007e78:	f001 fbf6 	bl	8009668 <is_oke>
			event = SPI_EVENT_ERROR;
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	bf14      	ite	ne
 8007e80:	2001      	movne	r0, #1
 8007e82:	2003      	moveq	r0, #3
 8007e84:	e7e1      	b.n	8007e4a <SPI1_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007e86:	4906      	ldr	r1, [pc, #24]	; (8007ea0 <SPI1_IRQHandler+0x8c>)
 8007e88:	a802      	add	r0, sp, #8
 8007e8a:	f7ff ff6b 	bl	8007d64 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8007e8e:	a802      	add	r0, sp, #8
 8007e90:	f001 fbea 	bl	8009668 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007e94:	2800      	cmp	r0, #0
 8007e96:	bf0c      	ite	eq
 8007e98:	2003      	moveq	r0, #3
 8007e9a:	2002      	movne	r0, #2
 8007e9c:	e7d5      	b.n	8007e4a <SPI1_IRQHandler+0x36>
 8007e9e:	bf00      	nop
 8007ea0:	2000b598 	.word	0x2000b598

08007ea4 <SPI2_IRQHandler>:
#endif /* defined(SPI1) */
#if defined(SPI2)
spi spi_2(SPI2);
spi_t spi2 = &spi_2;
void SPI2_IRQHandler(void){
 8007ea4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007ea6:	4c22      	ldr	r4, [pc, #136]	; (8007f30 <SPI2_IRQHandler+0x8c>)
 8007ea8:	68e3      	ldr	r3, [r4, #12]
void SPI2_IRQHandler(void){
 8007eaa:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007eb4:	9a00      	ldr	r2, [sp, #0]
 8007eb6:	0611      	lsls	r1, r2, #24
 8007eb8:	d502      	bpl.n	8007ec0 <SPI2_IRQHandler+0x1c>
 8007eba:	9a01      	ldr	r2, [sp, #4]
 8007ebc:	0792      	lsls	r2, r2, #30
 8007ebe:	d41e      	bmi.n	8007efe <SPI2_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8007ec0:	9a00      	ldr	r2, [sp, #0]
 8007ec2:	0650      	lsls	r0, r2, #25
 8007ec4:	d502      	bpl.n	8007ecc <SPI2_IRQHandler+0x28>
 8007ec6:	9a01      	ldr	r2, [sp, #4]
 8007ec8:	07d1      	lsls	r1, r2, #31
 8007eca:	d424      	bmi.n	8007f16 <SPI2_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8007ecc:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8007ece:	0652      	lsls	r2, r2, #25
 8007ed0:	d40a      	bmi.n	8007ee8 <SPI2_IRQHandler+0x44>
 8007ed2:	9801      	ldr	r0, [sp, #4]
 8007ed4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007ed8:	d106      	bne.n	8007ee8 <SPI2_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007eda:	6963      	ldr	r3, [r4, #20]
 8007edc:	b16b      	cbz	r3, 8007efa <SPI2_IRQHandler+0x56>
 8007ede:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_2);
}
 8007ee0:	b004      	add	sp, #16
 8007ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007ee6:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8007ef0:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007ef2:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8007ef4:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1f1      	bne.n	8007ede <SPI2_IRQHandler+0x3a>
}
 8007efa:	b004      	add	sp, #16
 8007efc:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8007efe:	4621      	mov	r1, r4
 8007f00:	a802      	add	r0, sp, #8
 8007f02:	f7ff fe9f 	bl	8007c44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007f06:	a802      	add	r0, sp, #8
 8007f08:	f001 fbae 	bl	8009668 <is_oke>
			event = SPI_EVENT_ERROR;
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	bf14      	ite	ne
 8007f10:	2001      	movne	r0, #1
 8007f12:	2003      	moveq	r0, #3
 8007f14:	e7e1      	b.n	8007eda <SPI2_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007f16:	4906      	ldr	r1, [pc, #24]	; (8007f30 <SPI2_IRQHandler+0x8c>)
 8007f18:	a802      	add	r0, sp, #8
 8007f1a:	f7ff ff23 	bl	8007d64 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8007f1e:	a802      	add	r0, sp, #8
 8007f20:	f001 fba2 	bl	8009668 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007f24:	2800      	cmp	r0, #0
 8007f26:	bf0c      	ite	eq
 8007f28:	2003      	moveq	r0, #3
 8007f2a:	2002      	movne	r0, #2
 8007f2c:	e7d5      	b.n	8007eda <SPI2_IRQHandler+0x36>
 8007f2e:	bf00      	nop
 8007f30:	2000b5cc 	.word	0x2000b5cc

08007f34 <SPI3_IRQHandler>:
#endif /* defined(SPI2) */
#if defined(SPI3)
spi spi_3(SPI3);
spi_t spi3 = &spi_3;
void SPI3_IRQHandler(void){
 8007f34:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007f36:	4c22      	ldr	r4, [pc, #136]	; (8007fc0 <SPI3_IRQHandler+0x8c>)
 8007f38:	68e3      	ldr	r3, [r4, #12]
void SPI3_IRQHandler(void){
 8007f3a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007f44:	9a00      	ldr	r2, [sp, #0]
 8007f46:	0611      	lsls	r1, r2, #24
 8007f48:	d502      	bpl.n	8007f50 <SPI3_IRQHandler+0x1c>
 8007f4a:	9a01      	ldr	r2, [sp, #4]
 8007f4c:	0792      	lsls	r2, r2, #30
 8007f4e:	d41e      	bmi.n	8007f8e <SPI3_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8007f50:	9a00      	ldr	r2, [sp, #0]
 8007f52:	0650      	lsls	r0, r2, #25
 8007f54:	d502      	bpl.n	8007f5c <SPI3_IRQHandler+0x28>
 8007f56:	9a01      	ldr	r2, [sp, #4]
 8007f58:	07d1      	lsls	r1, r2, #31
 8007f5a:	d424      	bmi.n	8007fa6 <SPI3_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8007f5c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8007f5e:	0652      	lsls	r2, r2, #25
 8007f60:	d40a      	bmi.n	8007f78 <SPI3_IRQHandler+0x44>
 8007f62:	9801      	ldr	r0, [sp, #4]
 8007f64:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007f68:	d106      	bne.n	8007f78 <SPI3_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007f6a:	6963      	ldr	r3, [r4, #20]
 8007f6c:	b16b      	cbz	r3, 8007f8a <SPI3_IRQHandler+0x56>
 8007f6e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_3);
}
 8007f70:	b004      	add	sp, #16
 8007f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007f76:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8007f80:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007f82:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8007f84:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1f1      	bne.n	8007f6e <SPI3_IRQHandler+0x3a>
}
 8007f8a:	b004      	add	sp, #16
 8007f8c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8007f8e:	4621      	mov	r1, r4
 8007f90:	a802      	add	r0, sp, #8
 8007f92:	f7ff fe57 	bl	8007c44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007f96:	a802      	add	r0, sp, #8
 8007f98:	f001 fb66 	bl	8009668 <is_oke>
			event = SPI_EVENT_ERROR;
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	bf14      	ite	ne
 8007fa0:	2001      	movne	r0, #1
 8007fa2:	2003      	moveq	r0, #3
 8007fa4:	e7e1      	b.n	8007f6a <SPI3_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007fa6:	4906      	ldr	r1, [pc, #24]	; (8007fc0 <SPI3_IRQHandler+0x8c>)
 8007fa8:	a802      	add	r0, sp, #8
 8007faa:	f7ff fedb 	bl	8007d64 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8007fae:	a802      	add	r0, sp, #8
 8007fb0:	f001 fb5a 	bl	8009668 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	bf0c      	ite	eq
 8007fb8:	2003      	moveq	r0, #3
 8007fba:	2002      	movne	r0, #2
 8007fbc:	e7d5      	b.n	8007f6a <SPI3_IRQHandler+0x36>
 8007fbe:	bf00      	nop
 8007fc0:	2000b600 	.word	0x2000b600

08007fc4 <SPI4_IRQHandler>:
#endif /* defined(SPI3) */
#if defined(SPI4)
spi spi_4(SPI4);
spi_t spi4 = &spi_4;
void SPI4_IRQHandler(void){
 8007fc4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007fc6:	4c22      	ldr	r4, [pc, #136]	; (8008050 <SPI4_IRQHandler+0x8c>)
 8007fc8:	68e3      	ldr	r3, [r4, #12]
void SPI4_IRQHandler(void){
 8007fca:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007fd4:	9a00      	ldr	r2, [sp, #0]
 8007fd6:	0611      	lsls	r1, r2, #24
 8007fd8:	d502      	bpl.n	8007fe0 <SPI4_IRQHandler+0x1c>
 8007fda:	9a01      	ldr	r2, [sp, #4]
 8007fdc:	0792      	lsls	r2, r2, #30
 8007fde:	d41e      	bmi.n	800801e <SPI4_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8007fe0:	9a00      	ldr	r2, [sp, #0]
 8007fe2:	0650      	lsls	r0, r2, #25
 8007fe4:	d502      	bpl.n	8007fec <SPI4_IRQHandler+0x28>
 8007fe6:	9a01      	ldr	r2, [sp, #4]
 8007fe8:	07d1      	lsls	r1, r2, #31
 8007fea:	d424      	bmi.n	8008036 <SPI4_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8007fec:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8007fee:	0652      	lsls	r2, r2, #25
 8007ff0:	d40a      	bmi.n	8008008 <SPI4_IRQHandler+0x44>
 8007ff2:	9801      	ldr	r0, [sp, #4]
 8007ff4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007ff8:	d106      	bne.n	8008008 <SPI4_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007ffa:	6963      	ldr	r3, [r4, #20]
 8007ffc:	b16b      	cbz	r3, 800801a <SPI4_IRQHandler+0x56>
 8007ffe:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_4);
}
 8008000:	b004      	add	sp, #16
 8008002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008006:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008010:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008012:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008014:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1f1      	bne.n	8007ffe <SPI4_IRQHandler+0x3a>
}
 800801a:	b004      	add	sp, #16
 800801c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800801e:	4621      	mov	r1, r4
 8008020:	a802      	add	r0, sp, #8
 8008022:	f7ff fe0f 	bl	8007c44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008026:	a802      	add	r0, sp, #8
 8008028:	f001 fb1e 	bl	8009668 <is_oke>
			event = SPI_EVENT_ERROR;
 800802c:	2800      	cmp	r0, #0
 800802e:	bf14      	ite	ne
 8008030:	2001      	movne	r0, #1
 8008032:	2003      	moveq	r0, #3
 8008034:	e7e1      	b.n	8007ffa <SPI4_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8008036:	4906      	ldr	r1, [pc, #24]	; (8008050 <SPI4_IRQHandler+0x8c>)
 8008038:	a802      	add	r0, sp, #8
 800803a:	f7ff fe93 	bl	8007d64 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800803e:	a802      	add	r0, sp, #8
 8008040:	f001 fb12 	bl	8009668 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8008044:	2800      	cmp	r0, #0
 8008046:	bf0c      	ite	eq
 8008048:	2003      	moveq	r0, #3
 800804a:	2002      	movne	r0, #2
 800804c:	e7d5      	b.n	8007ffa <SPI4_IRQHandler+0x36>
 800804e:	bf00      	nop
 8008050:	2000b634 	.word	0x2000b634

08008054 <SPI5_IRQHandler>:
#endif /* defined(SPI4) */
#if defined(SPI5)
spi spi_5(SPI5);
spi_t spi5 = &spi_5;
void SPI5_IRQHandler(void){
 8008054:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008056:	4c22      	ldr	r4, [pc, #136]	; (80080e0 <SPI5_IRQHandler+0x8c>)
 8008058:	68e3      	ldr	r3, [r4, #12]
void SPI5_IRQHandler(void){
 800805a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8008064:	9a00      	ldr	r2, [sp, #0]
 8008066:	0611      	lsls	r1, r2, #24
 8008068:	d502      	bpl.n	8008070 <SPI5_IRQHandler+0x1c>
 800806a:	9a01      	ldr	r2, [sp, #4]
 800806c:	0792      	lsls	r2, r2, #30
 800806e:	d41e      	bmi.n	80080ae <SPI5_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008070:	9a00      	ldr	r2, [sp, #0]
 8008072:	0650      	lsls	r0, r2, #25
 8008074:	d502      	bpl.n	800807c <SPI5_IRQHandler+0x28>
 8008076:	9a01      	ldr	r2, [sp, #4]
 8008078:	07d1      	lsls	r1, r2, #31
 800807a:	d424      	bmi.n	80080c6 <SPI5_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800807c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800807e:	0652      	lsls	r2, r2, #25
 8008080:	d40a      	bmi.n	8008098 <SPI5_IRQHandler+0x44>
 8008082:	9801      	ldr	r0, [sp, #4]
 8008084:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008088:	d106      	bne.n	8008098 <SPI5_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800808a:	6963      	ldr	r3, [r4, #20]
 800808c:	b16b      	cbz	r3, 80080aa <SPI5_IRQHandler+0x56>
 800808e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_5);
}
 8008090:	b004      	add	sp, #16
 8008092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008096:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80080a0:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080a2:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80080a4:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1f1      	bne.n	800808e <SPI5_IRQHandler+0x3a>
}
 80080aa:	b004      	add	sp, #16
 80080ac:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80080ae:	4621      	mov	r1, r4
 80080b0:	a802      	add	r0, sp, #8
 80080b2:	f7ff fdc7 	bl	8007c44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80080b6:	a802      	add	r0, sp, #8
 80080b8:	f001 fad6 	bl	8009668 <is_oke>
			event = SPI_EVENT_ERROR;
 80080bc:	2800      	cmp	r0, #0
 80080be:	bf14      	ite	ne
 80080c0:	2001      	movne	r0, #1
 80080c2:	2003      	moveq	r0, #3
 80080c4:	e7e1      	b.n	800808a <SPI5_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80080c6:	4906      	ldr	r1, [pc, #24]	; (80080e0 <SPI5_IRQHandler+0x8c>)
 80080c8:	a802      	add	r0, sp, #8
 80080ca:	f7ff fe4b 	bl	8007d64 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80080ce:	a802      	add	r0, sp, #8
 80080d0:	f001 faca 	bl	8009668 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80080d4:	2800      	cmp	r0, #0
 80080d6:	bf0c      	ite	eq
 80080d8:	2003      	moveq	r0, #3
 80080da:	2002      	movne	r0, #2
 80080dc:	e7d5      	b.n	800808a <SPI5_IRQHandler+0x36>
 80080de:	bf00      	nop
 80080e0:	2000b668 	.word	0x2000b668

080080e4 <SPI6_IRQHandler>:
#endif /* defined(SPI5) */
#if defined(SPI6)
spi spi_6(SPI6);
spi_t spi6 = &spi_6;
void SPI6_IRQHandler(void){
 80080e4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80080e6:	4c22      	ldr	r4, [pc, #136]	; (8008170 <SPI6_IRQHandler+0x8c>)
 80080e8:	68e3      	ldr	r3, [r4, #12]
void SPI6_IRQHandler(void){
 80080ea:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80080f4:	9a00      	ldr	r2, [sp, #0]
 80080f6:	0611      	lsls	r1, r2, #24
 80080f8:	d502      	bpl.n	8008100 <SPI6_IRQHandler+0x1c>
 80080fa:	9a01      	ldr	r2, [sp, #4]
 80080fc:	0792      	lsls	r2, r2, #30
 80080fe:	d41e      	bmi.n	800813e <SPI6_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008100:	9a00      	ldr	r2, [sp, #0]
 8008102:	0650      	lsls	r0, r2, #25
 8008104:	d502      	bpl.n	800810c <SPI6_IRQHandler+0x28>
 8008106:	9a01      	ldr	r2, [sp, #4]
 8008108:	07d1      	lsls	r1, r2, #31
 800810a:	d424      	bmi.n	8008156 <SPI6_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800810c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800810e:	0652      	lsls	r2, r2, #25
 8008110:	d40a      	bmi.n	8008128 <SPI6_IRQHandler+0x44>
 8008112:	9801      	ldr	r0, [sp, #4]
 8008114:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008118:	d106      	bne.n	8008128 <SPI6_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800811a:	6963      	ldr	r3, [r4, #20]
 800811c:	b16b      	cbz	r3, 800813a <SPI6_IRQHandler+0x56>
 800811e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_6);
}
 8008120:	b004      	add	sp, #16
 8008122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008126:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008130:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008132:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008134:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1f1      	bne.n	800811e <SPI6_IRQHandler+0x3a>
}
 800813a:	b004      	add	sp, #16
 800813c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800813e:	4621      	mov	r1, r4
 8008140:	a802      	add	r0, sp, #8
 8008142:	f7ff fd7f 	bl	8007c44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008146:	a802      	add	r0, sp, #8
 8008148:	f001 fa8e 	bl	8009668 <is_oke>
			event = SPI_EVENT_ERROR;
 800814c:	2800      	cmp	r0, #0
 800814e:	bf14      	ite	ne
 8008150:	2001      	movne	r0, #1
 8008152:	2003      	moveq	r0, #3
 8008154:	e7e1      	b.n	800811a <SPI6_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8008156:	4906      	ldr	r1, [pc, #24]	; (8008170 <SPI6_IRQHandler+0x8c>)
 8008158:	a802      	add	r0, sp, #8
 800815a:	f7ff fe03 	bl	8007d64 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800815e:	a802      	add	r0, sp, #8
 8008160:	f001 fa82 	bl	8009668 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8008164:	2800      	cmp	r0, #0
 8008166:	bf0c      	ite	eq
 8008168:	2003      	moveq	r0, #3
 800816a:	2002      	movne	r0, #2
 800816c:	e7d5      	b.n	800811a <SPI6_IRQHandler+0x36>
 800816e:	bf00      	nop
 8008170:	2000b69c 	.word	0x2000b69c

08008174 <_GLOBAL__sub_I_cc>:
}
 8008174:	b4f0      	push	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 8008176:	4e2c      	ldr	r6, [pc, #176]	; (8008228 <_GLOBAL__sub_I_cc+0xb4>)
 8008178:	4c2c      	ldr	r4, [pc, #176]	; (800822c <_GLOBAL__sub_I_cc+0xb8>)
 800817a:	4d2d      	ldr	r5, [pc, #180]	; (8008230 <_GLOBAL__sub_I_cc+0xbc>)
	_spi = Spi;
 800817c:	4f2d      	ldr	r7, [pc, #180]	; (8008234 <_GLOBAL__sub_I_cc+0xc0>)
 800817e:	60f7      	str	r7, [r6, #12]
spi::spi(SPI_TypeDef *Spi){
 8008180:	2300      	movs	r3, #0
 8008182:	e9c6 3300 	strd	r3, r3, [r6]
 8008186:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800818a:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800818e:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8008192:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
 8008196:	60b3      	str	r3, [r6, #8]
	_spi = Spi;
 8008198:	4e27      	ldr	r6, [pc, #156]	; (8008238 <_GLOBAL__sub_I_cc+0xc4>)
spi::spi(SPI_TypeDef *Spi){
 800819a:	60ab      	str	r3, [r5, #8]
 800819c:	e9c5 3300 	strd	r3, r3, [r5]
 80081a0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80081a4:	e9c5 3306 	strd	r3, r3, [r5, #24]
 80081a8:	e9c5 3308 	strd	r3, r3, [r5, #32]
 80081ac:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80081b0:	e9c4 3300 	strd	r3, r3, [r4]
 80081b4:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80081b8:	e9c4 3306 	strd	r3, r3, [r4, #24]
 80081bc:	60a3      	str	r3, [r4, #8]
 80081be:	6223      	str	r3, [r4, #32]
	_spi = Spi;
 80081c0:	60ee      	str	r6, [r5, #12]
 80081c2:	4d1e      	ldr	r5, [pc, #120]	; (800823c <_GLOBAL__sub_I_cc+0xc8>)
spi::spi(SPI_TypeDef *Spi){
 80081c4:	481e      	ldr	r0, [pc, #120]	; (8008240 <_GLOBAL__sub_I_cc+0xcc>)
	_spi = Spi;
 80081c6:	60e5      	str	r5, [r4, #12]
spi::spi(SPI_TypeDef *Spi){
 80081c8:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 80081cc:	62e3      	str	r3, [r4, #44]	; 0x2c
	_spi = Spi;
 80081ce:	4c1d      	ldr	r4, [pc, #116]	; (8008244 <_GLOBAL__sub_I_cc+0xd0>)
spi::spi(SPI_TypeDef *Spi){
 80081d0:	491d      	ldr	r1, [pc, #116]	; (8008248 <_GLOBAL__sub_I_cc+0xd4>)
 80081d2:	4a1e      	ldr	r2, [pc, #120]	; (800824c <_GLOBAL__sub_I_cc+0xd8>)
	_spi = Spi;
 80081d4:	60c4      	str	r4, [r0, #12]
spi::spi(SPI_TypeDef *Spi){
 80081d6:	e9c0 3300 	strd	r3, r3, [r0]
 80081da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081de:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80081e2:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80081e6:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80081ea:	6083      	str	r3, [r0, #8]
	_spi = Spi;
 80081ec:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80081f0:	4817      	ldr	r0, [pc, #92]	; (8008250 <_GLOBAL__sub_I_cc+0xdc>)
spi::spi(SPI_TypeDef *Spi){
 80081f2:	608b      	str	r3, [r1, #8]
 80081f4:	e9c1 3300 	strd	r3, r3, [r1]
 80081f8:	e9c1 3304 	strd	r3, r3, [r1, #16]
 80081fc:	e9c1 3306 	strd	r3, r3, [r1, #24]
 8008200:	e9c1 3308 	strd	r3, r3, [r1, #32]
 8008204:	e9c1 330a 	strd	r3, r3, [r1, #40]	; 0x28
 8008208:	e9c2 3300 	strd	r3, r3, [r2]
 800820c:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8008210:	6093      	str	r3, [r2, #8]
	_spi = Spi;
 8008212:	60cc      	str	r4, [r1, #12]
}
 8008214:	bcf0      	pop	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 8008216:	e9c2 3306 	strd	r3, r3, [r2, #24]
 800821a:	e9c2 3308 	strd	r3, r3, [r2, #32]
 800821e:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
	_spi = Spi;
 8008222:	60d0      	str	r0, [r2, #12]
}
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	2000b598 	.word	0x2000b598
 800822c:	2000b600 	.word	0x2000b600
 8008230:	2000b5cc 	.word	0x2000b5cc
 8008234:	40013000 	.word	0x40013000
 8008238:	40003800 	.word	0x40003800
 800823c:	40003c00 	.word	0x40003c00
 8008240:	2000b634 	.word	0x2000b634
 8008244:	40013400 	.word	0x40013400
 8008248:	2000b668 	.word	0x2000b668
 800824c:	2000b69c 	.word	0x2000b69c
 8008250:	40015400 	.word	0x40015400

08008254 <systick_get_tick>:
void increment_tick(void){
	sdk_tick++;
}

uint32_t systick_get_tick(void){
	return sdk_tick;
 8008254:	4b01      	ldr	r3, [pc, #4]	; (800825c <systick_get_tick+0x8>)
 8008256:	6818      	ldr	r0, [r3, #0]
}
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	2000b6d0 	.word	0x2000b6d0

08008260 <systick_delay_ms>:

void systick_delay_ms(uint32_t ms){
	uint32_t tickstart = sdk_tick;
 8008260:	4a05      	ldr	r2, [pc, #20]	; (8008278 <systick_delay_ms+0x18>)
	uint32_t wait = ms;

	if (wait < 0xFFFFFFU) wait += 1UL;
 8008262:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008266:	4298      	cmp	r0, r3
	uint32_t tickstart = sdk_tick;
 8008268:	6811      	ldr	r1, [r2, #0]
	if (wait < 0xFFFFFFU) wait += 1UL;
 800826a:	bf38      	it	cc
 800826c:	3001      	addcc	r0, #1

	while((sdk_tick - tickstart) < wait);
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	1a5b      	subs	r3, r3, r1
 8008272:	4283      	cmp	r3, r0
 8008274:	d3fb      	bcc.n	800826e <systick_delay_ms+0xe>
}
 8008276:	4770      	bx	lr
 8008278:	2000b6d0 	.word	0x2000b6d0

0800827c <systick_init>:
	SysTick_Config(SystemCoreClock / CONFIG_SYSTICK_RATE);
 800827c:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <systick_init+0x38>)
 800827e:	4a0e      	ldr	r2, [pc, #56]	; (80082b8 <systick_init+0x3c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008288:	3b01      	subs	r3, #1
 800828a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
void systick_init(uint32_t systick_priority){
 800828e:	4601      	mov	r1, r0
 8008290:	d20b      	bcs.n	80082aa <systick_init+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008292:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008296:	4809      	ldr	r0, [pc, #36]	; (80082bc <systick_init+0x40>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008298:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800829a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800829e:	f880 c023 	strb.w	ip, [r0, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082a2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082a4:	2000      	movs	r0, #0
 80082a6:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082a8:	6113      	str	r3, [r2, #16]
	NVIC_Set_Priority(SysTick_IRQn, systick_priority, 0U);
 80082aa:	2200      	movs	r2, #0
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082b0:	f001 ba70 	b.w	8009794 <NVIC_Set_Priority>
 80082b4:	20000000 	.word	0x20000000
 80082b8:	10624dd3 	.word	0x10624dd3
 80082bc:	e000ed00 	.word	0xe000ed00

080082c0 <get_tick>:

uint32_t get_tick(void){
	return get_tick_func();
 80082c0:	4b01      	ldr	r3, [pc, #4]	; (80082c8 <get_tick+0x8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4718      	bx	r3
 80082c6:	bf00      	nop
 80082c8:	20000038 	.word	0x20000038

080082cc <delay_ms>:
}

void delay_ms(uint32_t ms){
	delay_ms_func(ms);
 80082cc:	4b01      	ldr	r3, [pc, #4]	; (80082d4 <delay_ms+0x8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4718      	bx	r3
 80082d2:	bf00      	nop
 80082d4:	20000034 	.word	0x20000034

080082d8 <app_systick_process>:
	sdk_tick++;
 80082d8:	4a17      	ldr	r2, [pc, #92]	; (8008338 <app_systick_process+0x60>)
void set_function_delay_ms(void(*func_ptr)(uint32_t)){
	delay_ms_func = func_ptr;
}

extern "C"{
	void app_systick_process(void){
 80082da:	b538      	push	{r3, r4, r5, lr}
	sdk_tick++;
 80082dc:	6813      	ldr	r3, [r2, #0]
		increment_tick();

		systick_total_ticks++;
 80082de:	4c17      	ldr	r4, [pc, #92]	; (800833c <app_systick_process+0x64>)
	sdk_tick++;
 80082e0:	3301      	adds	r3, #1
 80082e2:	6013      	str	r3, [r2, #0]
		systick_total_ticks++;
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	3301      	adds	r3, #1
 80082e8:	6023      	str	r3, [r4, #0]
		if(systick_total_ticks == 1000){
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082f0:	d000      	beq.n	80082f4 <app_systick_process+0x1c>
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
			systick_total_ticks = 0;
			systick_idle_ticks = 0;
		}
	}
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 80082f4:	4d12      	ldr	r5, [pc, #72]	; (8008340 <app_systick_process+0x68>)
 80082f6:	ed95 7a00 	vldr	s14, [r5]
 80082fa:	edd4 7a00 	vldr	s15, [r4]
 80082fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008306:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800830a:	ee17 0a90 	vmov	r0, s15
 800830e:	f7f8 f93b 	bl	8000588 <__aeabi_f2d>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	2000      	movs	r0, #0
 8008318:	490a      	ldr	r1, [pc, #40]	; (8008344 <app_systick_process+0x6c>)
 800831a:	f7f7 ffd5 	bl	80002c8 <__aeabi_dsub>
 800831e:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <app_systick_process+0x70>)
 8008320:	2200      	movs	r2, #0
 8008322:	f7f8 f989 	bl	8000638 <__aeabi_dmul>
 8008326:	f7f8 fc7f 	bl	8000c28 <__aeabi_d2f>
 800832a:	4a08      	ldr	r2, [pc, #32]	; (800834c <app_systick_process+0x74>)
			systick_total_ticks = 0;
 800832c:	2300      	movs	r3, #0
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 800832e:	6010      	str	r0, [r2, #0]
			systick_total_ticks = 0;
 8008330:	6023      	str	r3, [r4, #0]
			systick_idle_ticks = 0;
 8008332:	602b      	str	r3, [r5, #0]
	}
 8008334:	bd38      	pop	{r3, r4, r5, pc}
 8008336:	bf00      	nop
 8008338:	2000b6d0 	.word	0x2000b6d0
 800833c:	2000b97c 	.word	0x2000b97c
 8008340:	2000b978 	.word	0x2000b978
 8008344:	3ff00000 	.word	0x3ff00000
 8008348:	40590000 	.word	0x40590000
 800834c:	2000b970 	.word	0x2000b970

08008350 <_ZN3tim4initEP12tim_config_t>:
tim::tim(TIM_TypeDef *Timer){
	_tim = Timer;
}

/* TIM Basic */
stm_ret_t tim::init(tim_config_t *conf){
 8008350:	b470      	push	{r4, r5, r6}
	stm_ret_t ret;

	_conf = conf;

#if defined(TIM1)
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008352:	684b      	ldr	r3, [r1, #4]
 8008354:	4c7d      	ldr	r4, [pc, #500]	; (800854c <_ZN3tim4initEP12tim_config_t+0x1fc>)
	_conf = conf;
 8008356:	610a      	str	r2, [r1, #16]
	stm_ret_t ret;
 8008358:	2501      	movs	r5, #1
 800835a:	7005      	strb	r5, [r0, #0]
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 800835c:	42a3      	cmp	r3, r4
	stm_ret_t ret;
 800835e:	f04f 0500 	mov.w	r5, #0
 8008362:	6045      	str	r5, [r0, #4]
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008364:	f000 8087 	beq.w	8008476 <_ZN3tim4initEP12tim_config_t+0x126>
#endif
#if defined(TIM2)
	else if(_tim == TIM2)  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8008368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800836c:	d033      	beq.n	80083d6 <_ZN3tim4initEP12tim_config_t+0x86>
#endif
#if defined(TIM3)
	else if(_tim == TIM3)  RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 800836e:	4c78      	ldr	r4, [pc, #480]	; (8008550 <_ZN3tim4initEP12tim_config_t+0x200>)
 8008370:	42a3      	cmp	r3, r4
 8008372:	f000 808f 	beq.w	8008494 <_ZN3tim4initEP12tim_config_t+0x144>
#endif
#if defined(TIM4)
	else if(_tim == TIM4)  RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008376:	4c77      	ldr	r4, [pc, #476]	; (8008554 <_ZN3tim4initEP12tim_config_t+0x204>)
 8008378:	42a3      	cmp	r3, r4
 800837a:	f000 8095 	beq.w	80084a8 <_ZN3tim4initEP12tim_config_t+0x158>
#endif
#if defined(TIM5)
	else if(_tim == TIM5)  RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 800837e:	4c76      	ldr	r4, [pc, #472]	; (8008558 <_ZN3tim4initEP12tim_config_t+0x208>)
 8008380:	42a3      	cmp	r3, r4
 8008382:	d07e      	beq.n	8008482 <_ZN3tim4initEP12tim_config_t+0x132>
#endif
#if defined(TIM6)
	else if(_tim == TIM6)  RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 8008384:	4c75      	ldr	r4, [pc, #468]	; (800855c <_ZN3tim4initEP12tim_config_t+0x20c>)
 8008386:	42a3      	cmp	r3, r4
 8008388:	f000 8094 	beq.w	80084b4 <_ZN3tim4initEP12tim_config_t+0x164>
#endif
#if defined(TIM7)
	else if(_tim == TIM7)  RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 800838c:	4c74      	ldr	r4, [pc, #464]	; (8008560 <_ZN3tim4initEP12tim_config_t+0x210>)
 800838e:	42a3      	cmp	r3, r4
 8008390:	f000 80a2 	beq.w	80084d8 <_ZN3tim4initEP12tim_config_t+0x188>
#endif
#if defined(TIM8)
	else if(_tim == TIM8)  RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 8008394:	4c73      	ldr	r4, [pc, #460]	; (8008564 <_ZN3tim4initEP12tim_config_t+0x214>)
 8008396:	42a3      	cmp	r3, r4
 8008398:	f000 80a7 	beq.w	80084ea <_ZN3tim4initEP12tim_config_t+0x19a>
#endif
#if defined(TIM9)
	else if(_tim == TIM9)  RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 800839c:	4c72      	ldr	r4, [pc, #456]	; (8008568 <_ZN3tim4initEP12tim_config_t+0x218>)
 800839e:	42a3      	cmp	r3, r4
 80083a0:	f000 808e 	beq.w	80084c0 <_ZN3tim4initEP12tim_config_t+0x170>
#endif
#if defined(TIM10)
	else if(_tim == TIM10) RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 80083a4:	4c71      	ldr	r4, [pc, #452]	; (800856c <_ZN3tim4initEP12tim_config_t+0x21c>)
 80083a6:	42a3      	cmp	r3, r4
 80083a8:	f000 80a8 	beq.w	80084fc <_ZN3tim4initEP12tim_config_t+0x1ac>
#endif
#if defined(TIM11)
	else if(_tim == TIM11) RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 80083ac:	4c70      	ldr	r4, [pc, #448]	; (8008570 <_ZN3tim4initEP12tim_config_t+0x220>)
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	f000 80b0 	beq.w	8008514 <_ZN3tim4initEP12tim_config_t+0x1c4>
#endif
#if defined(TIM12)
	else if(_tim == TIM12) RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 80083b4:	4c6f      	ldr	r4, [pc, #444]	; (8008574 <_ZN3tim4initEP12tim_config_t+0x224>)
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	f000 80b5 	beq.w	8008526 <_ZN3tim4initEP12tim_config_t+0x1d6>
#endif
#if defined(TIM13)
	else if(_tim == TIM13) RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 80083bc:	4c6e      	ldr	r4, [pc, #440]	; (8008578 <_ZN3tim4initEP12tim_config_t+0x228>)
 80083be:	42a3      	cmp	r3, r4
 80083c0:	f000 80b7 	beq.w	8008532 <_ZN3tim4initEP12tim_config_t+0x1e2>
#endif
#if defined(TIM14)
	else if(_tim == TIM14) RCC -> APB1ENR |= RCC_APB1ENR_TIM14EN;
 80083c4:	4c6d      	ldr	r4, [pc, #436]	; (800857c <_ZN3tim4initEP12tim_config_t+0x22c>)
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	d10a      	bne.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
 80083ca:	4d6d      	ldr	r5, [pc, #436]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 80083cc:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80083ce:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80083d2:	642c      	str	r4, [r5, #64]	; 0x40
 80083d4:	e004      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM2)  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80083d6:	4d6a      	ldr	r5, [pc, #424]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 80083d8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80083da:	f044 0401 	orr.w	r4, r4, #1
 80083de:	642c      	str	r4, [r5, #64]	; 0x40
#endif

	/* BASIC TIMER */
	_tim -> CR1 = 0U;
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 80083e0:	7a94      	ldrb	r4, [r2, #10]
 80083e2:	7a16      	ldrb	r6, [r2, #8]
 80083e4:	01e4      	lsls	r4, r4, #7
	_tim -> CR1 = 0U;
 80083e6:	2500      	movs	r5, #0
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 80083e8:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 80083ec:	7a56      	ldrb	r6, [r2, #9]
	_tim -> CR1 = 0U;
 80083ee:	601d      	str	r5, [r3, #0]
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 80083f0:	ea44 1446 	orr.w	r4, r4, r6, lsl #5
 80083f4:	681e      	ldr	r6, [r3, #0]
 80083f6:	4334      	orrs	r4, r6
 80083f8:	601c      	str	r4, [r3, #0]

	_tim -> ARR = 0U;
	_tim -> ARR = _conf -> reload - 1;
 80083fa:	6854      	ldr	r4, [r2, #4]
	_tim -> ARR = 0U;
 80083fc:	62dd      	str	r5, [r3, #44]	; 0x2c
	_tim -> ARR = _conf -> reload - 1;
 80083fe:	3c01      	subs	r4, #1
 8008400:	62dc      	str	r4, [r3, #44]	; 0x2c
	_tim -> PSC = 0U;
	_tim -> PSC = _conf -> prescaler - 1;
 8008402:	6814      	ldr	r4, [r2, #0]
	_tim -> PSC = 0U;
 8008404:	629d      	str	r5, [r3, #40]	; 0x28

	_tim -> EGR = TIM_EGR_UG;

	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 8008406:	7ad5      	ldrb	r5, [r2, #11]
	_tim -> EGR = TIM_EGR_UG;
 8008408:	2201      	movs	r2, #1
	_tim -> PSC = _conf -> prescaler - 1;
 800840a:	3c01      	subs	r4, #1
	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 800840c:	4295      	cmp	r5, r2
	_tim -> PSC = _conf -> prescaler - 1;
 800840e:	629c      	str	r4, [r3, #40]	; 0x28
	_tim -> EGR = TIM_EGR_UG;
 8008410:	615a      	str	r2, [r3, #20]
	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 8008412:	d001      	beq.n	8008418 <_ZN3tim4initEP12tim_config_t+0xc8>
		else if(_tim == TIM14) IRQn = TIM8_TRG_COM_TIM14_IRQn;
#endif
	}

	return ret;
}
 8008414:	bc70      	pop	{r4, r5, r6}
 8008416:	4770      	bx	lr
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 8008418:	4a4c      	ldr	r2, [pc, #304]	; (800854c <_ZN3tim4initEP12tim_config_t+0x1fc>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d040      	beq.n	80084a0 <_ZN3tim4initEP12tim_config_t+0x150>
		else if(_tim == TIM2)  IRQn = TIM2_IRQn;
 800841e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008422:	d034      	beq.n	800848e <_ZN3tim4initEP12tim_config_t+0x13e>
		else if(_tim == TIM3)  IRQn = TIM3_IRQn;
 8008424:	4a4a      	ldr	r2, [pc, #296]	; (8008550 <_ZN3tim4initEP12tim_config_t+0x200>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d053      	beq.n	80084d2 <_ZN3tim4initEP12tim_config_t+0x182>
		else if(_tim == TIM4)  IRQn = TIM4_IRQn;
 800842a:	4a4a      	ldr	r2, [pc, #296]	; (8008554 <_ZN3tim4initEP12tim_config_t+0x204>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d059      	beq.n	80084e4 <_ZN3tim4initEP12tim_config_t+0x194>
		else if(_tim == TIM5)  IRQn = TIM5_IRQn;
 8008430:	4a49      	ldr	r2, [pc, #292]	; (8008558 <_ZN3tim4initEP12tim_config_t+0x208>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d05f      	beq.n	80084f6 <_ZN3tim4initEP12tim_config_t+0x1a6>
		else if(_tim == TIM6)  IRQn = TIM6_DAC_IRQn;
 8008436:	4a49      	ldr	r2, [pc, #292]	; (800855c <_ZN3tim4initEP12tim_config_t+0x20c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d047      	beq.n	80084cc <_ZN3tim4initEP12tim_config_t+0x17c>
		else if(_tim == TIM7)  IRQn = TIM7_IRQn;
 800843c:	4a48      	ldr	r2, [pc, #288]	; (8008560 <_ZN3tim4initEP12tim_config_t+0x210>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d062      	beq.n	8008508 <_ZN3tim4initEP12tim_config_t+0x1b8>
		else if(_tim == TIM8)  IRQn = TIM8_UP_TIM13_IRQn;
 8008442:	4a48      	ldr	r2, [pc, #288]	; (8008564 <_ZN3tim4initEP12tim_config_t+0x214>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d062      	beq.n	800850e <_ZN3tim4initEP12tim_config_t+0x1be>
		else if(_tim == TIM9)  IRQn = TIM1_BRK_TIM9_IRQn;
 8008448:	4a47      	ldr	r2, [pc, #284]	; (8008568 <_ZN3tim4initEP12tim_config_t+0x218>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d068      	beq.n	8008520 <_ZN3tim4initEP12tim_config_t+0x1d0>
		else if(_tim == TIM10) IRQn = TIM1_UP_TIM10_IRQn;
 800844e:	4a47      	ldr	r2, [pc, #284]	; (800856c <_ZN3tim4initEP12tim_config_t+0x21c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d025      	beq.n	80084a0 <_ZN3tim4initEP12tim_config_t+0x150>
		else if(_tim == TIM11) IRQn = TIM1_TRG_COM_TIM11_IRQn;
 8008454:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008458:	4293      	cmp	r3, r2
 800845a:	d070      	beq.n	800853e <_ZN3tim4initEP12tim_config_t+0x1ee>
		else if(_tim == TIM12) IRQn = TIM8_BRK_TIM12_IRQn;
 800845c:	4a45      	ldr	r2, [pc, #276]	; (8008574 <_ZN3tim4initEP12tim_config_t+0x224>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d070      	beq.n	8008544 <_ZN3tim4initEP12tim_config_t+0x1f4>
		else if(_tim == TIM13) IRQn = TIM8_UP_TIM13_IRQn;
 8008462:	4a45      	ldr	r2, [pc, #276]	; (8008578 <_ZN3tim4initEP12tim_config_t+0x228>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d052      	beq.n	800850e <_ZN3tim4initEP12tim_config_t+0x1be>
		else if(_tim == TIM14) IRQn = TIM8_TRG_COM_TIM14_IRQn;
 8008468:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800846c:	4293      	cmp	r3, r2
 800846e:	bf04      	itt	eq
 8008470:	232d      	moveq	r3, #45	; 0x2d
 8008472:	750b      	strbeq	r3, [r1, #20]
	return ret;
 8008474:	e7ce      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008476:	4d42      	ldr	r5, [pc, #264]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 8008478:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 800847a:	f044 0401 	orr.w	r4, r4, #1
 800847e:	646c      	str	r4, [r5, #68]	; 0x44
 8008480:	e7ae      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM5)  RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8008482:	4d3f      	ldr	r5, [pc, #252]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 8008484:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008486:	f044 0408 	orr.w	r4, r4, #8
 800848a:	642c      	str	r4, [r5, #64]	; 0x40
 800848c:	e7a8      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM2)  IRQn = TIM2_IRQn;
 800848e:	231c      	movs	r3, #28
 8008490:	750b      	strb	r3, [r1, #20]
 8008492:	e7bf      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM3)  RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8008494:	4d3a      	ldr	r5, [pc, #232]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 8008496:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008498:	f044 0402 	orr.w	r4, r4, #2
 800849c:	642c      	str	r4, [r5, #64]	; 0x40
 800849e:	e79f      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 80084a0:	2319      	movs	r3, #25
}
 80084a2:	bc70      	pop	{r4, r5, r6}
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 80084a4:	750b      	strb	r3, [r1, #20]
}
 80084a6:	4770      	bx	lr
	else if(_tim == TIM4)  RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 80084a8:	4d35      	ldr	r5, [pc, #212]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 80084aa:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80084ac:	f044 0404 	orr.w	r4, r4, #4
 80084b0:	642c      	str	r4, [r5, #64]	; 0x40
 80084b2:	e795      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM6)  RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 80084b4:	4d32      	ldr	r5, [pc, #200]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 80084b6:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80084b8:	f044 0410 	orr.w	r4, r4, #16
 80084bc:	642c      	str	r4, [r5, #64]	; 0x40
 80084be:	e78f      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM9)  RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 80084c0:	4d2f      	ldr	r5, [pc, #188]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 80084c2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 80084c4:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 80084c8:	646c      	str	r4, [r5, #68]	; 0x44
 80084ca:	e789      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM6)  IRQn = TIM6_DAC_IRQn;
 80084cc:	2336      	movs	r3, #54	; 0x36
 80084ce:	750b      	strb	r3, [r1, #20]
 80084d0:	e7a0      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM3)  IRQn = TIM3_IRQn;
 80084d2:	231d      	movs	r3, #29
 80084d4:	750b      	strb	r3, [r1, #20]
 80084d6:	e79d      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM7)  RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 80084d8:	4d29      	ldr	r5, [pc, #164]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 80084da:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80084dc:	f044 0420 	orr.w	r4, r4, #32
 80084e0:	642c      	str	r4, [r5, #64]	; 0x40
 80084e2:	e77d      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM4)  IRQn = TIM4_IRQn;
 80084e4:	231e      	movs	r3, #30
 80084e6:	750b      	strb	r3, [r1, #20]
 80084e8:	e794      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM8)  RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 80084ea:	4d25      	ldr	r5, [pc, #148]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 80084ec:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 80084ee:	f044 0402 	orr.w	r4, r4, #2
 80084f2:	646c      	str	r4, [r5, #68]	; 0x44
 80084f4:	e774      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM5)  IRQn = TIM5_IRQn;
 80084f6:	2332      	movs	r3, #50	; 0x32
 80084f8:	750b      	strb	r3, [r1, #20]
 80084fa:	e78b      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM10) RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 80084fc:	4d20      	ldr	r5, [pc, #128]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 80084fe:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8008500:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8008504:	646c      	str	r4, [r5, #68]	; 0x44
 8008506:	e76b      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM7)  IRQn = TIM7_IRQn;
 8008508:	2337      	movs	r3, #55	; 0x37
 800850a:	750b      	strb	r3, [r1, #20]
 800850c:	e782      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM8)  IRQn = TIM8_UP_TIM13_IRQn;
 800850e:	232c      	movs	r3, #44	; 0x2c
 8008510:	750b      	strb	r3, [r1, #20]
 8008512:	e77f      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM11) RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 8008514:	4d1a      	ldr	r5, [pc, #104]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 8008516:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8008518:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 800851c:	646c      	str	r4, [r5, #68]	; 0x44
 800851e:	e75f      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM9)  IRQn = TIM1_BRK_TIM9_IRQn;
 8008520:	2318      	movs	r3, #24
 8008522:	750b      	strb	r3, [r1, #20]
 8008524:	e776      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM12) RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 8008526:	4d16      	ldr	r5, [pc, #88]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 8008528:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 800852a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 800852e:	642c      	str	r4, [r5, #64]	; 0x40
 8008530:	e756      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM13) RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 8008532:	4d13      	ldr	r5, [pc, #76]	; (8008580 <_ZN3tim4initEP12tim_config_t+0x230>)
 8008534:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008536:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800853a:	642c      	str	r4, [r5, #64]	; 0x40
 800853c:	e750      	b.n	80083e0 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM11) IRQn = TIM1_TRG_COM_TIM11_IRQn;
 800853e:	231a      	movs	r3, #26
 8008540:	750b      	strb	r3, [r1, #20]
 8008542:	e767      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM12) IRQn = TIM8_BRK_TIM12_IRQn;
 8008544:	232b      	movs	r3, #43	; 0x2b
 8008546:	750b      	strb	r3, [r1, #20]
 8008548:	e764      	b.n	8008414 <_ZN3tim4initEP12tim_config_t+0xc4>
 800854a:	bf00      	nop
 800854c:	40010000 	.word	0x40010000
 8008550:	40000400 	.word	0x40000400
 8008554:	40000800 	.word	0x40000800
 8008558:	40000c00 	.word	0x40000c00
 800855c:	40001000 	.word	0x40001000
 8008560:	40001400 	.word	0x40001400
 8008564:	40010400 	.word	0x40010400
 8008568:	40014000 	.word	0x40014000
 800856c:	40014400 	.word	0x40014400
 8008570:	40014800 	.word	0x40014800
 8008574:	40001800 	.word	0x40001800
 8008578:	40001c00 	.word	0x40001c00
 800857c:	40002000 	.word	0x40002000
 8008580:	40023800 	.word	0x40023800

08008584 <_ZN3tim13reset_counterEv>:
	_conf -> reload = arl;
	_tim -> ARR = arl;
}

void tim::reset_counter(void){
	_tim -> CNT = 0;
 8008584:	6843      	ldr	r3, [r0, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	625a      	str	r2, [r3, #36]	; 0x24
}
 800858a:	4770      	bx	lr

0800858c <_ZN3tim11get_counterEv>:

uint32_t tim::get_counter(void){
	return _tim -> CNT;
 800858c:	6843      	ldr	r3, [r0, #4]
 800858e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop

08008594 <_ZN3tim5startEv>:
}

stm_ret_t tim::start(void){
	stm_ret_t ret;

	if(_tim -> CR1 & TIM_CR1_CEN){
 8008594:	684b      	ldr	r3, [r1, #4]
 8008596:	681a      	ldr	r2, [r3, #0]
	stm_ret_t ret;
 8008598:	2101      	movs	r1, #1
stm_ret_t tim::start(void){
 800859a:	b510      	push	{r4, lr}
	if(_tim -> CR1 & TIM_CR1_CEN){
 800859c:	07d2      	lsls	r2, r2, #31
	stm_ret_t ret;
 800859e:	7001      	strb	r1, [r0, #0]
 80085a0:	f04f 0100 	mov.w	r1, #0
stm_ret_t tim::start(void){
 80085a4:	4604      	mov	r4, r0
	stm_ret_t ret;
 80085a6:	6041      	str	r1, [r0, #4]
	if(_tim -> CR1 & TIM_CR1_CEN){
 80085a8:	d405      	bmi.n	80085b6 <_ZN3tim5startEv+0x22>
#if CONFIG_USE_LOG_MONITOR && TIM_LOG
		LOG_WARN(TAG, "%s -> %s, Timer started, can't restart.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}
	_tim -> CR1 |= TIM_CR1_CEN;
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	f042 0201 	orr.w	r2, r2, #1
 80085b0:	601a      	str	r2, [r3, #0]

	return ret;
}
 80085b2:	4620      	mov	r0, r4
 80085b4:	bd10      	pop	{r4, pc}
		set_return(&ret, STM_BUSY, __LINE__);
 80085b6:	22d3      	movs	r2, #211	; 0xd3
 80085b8:	2104      	movs	r1, #4
 80085ba:	f001 f84f 	bl	800965c <set_return>
		LOG_WARN(TAG, "%s -> %s, Timer started, can't restart.", __FILE__, __FUNCTION__);
 80085be:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <_ZN3tim5startEv+0x3c>)
 80085c0:	4a04      	ldr	r2, [pc, #16]	; (80085d4 <_ZN3tim5startEv+0x40>)
 80085c2:	4905      	ldr	r1, [pc, #20]	; (80085d8 <_ZN3tim5startEv+0x44>)
 80085c4:	4805      	ldr	r0, [pc, #20]	; (80085dc <_ZN3tim5startEv+0x48>)
 80085c6:	f000 ff53 	bl	8009470 <LOG_WARN>
}
 80085ca:	4620      	mov	r0, r4
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	bf00      	nop
 80085d0:	0800d770 	.word	0x0800d770
 80085d4:	0800d6f8 	.word	0x0800d6f8
 80085d8:	0800d778 	.word	0x0800d778
 80085dc:	0800d76c 	.word	0x0800d76c

080085e0 <_ZN3tim4stopEv>:

stm_ret_t tim::stop(void){
	stm_ret_t ret;

	if(!(_tim -> CR1 & TIM_CR1_CEN)){
 80085e0:	684b      	ldr	r3, [r1, #4]
 80085e2:	6819      	ldr	r1, [r3, #0]
	stm_ret_t ret;
 80085e4:	2201      	movs	r2, #1
stm_ret_t tim::stop(void){
 80085e6:	b510      	push	{r4, lr}
	if(!(_tim -> CR1 & TIM_CR1_CEN)){
 80085e8:	f011 0101 	ands.w	r1, r1, #1
	stm_ret_t ret;
 80085ec:	7002      	strb	r2, [r0, #0]
 80085ee:	f04f 0200 	mov.w	r2, #0
stm_ret_t tim::stop(void){
 80085f2:	4604      	mov	r4, r0
	stm_ret_t ret;
 80085f4:	6042      	str	r2, [r0, #4]
	if(!(_tim -> CR1 & TIM_CR1_CEN)){
 80085f6:	d005      	beq.n	8008604 <_ZN3tim4stopEv+0x24>
#if CONFIG_USE_LOG_MONITOR && TIM_LOG
		LOG_WARN(TAG, "%s -> %s, Timer not started, can't stop.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}
	_tim -> CR1 &=~ TIM_CR1_CEN;
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	f022 0201 	bic.w	r2, r2, #1
 80085fe:	601a      	str	r2, [r3, #0]

	return ret;
}
 8008600:	4620      	mov	r0, r4
 8008602:	bd10      	pop	{r4, pc}
		set_return(&ret, STM_ERR, __LINE__);
 8008604:	22e2      	movs	r2, #226	; 0xe2
 8008606:	f001 f829 	bl	800965c <set_return>
		LOG_WARN(TAG, "%s -> %s, Timer not started, can't stop.", __FILE__, __FUNCTION__);
 800860a:	4b04      	ldr	r3, [pc, #16]	; (800861c <_ZN3tim4stopEv+0x3c>)
 800860c:	4a04      	ldr	r2, [pc, #16]	; (8008620 <_ZN3tim4stopEv+0x40>)
 800860e:	4905      	ldr	r1, [pc, #20]	; (8008624 <_ZN3tim4stopEv+0x44>)
 8008610:	4805      	ldr	r0, [pc, #20]	; (8008628 <_ZN3tim4stopEv+0x48>)
 8008612:	f000 ff2d 	bl	8009470 <LOG_WARN>
}
 8008616:	4620      	mov	r0, r4
 8008618:	bd10      	pop	{r4, pc}
 800861a:	bf00      	nop
 800861c:	0800d7a0 	.word	0x0800d7a0
 8008620:	0800d6f8 	.word	0x0800d6f8
 8008624:	0800d7a8 	.word	0x0800d7a8
 8008628:	0800d76c 	.word	0x0800d76c

0800862c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef>:
void TIM8_TRG_COM_TIM14_IRQHandler(void){
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_14);
}
 800862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
tim::tim(TIM_TypeDef *Timer){
 8008630:	f8df a154 	ldr.w	sl, [pc, #340]	; 8008788 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x15c>
 8008634:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800878c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x160>
 8008638:	4f4a      	ldr	r7, [pc, #296]	; (8008764 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x138>)
	_tim = Timer;
 800863a:	4a4b      	ldr	r2, [pc, #300]	; (8008768 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x13c>)
tim::tim(TIM_TypeDef *Timer){
 800863c:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8008790 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x164>
	_tim = Timer;
 8008640:	f8ca 2004 	str.w	r2, [sl, #4]
tim::tim(TIM_TypeDef *Timer){
 8008644:	2300      	movs	r3, #0
 8008646:	f8ca 300c 	str.w	r3, [sl, #12]
 800864a:	f8ca 3000 	str.w	r3, [sl]
 800864e:	f8ca 3008 	str.w	r3, [sl, #8]
 8008652:	f8ca 3010 	str.w	r3, [sl, #16]
	_tim = Timer;
 8008656:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8008794 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x168>
tim::tim(TIM_TypeDef *Timer){
 800865a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8008798 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x16c>
 800865e:	60fb      	str	r3, [r7, #12]
	_tim = Timer;
 8008660:	f8c9 a004 	str.w	sl, [r9, #4]
tim::tim(TIM_TypeDef *Timer){
 8008664:	f8c9 300c 	str.w	r3, [r9, #12]
 8008668:	f8c9 3000 	str.w	r3, [r9]
 800866c:	f8c9 3008 	str.w	r3, [r9, #8]
 8008670:	f8c9 3010 	str.w	r3, [r9, #16]
	_tim = Timer;
 8008674:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800879c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x170>
tim::tim(TIM_TypeDef *Timer){
 8008678:	f8df c124 	ldr.w	ip, [pc, #292]	; 80087a0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x174>
 800867c:	4e3b      	ldr	r6, [pc, #236]	; (800876c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x140>)
 800867e:	4d3c      	ldr	r5, [pc, #240]	; (8008770 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x144>)
 8008680:	f8c8 300c 	str.w	r3, [r8, #12]
	_tim = Timer;
 8008684:	f8c8 9004 	str.w	r9, [r8, #4]
tim::tim(TIM_TypeDef *Timer){
 8008688:	f8c8 3000 	str.w	r3, [r8]
 800868c:	f8c8 3008 	str.w	r3, [r8, #8]
 8008690:	f8c8 3010 	str.w	r3, [r8, #16]
	_tim = Timer;
 8008694:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80087a4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x178>
tim::tim(TIM_TypeDef *Timer){
 8008698:	4c36      	ldr	r4, [pc, #216]	; (8008774 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x148>)
 800869a:	f8ce 300c 	str.w	r3, [lr, #12]
	_tim = Timer;
 800869e:	f8ce 8004 	str.w	r8, [lr, #4]
tim::tim(TIM_TypeDef *Timer){
 80086a2:	f8ce 3000 	str.w	r3, [lr]
 80086a6:	f8ce 3008 	str.w	r3, [lr, #8]
 80086aa:	f8ce 3010 	str.w	r3, [lr, #16]
	_tim = Timer;
 80086ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086b2:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 80087a8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x17c>
tim::tim(TIM_TypeDef *Timer){
 80086b6:	4830      	ldr	r0, [pc, #192]	; (8008778 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x14c>)
	_tim = Timer;
 80086b8:	f8cc e004 	str.w	lr, [ip, #4]
 80086bc:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
tim::tim(TIM_TypeDef *Timer){
 80086c0:	f8cc 3000 	str.w	r3, [ip]
 80086c4:	f8cc 3008 	str.w	r3, [ip, #8]
 80086c8:	f8cc 300c 	str.w	r3, [ip, #12]
 80086cc:	f8cc 3010 	str.w	r3, [ip, #16]
 80086d0:	6033      	str	r3, [r6, #0]
 80086d2:	60b3      	str	r3, [r6, #8]
 80086d4:	603b      	str	r3, [r7, #0]
 80086d6:	60bb      	str	r3, [r7, #8]
 80086d8:	613b      	str	r3, [r7, #16]
	_tim = Timer;
 80086da:	f8c7 9004 	str.w	r9, [r7, #4]
 80086de:	606a      	str	r2, [r5, #4]
 80086e0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
tim::tim(TIM_TypeDef *Timer){
 80086e4:	4925      	ldr	r1, [pc, #148]	; (800877c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x150>)
	_tim = Timer;
 80086e6:	6062      	str	r2, [r4, #4]
 80086e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086ec:	6042      	str	r2, [r0, #4]
 80086ee:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 80086f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
tim::tim(TIM_TypeDef *Timer){
 80086f6:	60f3      	str	r3, [r6, #12]
 80086f8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80087ac <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x180>
	_tim = Timer;
 80086fc:	f8c6 8004 	str.w	r8, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 8008700:	6133      	str	r3, [r6, #16]
	_tim = Timer;
 8008702:	604a      	str	r2, [r1, #4]
 8008704:	4e1e      	ldr	r6, [pc, #120]	; (8008780 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x154>)
 8008706:	4a1f      	ldr	r2, [pc, #124]	; (8008784 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x158>)
 8008708:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 80087b0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x184>
tim::tim(TIM_TypeDef *Timer){
 800870c:	60eb      	str	r3, [r5, #12]
	_tim = Timer;
 800870e:	f50a 5aa0 	add.w	sl, sl, #5120	; 0x1400
 8008712:	f50e 6e40 	add.w	lr, lr, #3072	; 0xc00
tim::tim(TIM_TypeDef *Timer){
 8008716:	60e3      	str	r3, [r4, #12]
	_tim = Timer;
 8008718:	f8c2 a004 	str.w	sl, [r2, #4]
tim::tim(TIM_TypeDef *Timer){
 800871c:	60c3      	str	r3, [r0, #12]
	_tim = Timer;
 800871e:	f8c6 e004 	str.w	lr, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 8008722:	60cb      	str	r3, [r1, #12]
 8008724:	602b      	str	r3, [r5, #0]
 8008726:	60d3      	str	r3, [r2, #12]
 8008728:	60ab      	str	r3, [r5, #8]
 800872a:	612b      	str	r3, [r5, #16]
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	60a3      	str	r3, [r4, #8]
 8008730:	6123      	str	r3, [r4, #16]
 8008732:	6003      	str	r3, [r0, #0]
 8008734:	6083      	str	r3, [r0, #8]
 8008736:	6103      	str	r3, [r0, #16]
 8008738:	600b      	str	r3, [r1, #0]
 800873a:	608b      	str	r3, [r1, #8]
 800873c:	610b      	str	r3, [r1, #16]
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	6093      	str	r3, [r2, #8]
 8008742:	6113      	str	r3, [r2, #16]
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	60b3      	str	r3, [r6, #8]
 8008748:	60f3      	str	r3, [r6, #12]
 800874a:	6133      	str	r3, [r6, #16]
 800874c:	f8cb 3000 	str.w	r3, [fp]
 8008750:	f8cb 3008 	str.w	r3, [fp, #8]
 8008754:	f8cb 300c 	str.w	r3, [fp, #12]
 8008758:	f8cb 3010 	str.w	r3, [fp, #16]
	_tim = Timer;
 800875c:	f8cb c004 	str.w	ip, [fp, #4]
}
 8008760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008764:	2000b764 	.word	0x2000b764
 8008768:	40010000 	.word	0x40010000
 800876c:	2000b7dc 	.word	0x2000b7dc
 8008770:	2000b7f4 	.word	0x2000b7f4
 8008774:	2000b80c 	.word	0x2000b80c
 8008778:	2000b6ec 	.word	0x2000b6ec
 800877c:	2000b704 	.word	0x2000b704
 8008780:	2000b734 	.word	0x2000b734
 8008784:	2000b71c 	.word	0x2000b71c
 8008788:	2000b6d4 	.word	0x2000b6d4
 800878c:	2000b77c 	.word	0x2000b77c
 8008790:	2000b794 	.word	0x2000b794
 8008794:	40000400 	.word	0x40000400
 8008798:	2000b7ac 	.word	0x2000b7ac
 800879c:	40000800 	.word	0x40000800
 80087a0:	2000b7c4 	.word	0x2000b7c4
 80087a4:	40000c00 	.word	0x40000c00
 80087a8:	40001000 	.word	0x40001000
 80087ac:	2000b74c 	.word	0x2000b74c
 80087b0:	40002000 	.word	0x40002000

080087b4 <USART1_IRQHandler>:
}

#if defined(USART1)
usart usart_1(USART1);
usart_t usart1 = &usart_1;
void USART1_IRQHandler(void){
 80087b4:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 80087b6:	4c3c      	ldr	r4, [pc, #240]	; (80088a8 <USART1_IRQHandler+0xf4>)
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80087be:	0690      	lsls	r0, r2, #26
void USART1_IRQHandler(void){
 80087c0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80087c2:	d51a      	bpl.n	80087fa <USART1_IRQHandler+0x46>
 80087c4:	068d      	lsls	r5, r1, #26
 80087c6:	d518      	bpl.n	80087fa <USART1_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80087cc:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80087ce:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80087d0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80087d2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80087d4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80087d8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80087da:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80087dc:	d93a      	bls.n	8008854 <USART1_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80087de:	6962      	ldr	r2, [r4, #20]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80087e4:	7f63      	ldrb	r3, [r4, #29]
 80087e6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80087e8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80087ea:	d04c      	beq.n	8008886 <USART1_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80087ec:	2002      	movs	r0, #2
		usart -> rxcount++;
 80087ee:	3301      	adds	r3, #1
 80087f0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	b95b      	cbnz	r3, 800880e <USART1_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_1);
}
 80087f6:	b005      	add	sp, #20
 80087f8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80087fa:	0650      	lsls	r0, r2, #25
 80087fc:	d501      	bpl.n	8008802 <USART1_IRQHandler+0x4e>
 80087fe:	064d      	lsls	r5, r1, #25
 8008800:	d41d      	bmi.n	800883e <USART1_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008802:	06d0      	lsls	r0, r2, #27
 8008804:	d408      	bmi.n	8008818 <USART1_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008806:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0f3      	beq.n	80087f6 <USART1_IRQHandler+0x42>
 800880e:	68e1      	ldr	r1, [r4, #12]
}
 8008810:	b005      	add	sp, #20
 8008812:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008816:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008818:	06ca      	lsls	r2, r1, #27
 800881a:	d5f4      	bpl.n	8008806 <USART1_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008820:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008822:	6859      	ldr	r1, [r3, #4]
 8008824:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008826:	2a02      	cmp	r2, #2
		(void)tmp;
 8008828:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800882a:	d1ec      	bne.n	8008806 <USART1_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008832:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	065b      	lsls	r3, r3, #25
 8008838:	d40e      	bmi.n	8008858 <USART1_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800883a:	2004      	movs	r0, #4
 800883c:	e7e4      	b.n	8008808 <USART1_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008846:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800884e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008850:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008852:	e7d9      	b.n	8008808 <USART1_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008854:	2003      	movs	r0, #3
 8008856:	e7d7      	b.n	8008808 <USART1_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008858:	68a0      	ldr	r0, [r4, #8]
 800885a:	8b25      	ldrh	r5, [r4, #24]
 800885c:	f7fd fd74 	bl	8006348 <_ZN3dma11get_counterEv>
 8008860:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008862:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008864:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008866:	f7fd fd75 	bl	8006354 <_ZN3dma10get_configEv>
 800886a:	7983      	ldrb	r3, [r0, #6]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d0e4      	beq.n	800883a <USART1_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008870:	a802      	add	r0, sp, #8
 8008872:	68a1      	ldr	r1, [r4, #8]
 8008874:	f7fd fd0a 	bl	800628c <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008878:	6822      	ldr	r2, [r4, #0]
 800887a:	6953      	ldr	r3, [r2, #20]
 800887c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008880:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008882:	6153      	str	r3, [r2, #20]
 8008884:	e7c0      	b.n	8008808 <USART1_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008886:	6961      	ldr	r1, [r4, #20]
 8008888:	7f22      	ldrb	r2, [r4, #28]
 800888a:	5cc9      	ldrb	r1, [r1, r3]
 800888c:	4291      	cmp	r1, r2
 800888e:	d1ad      	bne.n	80087ec <USART1_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008890:	6822      	ldr	r2, [r4, #0]
 8008892:	68d1      	ldr	r1, [r2, #12]
 8008894:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008898:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800889a:	6951      	ldr	r1, [r2, #20]
 800889c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 80088a0:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80088a2:	6151      	str	r1, [r2, #20]
 80088a4:	e7a3      	b.n	80087ee <USART1_IRQHandler+0x3a>
 80088a6:	bf00      	nop
 80088a8:	2000b8c4 	.word	0x2000b8c4

080088ac <USART2_IRQHandler>:
#endif /* defined(USART1) */
#if defined(USART2)
usart usart_2(USART2);
usart_t usart2 = &usart_2;
void USART2_IRQHandler(void){
 80088ac:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 80088ae:	4c3c      	ldr	r4, [pc, #240]	; (80089a0 <USART2_IRQHandler+0xf4>)
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80088b6:	0690      	lsls	r0, r2, #26
void USART2_IRQHandler(void){
 80088b8:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80088ba:	d51a      	bpl.n	80088f2 <USART2_IRQHandler+0x46>
 80088bc:	068d      	lsls	r5, r1, #26
 80088be:	d518      	bpl.n	80088f2 <USART2_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80088c4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80088c6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80088c8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80088ca:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80088cc:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80088d0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80088d2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80088d4:	d93a      	bls.n	800894c <USART2_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80088d6:	6962      	ldr	r2, [r4, #20]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80088dc:	7f63      	ldrb	r3, [r4, #29]
 80088de:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80088e0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80088e2:	d04c      	beq.n	800897e <USART2_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80088e4:	2002      	movs	r0, #2
		usart -> rxcount++;
 80088e6:	3301      	adds	r3, #1
 80088e8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	b95b      	cbnz	r3, 8008906 <USART2_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_2);
}
 80088ee:	b005      	add	sp, #20
 80088f0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80088f2:	0650      	lsls	r0, r2, #25
 80088f4:	d501      	bpl.n	80088fa <USART2_IRQHandler+0x4e>
 80088f6:	064d      	lsls	r5, r1, #25
 80088f8:	d41d      	bmi.n	8008936 <USART2_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80088fa:	06d0      	lsls	r0, r2, #27
 80088fc:	d408      	bmi.n	8008910 <USART2_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80088fe:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0f3      	beq.n	80088ee <USART2_IRQHandler+0x42>
 8008906:	68e1      	ldr	r1, [r4, #12]
}
 8008908:	b005      	add	sp, #20
 800890a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800890e:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008910:	06ca      	lsls	r2, r1, #27
 8008912:	d5f4      	bpl.n	80088fe <USART2_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008918:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800891a:	6859      	ldr	r1, [r3, #4]
 800891c:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800891e:	2a02      	cmp	r2, #2
		(void)tmp;
 8008920:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008922:	d1ec      	bne.n	80088fe <USART2_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800892a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	065b      	lsls	r3, r3, #25
 8008930:	d40e      	bmi.n	8008950 <USART2_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008932:	2004      	movs	r0, #4
 8008934:	e7e4      	b.n	8008900 <USART2_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800893e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008946:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008948:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800894a:	e7d9      	b.n	8008900 <USART2_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800894c:	2003      	movs	r0, #3
 800894e:	e7d7      	b.n	8008900 <USART2_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008950:	68a0      	ldr	r0, [r4, #8]
 8008952:	8b25      	ldrh	r5, [r4, #24]
 8008954:	f7fd fcf8 	bl	8006348 <_ZN3dma11get_counterEv>
 8008958:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800895a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800895c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800895e:	f7fd fcf9 	bl	8006354 <_ZN3dma10get_configEv>
 8008962:	7983      	ldrb	r3, [r0, #6]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d0e4      	beq.n	8008932 <USART2_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008968:	a802      	add	r0, sp, #8
 800896a:	68a1      	ldr	r1, [r4, #8]
 800896c:	f7fd fc8e 	bl	800628c <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008970:	6822      	ldr	r2, [r4, #0]
 8008972:	6953      	ldr	r3, [r2, #20]
 8008974:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008978:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800897a:	6153      	str	r3, [r2, #20]
 800897c:	e7c0      	b.n	8008900 <USART2_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800897e:	6961      	ldr	r1, [r4, #20]
 8008980:	7f22      	ldrb	r2, [r4, #28]
 8008982:	5cc9      	ldrb	r1, [r1, r3]
 8008984:	4291      	cmp	r1, r2
 8008986:	d1ad      	bne.n	80088e4 <USART2_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008988:	6822      	ldr	r2, [r4, #0]
 800898a:	68d1      	ldr	r1, [r2, #12]
 800898c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008990:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008992:	6951      	ldr	r1, [r2, #20]
 8008994:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008998:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800899a:	6151      	str	r1, [r2, #20]
 800899c:	e7a3      	b.n	80088e6 <USART2_IRQHandler+0x3a>
 800899e:	bf00      	nop
 80089a0:	2000b8ec 	.word	0x2000b8ec

080089a4 <USART3_IRQHandler>:
#endif /* defined(USART2) */
#if defined(USART3)
usart usart_3(USART3);
usart_t usart3 = &usart_3;
void USART3_IRQHandler(void){
 80089a4:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 80089a6:	4c3c      	ldr	r4, [pc, #240]	; (8008a98 <USART3_IRQHandler+0xf4>)
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80089ae:	0690      	lsls	r0, r2, #26
void USART3_IRQHandler(void){
 80089b0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80089b2:	d51a      	bpl.n	80089ea <USART3_IRQHandler+0x46>
 80089b4:	068d      	lsls	r5, r1, #26
 80089b6:	d518      	bpl.n	80089ea <USART3_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80089bc:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80089be:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80089c0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80089c2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80089c4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80089c8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80089ca:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80089cc:	d93a      	bls.n	8008a44 <USART3_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80089ce:	6962      	ldr	r2, [r4, #20]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80089d4:	7f63      	ldrb	r3, [r4, #29]
 80089d6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80089d8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80089da:	d04c      	beq.n	8008a76 <USART3_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80089dc:	2002      	movs	r0, #2
		usart -> rxcount++;
 80089de:	3301      	adds	r3, #1
 80089e0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	b95b      	cbnz	r3, 80089fe <USART3_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_3);
}
 80089e6:	b005      	add	sp, #20
 80089e8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80089ea:	0650      	lsls	r0, r2, #25
 80089ec:	d501      	bpl.n	80089f2 <USART3_IRQHandler+0x4e>
 80089ee:	064d      	lsls	r5, r1, #25
 80089f0:	d41d      	bmi.n	8008a2e <USART3_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80089f2:	06d0      	lsls	r0, r2, #27
 80089f4:	d408      	bmi.n	8008a08 <USART3_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80089f6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80089f8:	6923      	ldr	r3, [r4, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0f3      	beq.n	80089e6 <USART3_IRQHandler+0x42>
 80089fe:	68e1      	ldr	r1, [r4, #12]
}
 8008a00:	b005      	add	sp, #20
 8008a02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008a06:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008a08:	06ca      	lsls	r2, r1, #27
 8008a0a:	d5f4      	bpl.n	80089f6 <USART3_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008a10:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008a12:	6859      	ldr	r1, [r3, #4]
 8008a14:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008a16:	2a02      	cmp	r2, #2
		(void)tmp;
 8008a18:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008a1a:	d1ec      	bne.n	80089f6 <USART3_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008a22:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	065b      	lsls	r3, r3, #25
 8008a28:	d40e      	bmi.n	8008a48 <USART3_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008a2a:	2004      	movs	r0, #4
 8008a2c:	e7e4      	b.n	80089f8 <USART3_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008a36:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008a3e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008a40:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008a42:	e7d9      	b.n	80089f8 <USART3_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008a44:	2003      	movs	r0, #3
 8008a46:	e7d7      	b.n	80089f8 <USART3_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008a48:	68a0      	ldr	r0, [r4, #8]
 8008a4a:	8b25      	ldrh	r5, [r4, #24]
 8008a4c:	f7fd fc7c 	bl	8006348 <_ZN3dma11get_counterEv>
 8008a50:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008a52:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008a54:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008a56:	f7fd fc7d 	bl	8006354 <_ZN3dma10get_configEv>
 8008a5a:	7983      	ldrb	r3, [r0, #6]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d0e4      	beq.n	8008a2a <USART3_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008a60:	a802      	add	r0, sp, #8
 8008a62:	68a1      	ldr	r1, [r4, #8]
 8008a64:	f7fd fc12 	bl	800628c <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008a68:	6822      	ldr	r2, [r4, #0]
 8008a6a:	6953      	ldr	r3, [r2, #20]
 8008a6c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008a70:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008a72:	6153      	str	r3, [r2, #20]
 8008a74:	e7c0      	b.n	80089f8 <USART3_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008a76:	6961      	ldr	r1, [r4, #20]
 8008a78:	7f22      	ldrb	r2, [r4, #28]
 8008a7a:	5cc9      	ldrb	r1, [r1, r3]
 8008a7c:	4291      	cmp	r1, r2
 8008a7e:	d1ad      	bne.n	80089dc <USART3_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008a80:	6822      	ldr	r2, [r4, #0]
 8008a82:	68d1      	ldr	r1, [r2, #12]
 8008a84:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008a88:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008a8a:	6951      	ldr	r1, [r2, #20]
 8008a8c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008a90:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008a92:	6151      	str	r1, [r2, #20]
 8008a94:	e7a3      	b.n	80089de <USART3_IRQHandler+0x3a>
 8008a96:	bf00      	nop
 8008a98:	2000b914 	.word	0x2000b914

08008a9c <UART4_IRQHandler>:
#endif /* defined(USART3) */
#if defined(UART4)
usart uart_4 (UART4);
usart_t uart4 = &uart_4;
void UART4_IRQHandler(void){
 8008a9c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008a9e:	4c3c      	ldr	r4, [pc, #240]	; (8008b90 <UART4_IRQHandler+0xf4>)
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008aa6:	0690      	lsls	r0, r2, #26
void UART4_IRQHandler(void){
 8008aa8:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008aaa:	d51a      	bpl.n	8008ae2 <UART4_IRQHandler+0x46>
 8008aac:	068d      	lsls	r5, r1, #26
 8008aae:	d518      	bpl.n	8008ae2 <UART4_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008ab4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008ab6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008ab8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008aba:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008abc:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008ac0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008ac2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008ac4:	d93a      	bls.n	8008b3c <UART4_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008ac6:	6962      	ldr	r2, [r4, #20]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008acc:	7f63      	ldrb	r3, [r4, #29]
 8008ace:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008ad0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008ad2:	d04c      	beq.n	8008b6e <UART4_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008ad4:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	b95b      	cbnz	r3, 8008af6 <UART4_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_4);
}
 8008ade:	b005      	add	sp, #20
 8008ae0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008ae2:	0650      	lsls	r0, r2, #25
 8008ae4:	d501      	bpl.n	8008aea <UART4_IRQHandler+0x4e>
 8008ae6:	064d      	lsls	r5, r1, #25
 8008ae8:	d41d      	bmi.n	8008b26 <UART4_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008aea:	06d0      	lsls	r0, r2, #27
 8008aec:	d408      	bmi.n	8008b00 <UART4_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008aee:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0f3      	beq.n	8008ade <UART4_IRQHandler+0x42>
 8008af6:	68e1      	ldr	r1, [r4, #12]
}
 8008af8:	b005      	add	sp, #20
 8008afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008afe:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008b00:	06ca      	lsls	r2, r1, #27
 8008b02:	d5f4      	bpl.n	8008aee <UART4_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008b08:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008b0a:	6859      	ldr	r1, [r3, #4]
 8008b0c:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008b0e:	2a02      	cmp	r2, #2
		(void)tmp;
 8008b10:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008b12:	d1ec      	bne.n	8008aee <UART4_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008b1a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	065b      	lsls	r3, r3, #25
 8008b20:	d40e      	bmi.n	8008b40 <UART4_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008b22:	2004      	movs	r0, #4
 8008b24:	e7e4      	b.n	8008af0 <UART4_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008b2e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008b36:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008b38:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008b3a:	e7d9      	b.n	8008af0 <UART4_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008b3c:	2003      	movs	r0, #3
 8008b3e:	e7d7      	b.n	8008af0 <UART4_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008b40:	68a0      	ldr	r0, [r4, #8]
 8008b42:	8b25      	ldrh	r5, [r4, #24]
 8008b44:	f7fd fc00 	bl	8006348 <_ZN3dma11get_counterEv>
 8008b48:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008b4a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008b4c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008b4e:	f7fd fc01 	bl	8006354 <_ZN3dma10get_configEv>
 8008b52:	7983      	ldrb	r3, [r0, #6]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d0e4      	beq.n	8008b22 <UART4_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008b58:	a802      	add	r0, sp, #8
 8008b5a:	68a1      	ldr	r1, [r4, #8]
 8008b5c:	f7fd fb96 	bl	800628c <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008b60:	6822      	ldr	r2, [r4, #0]
 8008b62:	6953      	ldr	r3, [r2, #20]
 8008b64:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008b68:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008b6a:	6153      	str	r3, [r2, #20]
 8008b6c:	e7c0      	b.n	8008af0 <UART4_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008b6e:	6961      	ldr	r1, [r4, #20]
 8008b70:	7f22      	ldrb	r2, [r4, #28]
 8008b72:	5cc9      	ldrb	r1, [r1, r3]
 8008b74:	4291      	cmp	r1, r2
 8008b76:	d1ad      	bne.n	8008ad4 <UART4_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008b78:	6822      	ldr	r2, [r4, #0]
 8008b7a:	68d1      	ldr	r1, [r2, #12]
 8008b7c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008b80:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008b82:	6951      	ldr	r1, [r2, #20]
 8008b84:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008b88:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008b8a:	6151      	str	r1, [r2, #20]
 8008b8c:	e7a3      	b.n	8008ad6 <UART4_IRQHandler+0x3a>
 8008b8e:	bf00      	nop
 8008b90:	2000b824 	.word	0x2000b824

08008b94 <UART5_IRQHandler>:
#endif /* defined(UART4) */
#if defined(UART5)
usart uart_5 (UART5);
usart_t uart5 = &uart_5;
void UART5_IRQHandler(void){
 8008b94:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008b96:	4c3c      	ldr	r4, [pc, #240]	; (8008c88 <UART5_IRQHandler+0xf4>)
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008b9e:	0690      	lsls	r0, r2, #26
void UART5_IRQHandler(void){
 8008ba0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008ba2:	d51a      	bpl.n	8008bda <UART5_IRQHandler+0x46>
 8008ba4:	068d      	lsls	r5, r1, #26
 8008ba6:	d518      	bpl.n	8008bda <UART5_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008bac:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008bae:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008bb0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008bb2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008bb4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008bb8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008bba:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008bbc:	d93a      	bls.n	8008c34 <UART5_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008bbe:	6962      	ldr	r2, [r4, #20]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008bc4:	7f63      	ldrb	r3, [r4, #29]
 8008bc6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008bc8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008bca:	d04c      	beq.n	8008c66 <UART5_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008bcc:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008bce:	3301      	adds	r3, #1
 8008bd0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	b95b      	cbnz	r3, 8008bee <UART5_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_5);
}
 8008bd6:	b005      	add	sp, #20
 8008bd8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008bda:	0650      	lsls	r0, r2, #25
 8008bdc:	d501      	bpl.n	8008be2 <UART5_IRQHandler+0x4e>
 8008bde:	064d      	lsls	r5, r1, #25
 8008be0:	d41d      	bmi.n	8008c1e <UART5_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008be2:	06d0      	lsls	r0, r2, #27
 8008be4:	d408      	bmi.n	8008bf8 <UART5_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008be6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0f3      	beq.n	8008bd6 <UART5_IRQHandler+0x42>
 8008bee:	68e1      	ldr	r1, [r4, #12]
}
 8008bf0:	b005      	add	sp, #20
 8008bf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008bf6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008bf8:	06ca      	lsls	r2, r1, #27
 8008bfa:	d5f4      	bpl.n	8008be6 <UART5_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008c00:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008c02:	6859      	ldr	r1, [r3, #4]
 8008c04:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008c06:	2a02      	cmp	r2, #2
		(void)tmp;
 8008c08:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008c0a:	d1ec      	bne.n	8008be6 <UART5_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008c12:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	065b      	lsls	r3, r3, #25
 8008c18:	d40e      	bmi.n	8008c38 <UART5_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008c1a:	2004      	movs	r0, #4
 8008c1c:	e7e4      	b.n	8008be8 <UART5_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008c26:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008c2e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008c30:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008c32:	e7d9      	b.n	8008be8 <UART5_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008c34:	2003      	movs	r0, #3
 8008c36:	e7d7      	b.n	8008be8 <UART5_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008c38:	68a0      	ldr	r0, [r4, #8]
 8008c3a:	8b25      	ldrh	r5, [r4, #24]
 8008c3c:	f7fd fb84 	bl	8006348 <_ZN3dma11get_counterEv>
 8008c40:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008c42:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008c44:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008c46:	f7fd fb85 	bl	8006354 <_ZN3dma10get_configEv>
 8008c4a:	7983      	ldrb	r3, [r0, #6]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d0e4      	beq.n	8008c1a <UART5_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008c50:	a802      	add	r0, sp, #8
 8008c52:	68a1      	ldr	r1, [r4, #8]
 8008c54:	f7fd fb1a 	bl	800628c <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	6953      	ldr	r3, [r2, #20]
 8008c5c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008c60:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008c62:	6153      	str	r3, [r2, #20]
 8008c64:	e7c0      	b.n	8008be8 <UART5_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008c66:	6961      	ldr	r1, [r4, #20]
 8008c68:	7f22      	ldrb	r2, [r4, #28]
 8008c6a:	5cc9      	ldrb	r1, [r1, r3]
 8008c6c:	4291      	cmp	r1, r2
 8008c6e:	d1ad      	bne.n	8008bcc <UART5_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008c70:	6822      	ldr	r2, [r4, #0]
 8008c72:	68d1      	ldr	r1, [r2, #12]
 8008c74:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008c78:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008c7a:	6951      	ldr	r1, [r2, #20]
 8008c7c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008c80:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008c82:	6151      	str	r1, [r2, #20]
 8008c84:	e7a3      	b.n	8008bce <UART5_IRQHandler+0x3a>
 8008c86:	bf00      	nop
 8008c88:	2000b84c 	.word	0x2000b84c

08008c8c <USART6_IRQHandler>:
#endif /* defined(UART5) */
#if defined(USART6)
usart usart_6(USART6);
usart_t usart6 = &usart_6;
void USART6_IRQHandler(void){
 8008c8c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008c8e:	4c3c      	ldr	r4, [pc, #240]	; (8008d80 <USART6_IRQHandler+0xf4>)
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008c96:	0690      	lsls	r0, r2, #26
void USART6_IRQHandler(void){
 8008c98:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008c9a:	d51a      	bpl.n	8008cd2 <USART6_IRQHandler+0x46>
 8008c9c:	068d      	lsls	r5, r1, #26
 8008c9e:	d518      	bpl.n	8008cd2 <USART6_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008ca4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008ca6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008ca8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008caa:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008cac:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008cb0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008cb2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008cb4:	d93a      	bls.n	8008d2c <USART6_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008cb6:	6962      	ldr	r2, [r4, #20]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008cbc:	7f63      	ldrb	r3, [r4, #29]
 8008cbe:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008cc0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008cc2:	d04c      	beq.n	8008d5e <USART6_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008cc4:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008cca:	6923      	ldr	r3, [r4, #16]
 8008ccc:	b95b      	cbnz	r3, 8008ce6 <USART6_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_6);
}
 8008cce:	b005      	add	sp, #20
 8008cd0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008cd2:	0650      	lsls	r0, r2, #25
 8008cd4:	d501      	bpl.n	8008cda <USART6_IRQHandler+0x4e>
 8008cd6:	064d      	lsls	r5, r1, #25
 8008cd8:	d41d      	bmi.n	8008d16 <USART6_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008cda:	06d0      	lsls	r0, r2, #27
 8008cdc:	d408      	bmi.n	8008cf0 <USART6_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008cde:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0f3      	beq.n	8008cce <USART6_IRQHandler+0x42>
 8008ce6:	68e1      	ldr	r1, [r4, #12]
}
 8008ce8:	b005      	add	sp, #20
 8008cea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008cee:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008cf0:	06ca      	lsls	r2, r1, #27
 8008cf2:	d5f4      	bpl.n	8008cde <USART6_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008cf8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008cfa:	6859      	ldr	r1, [r3, #4]
 8008cfc:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008cfe:	2a02      	cmp	r2, #2
		(void)tmp;
 8008d00:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008d02:	d1ec      	bne.n	8008cde <USART6_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008d0a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	065b      	lsls	r3, r3, #25
 8008d10:	d40e      	bmi.n	8008d30 <USART6_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008d12:	2004      	movs	r0, #4
 8008d14:	e7e4      	b.n	8008ce0 <USART6_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008d1e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008d26:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008d28:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008d2a:	e7d9      	b.n	8008ce0 <USART6_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008d2c:	2003      	movs	r0, #3
 8008d2e:	e7d7      	b.n	8008ce0 <USART6_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008d30:	68a0      	ldr	r0, [r4, #8]
 8008d32:	8b25      	ldrh	r5, [r4, #24]
 8008d34:	f7fd fb08 	bl	8006348 <_ZN3dma11get_counterEv>
 8008d38:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008d3a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008d3c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008d3e:	f7fd fb09 	bl	8006354 <_ZN3dma10get_configEv>
 8008d42:	7983      	ldrb	r3, [r0, #6]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d0e4      	beq.n	8008d12 <USART6_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008d48:	a802      	add	r0, sp, #8
 8008d4a:	68a1      	ldr	r1, [r4, #8]
 8008d4c:	f7fd fa9e 	bl	800628c <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	6953      	ldr	r3, [r2, #20]
 8008d54:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008d58:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008d5a:	6153      	str	r3, [r2, #20]
 8008d5c:	e7c0      	b.n	8008ce0 <USART6_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008d5e:	6961      	ldr	r1, [r4, #20]
 8008d60:	7f22      	ldrb	r2, [r4, #28]
 8008d62:	5cc9      	ldrb	r1, [r1, r3]
 8008d64:	4291      	cmp	r1, r2
 8008d66:	d1ad      	bne.n	8008cc4 <USART6_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008d68:	6822      	ldr	r2, [r4, #0]
 8008d6a:	68d1      	ldr	r1, [r2, #12]
 8008d6c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008d70:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008d72:	6951      	ldr	r1, [r2, #20]
 8008d74:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008d78:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008d7a:	6151      	str	r1, [r2, #20]
 8008d7c:	e7a3      	b.n	8008cc6 <USART6_IRQHandler+0x3a>
 8008d7e:	bf00      	nop
 8008d80:	2000b93c 	.word	0x2000b93c

08008d84 <UART7_IRQHandler>:
#endif /* defined(USART6) */
#if defined(UART7)
usart uart_7 (UART7);
usart_t uart7 = &uart_7;
void UART7_IRQHandler(void){
 8008d84:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008d86:	4c3c      	ldr	r4, [pc, #240]	; (8008e78 <UART7_IRQHandler+0xf4>)
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008d8e:	0690      	lsls	r0, r2, #26
void UART7_IRQHandler(void){
 8008d90:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008d92:	d51a      	bpl.n	8008dca <UART7_IRQHandler+0x46>
 8008d94:	068d      	lsls	r5, r1, #26
 8008d96:	d518      	bpl.n	8008dca <UART7_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008d9c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008d9e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008da0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008da2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008da4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008da8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008daa:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008dac:	d93a      	bls.n	8008e24 <UART7_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008dae:	6962      	ldr	r2, [r4, #20]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008db4:	7f63      	ldrb	r3, [r4, #29]
 8008db6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008db8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008dba:	d04c      	beq.n	8008e56 <UART7_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008dbc:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	b95b      	cbnz	r3, 8008dde <UART7_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_7);
}
 8008dc6:	b005      	add	sp, #20
 8008dc8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008dca:	0650      	lsls	r0, r2, #25
 8008dcc:	d501      	bpl.n	8008dd2 <UART7_IRQHandler+0x4e>
 8008dce:	064d      	lsls	r5, r1, #25
 8008dd0:	d41d      	bmi.n	8008e0e <UART7_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008dd2:	06d0      	lsls	r0, r2, #27
 8008dd4:	d408      	bmi.n	8008de8 <UART7_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008dd6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0f3      	beq.n	8008dc6 <UART7_IRQHandler+0x42>
 8008dde:	68e1      	ldr	r1, [r4, #12]
}
 8008de0:	b005      	add	sp, #20
 8008de2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008de6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008de8:	06ca      	lsls	r2, r1, #27
 8008dea:	d5f4      	bpl.n	8008dd6 <UART7_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008df0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008df2:	6859      	ldr	r1, [r3, #4]
 8008df4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008df6:	2a02      	cmp	r2, #2
		(void)tmp;
 8008df8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008dfa:	d1ec      	bne.n	8008dd6 <UART7_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008e02:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	065b      	lsls	r3, r3, #25
 8008e08:	d40e      	bmi.n	8008e28 <UART7_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008e0a:	2004      	movs	r0, #4
 8008e0c:	e7e4      	b.n	8008dd8 <UART7_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008e16:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008e1e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008e20:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008e22:	e7d9      	b.n	8008dd8 <UART7_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008e24:	2003      	movs	r0, #3
 8008e26:	e7d7      	b.n	8008dd8 <UART7_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008e28:	68a0      	ldr	r0, [r4, #8]
 8008e2a:	8b25      	ldrh	r5, [r4, #24]
 8008e2c:	f7fd fa8c 	bl	8006348 <_ZN3dma11get_counterEv>
 8008e30:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008e32:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008e34:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008e36:	f7fd fa8d 	bl	8006354 <_ZN3dma10get_configEv>
 8008e3a:	7983      	ldrb	r3, [r0, #6]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d0e4      	beq.n	8008e0a <UART7_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008e40:	a802      	add	r0, sp, #8
 8008e42:	68a1      	ldr	r1, [r4, #8]
 8008e44:	f7fd fa22 	bl	800628c <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008e48:	6822      	ldr	r2, [r4, #0]
 8008e4a:	6953      	ldr	r3, [r2, #20]
 8008e4c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008e50:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008e52:	6153      	str	r3, [r2, #20]
 8008e54:	e7c0      	b.n	8008dd8 <UART7_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008e56:	6961      	ldr	r1, [r4, #20]
 8008e58:	7f22      	ldrb	r2, [r4, #28]
 8008e5a:	5cc9      	ldrb	r1, [r1, r3]
 8008e5c:	4291      	cmp	r1, r2
 8008e5e:	d1ad      	bne.n	8008dbc <UART7_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008e60:	6822      	ldr	r2, [r4, #0]
 8008e62:	68d1      	ldr	r1, [r2, #12]
 8008e64:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008e68:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008e6a:	6951      	ldr	r1, [r2, #20]
 8008e6c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008e70:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008e72:	6151      	str	r1, [r2, #20]
 8008e74:	e7a3      	b.n	8008dbe <UART7_IRQHandler+0x3a>
 8008e76:	bf00      	nop
 8008e78:	2000b874 	.word	0x2000b874

08008e7c <UART8_IRQHandler>:
#endif /* defined(UART7) */
#if defined(UART8)
usart uart_8 (UART8);
usart_t uart8 = &uart_8;
void UART8_IRQHandler(void){
 8008e7c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008e7e:	4c3c      	ldr	r4, [pc, #240]	; (8008f70 <UART8_IRQHandler+0xf4>)
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008e86:	0690      	lsls	r0, r2, #26
void UART8_IRQHandler(void){
 8008e88:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008e8a:	d51a      	bpl.n	8008ec2 <UART8_IRQHandler+0x46>
 8008e8c:	068d      	lsls	r5, r1, #26
 8008e8e:	d518      	bpl.n	8008ec2 <UART8_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008e94:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008e96:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008e98:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008e9a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008e9c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008ea0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008ea2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008ea4:	d93a      	bls.n	8008f1c <UART8_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008ea6:	6962      	ldr	r2, [r4, #20]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008eac:	7f63      	ldrb	r3, [r4, #29]
 8008eae:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008eb0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008eb2:	d04c      	beq.n	8008f4e <UART8_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008eb4:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	b95b      	cbnz	r3, 8008ed6 <UART8_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_8);
}
 8008ebe:	b005      	add	sp, #20
 8008ec0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008ec2:	0650      	lsls	r0, r2, #25
 8008ec4:	d501      	bpl.n	8008eca <UART8_IRQHandler+0x4e>
 8008ec6:	064d      	lsls	r5, r1, #25
 8008ec8:	d41d      	bmi.n	8008f06 <UART8_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008eca:	06d0      	lsls	r0, r2, #27
 8008ecc:	d408      	bmi.n	8008ee0 <UART8_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008ece:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0f3      	beq.n	8008ebe <UART8_IRQHandler+0x42>
 8008ed6:	68e1      	ldr	r1, [r4, #12]
}
 8008ed8:	b005      	add	sp, #20
 8008eda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008ede:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008ee0:	06ca      	lsls	r2, r1, #27
 8008ee2:	d5f4      	bpl.n	8008ece <UART8_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008ee8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008eea:	6859      	ldr	r1, [r3, #4]
 8008eec:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008eee:	2a02      	cmp	r2, #2
		(void)tmp;
 8008ef0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008ef2:	d1ec      	bne.n	8008ece <UART8_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008efa:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	065b      	lsls	r3, r3, #25
 8008f00:	d40e      	bmi.n	8008f20 <UART8_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008f02:	2004      	movs	r0, #4
 8008f04:	e7e4      	b.n	8008ed0 <UART8_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008f0e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008f16:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008f18:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008f1a:	e7d9      	b.n	8008ed0 <UART8_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008f1c:	2003      	movs	r0, #3
 8008f1e:	e7d7      	b.n	8008ed0 <UART8_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008f20:	68a0      	ldr	r0, [r4, #8]
 8008f22:	8b25      	ldrh	r5, [r4, #24]
 8008f24:	f7fd fa10 	bl	8006348 <_ZN3dma11get_counterEv>
 8008f28:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008f2a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008f2c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008f2e:	f7fd fa11 	bl	8006354 <_ZN3dma10get_configEv>
 8008f32:	7983      	ldrb	r3, [r0, #6]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d0e4      	beq.n	8008f02 <UART8_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008f38:	a802      	add	r0, sp, #8
 8008f3a:	68a1      	ldr	r1, [r4, #8]
 8008f3c:	f7fd f9a6 	bl	800628c <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008f40:	6822      	ldr	r2, [r4, #0]
 8008f42:	6953      	ldr	r3, [r2, #20]
 8008f44:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008f48:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008f4a:	6153      	str	r3, [r2, #20]
 8008f4c:	e7c0      	b.n	8008ed0 <UART8_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008f4e:	6961      	ldr	r1, [r4, #20]
 8008f50:	7f22      	ldrb	r2, [r4, #28]
 8008f52:	5cc9      	ldrb	r1, [r1, r3]
 8008f54:	4291      	cmp	r1, r2
 8008f56:	d1ad      	bne.n	8008eb4 <UART8_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008f58:	6822      	ldr	r2, [r4, #0]
 8008f5a:	68d1      	ldr	r1, [r2, #12]
 8008f5c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008f60:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008f62:	6951      	ldr	r1, [r2, #20]
 8008f64:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008f68:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008f6a:	6151      	str	r1, [r2, #20]
 8008f6c:	e7a3      	b.n	8008eb6 <UART8_IRQHandler+0x3a>
 8008f6e:	bf00      	nop
 8008f70:	2000b89c 	.word	0x2000b89c

08008f74 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef>:
usart::usart(USART_TypeDef *usart){
 8008f74:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800905c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe8>
 8008f78:	482d      	ldr	r0, [pc, #180]	; (8009030 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xbc>)
 8008f7a:	492e      	ldr	r1, [pc, #184]	; (8009034 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc0>)
 8008f7c:	4a2e      	ldr	r2, [pc, #184]	; (8009038 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc4>)
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	b5f0      	push	{r4, r5, r6, r7, lr}
usart::usart(USART_TypeDef *usart){
 8008f82:	4f2e      	ldr	r7, [pc, #184]	; (800903c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc8>)
	_usart = usart;
 8008f84:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8009060 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xec>
usart::usart(USART_TypeDef *usart){
 8008f88:	4e2d      	ldr	r6, [pc, #180]	; (8009040 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xcc>)
 8008f8a:	f8cc 3014 	str.w	r3, [ip, #20]
 8008f8e:	e9cc 3301 	strd	r3, r3, [ip, #4]
 8008f92:	e9cc 3303 	strd	r3, r3, [ip, #12]
 8008f96:	f8ac 301c 	strh.w	r3, [ip, #28]
 8008f9a:	f8cc 3020 	str.w	r3, [ip, #32]
	_usart = usart;
 8008f9e:	f8cc e000 	str.w	lr, [ip]
 8008fa2:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009064 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xf0>
usart::usart(USART_TypeDef *usart){
 8008fa6:	4c27      	ldr	r4, [pc, #156]	; (8009044 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd0>)
 8008fa8:	4d27      	ldr	r5, [pc, #156]	; (8009048 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd4>)
 8008faa:	617b      	str	r3, [r7, #20]
 8008fac:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8008fb0:	e9c7 3303 	strd	r3, r3, [r7, #12]
 8008fb4:	83bb      	strh	r3, [r7, #28]
 8008fb6:	623b      	str	r3, [r7, #32]
	_usart = usart;
 8008fb8:	f8c7 c000 	str.w	ip, [r7]
 8008fbc:	4f23      	ldr	r7, [pc, #140]	; (800904c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd8>)
usart::usart(USART_TypeDef *usart){
 8008fbe:	6173      	str	r3, [r6, #20]
 8008fc0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8008fc4:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8008fc8:	83b3      	strh	r3, [r6, #28]
 8008fca:	6233      	str	r3, [r6, #32]
	_usart = usart;
 8008fcc:	6037      	str	r7, [r6, #0]
 8008fce:	4e20      	ldr	r6, [pc, #128]	; (8009050 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xdc>)
usart::usart(USART_TypeDef *usart){
 8008fd0:	616b      	str	r3, [r5, #20]
 8008fd2:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8008fd6:	e9c5 3303 	strd	r3, r3, [r5, #12]
 8008fda:	83ab      	strh	r3, [r5, #28]
 8008fdc:	622b      	str	r3, [r5, #32]
	_usart = usart;
 8008fde:	602e      	str	r6, [r5, #0]
usart::usart(USART_TypeDef *usart){
 8008fe0:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8008fe4:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008fe8:	6163      	str	r3, [r4, #20]
 8008fea:	83a3      	strh	r3, [r4, #28]
 8008fec:	6223      	str	r3, [r4, #32]
 8008fee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8008ff2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ff6:	e9c1 3301 	strd	r3, r3, [r1, #4]
 8008ffa:	e9c1 3303 	strd	r3, r3, [r1, #12]
 8008ffe:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8009002:	e9c2 3303 	strd	r3, r3, [r2, #12]
 8009006:	6143      	str	r3, [r0, #20]
 8009008:	8383      	strh	r3, [r0, #28]
 800900a:	6203      	str	r3, [r0, #32]
 800900c:	614b      	str	r3, [r1, #20]
 800900e:	838b      	strh	r3, [r1, #28]
 8009010:	620b      	str	r3, [r1, #32]
 8009012:	6153      	str	r3, [r2, #20]
 8009014:	8393      	strh	r3, [r2, #28]
 8009016:	6213      	str	r3, [r2, #32]
	_usart = usart;
 8009018:	4b0e      	ldr	r3, [pc, #56]	; (8009054 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe0>)
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8009020:	4c0d      	ldr	r4, [pc, #52]	; (8009058 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe4>)
 8009022:	6003      	str	r3, [r0, #0]
 8009024:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8009028:	600c      	str	r4, [r1, #0]
 800902a:	6013      	str	r3, [r2, #0]
}
 800902c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800902e:	bf00      	nop
 8009030:	2000b84c 	.word	0x2000b84c
 8009034:	2000b93c 	.word	0x2000b93c
 8009038:	2000b874 	.word	0x2000b874
 800903c:	2000b8ec 	.word	0x2000b8ec
 8009040:	2000b914 	.word	0x2000b914
 8009044:	2000b89c 	.word	0x2000b89c
 8009048:	2000b824 	.word	0x2000b824
 800904c:	40004800 	.word	0x40004800
 8009050:	40004c00 	.word	0x40004c00
 8009054:	40007c00 	.word	0x40007c00
 8009058:	40011400 	.word	0x40011400
 800905c:	2000b8c4 	.word	0x2000b8c4
 8009060:	40011000 	.word	0x40011000
 8009064:	40004400 	.word	0x40004400

08009068 <__NVIC_SystemReset>:
 8009068:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800906c:	4905      	ldr	r1, [pc, #20]	; (8009084 <__NVIC_SystemReset+0x1c>)
 800906e:	4b06      	ldr	r3, [pc, #24]	; (8009088 <__NVIC_SystemReset+0x20>)
 8009070:	68ca      	ldr	r2, [r1, #12]
 8009072:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009076:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009078:	60cb      	str	r3, [r1, #12]
 800907a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800907e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009080:	e7fd      	b.n	800907e <__NVIC_SystemReset+0x16>
 8009082:	bf00      	nop
 8009084:	e000ed00 	.word	0xe000ed00
 8009088:	05fa0004 	.word	0x05fa0004

0800908c <app_main_task>:

	return (int)app_start_status;
}


void app_main_task(void *param){
 800908c:	b508      	push	{r3, lr}
	LOG_INFO(TAG, "Calling app_main().");
 800908e:	4807      	ldr	r0, [pc, #28]	; (80090ac <app_main_task+0x20>)
 8009090:	4907      	ldr	r1, [pc, #28]	; (80090b0 <app_main_task+0x24>)
 8009092:	f000 f9af 	bl	80093f4 <LOG_INFO>
	extern void app_main(void);
	app_main();
 8009096:	f000 fd11 	bl	8009abc <_Z8app_mainv>
	LOG_INFO(TAG, "Returned from app_main().");
 800909a:	4804      	ldr	r0, [pc, #16]	; (80090ac <app_main_task+0x20>)
 800909c:	4905      	ldr	r1, [pc, #20]	; (80090b4 <app_main_task+0x28>)
 800909e:	f000 f9a9 	bl	80093f4 <LOG_INFO>
	vTaskDelete(NULL);
}
 80090a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskDelete(NULL);
 80090a6:	2000      	movs	r0, #0
 80090a8:	f7fa b92e 	b.w	8003308 <vTaskDelete>
 80090ac:	0800d7e8 	.word	0x0800d7e8
 80090b0:	0800d7d4 	.word	0x0800d7d4
 80090b4:	0800d7f0 	.word	0x0800d7f0

080090b8 <uart_log>:
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);

	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
}

static void uart_log(char *log){
 80090b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ba:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80090bc:	2100      	movs	r1, #0
static void uart_log(char *log){
 80090be:	4606      	mov	r6, r0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80090c0:	9101      	str	r1, [sp, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090c2:	f3ef 8405 	mrs	r4, IPSR
	BaseType_t ret, in_it = xPortIsInsideInterrupt();
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 80090c6:	4d19      	ldr	r5, [pc, #100]	; (800912c <uart_log+0x74>)
	if( ulCurrentInterrupt == 0 )
 80090c8:	b93c      	cbnz	r4, 80090da <uart_log+0x22>
 80090ca:	6828      	ldr	r0, [r5, #0]
 80090cc:	210a      	movs	r1, #10
 80090ce:	f7f9 fccd 	bl	8002a6c <xQueueSemaphoreTake>

	if(ret == pdTRUE){
 80090d2:	2801      	cmp	r0, #1
 80090d4:	d01f      	beq.n	8009116 <uart_log+0x5e>
			while(!(log_uart -> SR & USART_SR_TC));
		}

		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
	}
}
 80090d6:	b003      	add	sp, #12
 80090d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 80090da:	af01      	add	r7, sp, #4
 80090dc:	6828      	ldr	r0, [r5, #0]
 80090de:	463a      	mov	r2, r7
 80090e0:	f7f9 fe4e 	bl	8002d80 <xQueueReceiveFromISR>
	if(ret == pdTRUE){
 80090e4:	2801      	cmp	r0, #1
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 80090e6:	4604      	mov	r4, r0
	if(ret == pdTRUE){
 80090e8:	d1f5      	bne.n	80090d6 <uart_log+0x1e>
		while(*log) {
 80090ea:	7833      	ldrb	r3, [r6, #0]
 80090ec:	b1c3      	cbz	r3, 8009120 <uart_log+0x68>
			log_uart -> DR = *log++;
 80090ee:	4a10      	ldr	r2, [pc, #64]	; (8009130 <uart_log+0x78>)
 80090f0:	4631      	mov	r1, r6
 80090f2:	6053      	str	r3, [r2, #4]
			while(!(log_uart -> SR & USART_SR_TC));
 80090f4:	6813      	ldr	r3, [r2, #0]
 80090f6:	065b      	lsls	r3, r3, #25
 80090f8:	d5fc      	bpl.n	80090f4 <uart_log+0x3c>
		while(*log) {
 80090fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1f7      	bne.n	80090f2 <uart_log+0x3a>
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 8009102:	2c01      	cmp	r4, #1
 8009104:	d00b      	beq.n	800911e <uart_log+0x66>
 8009106:	2300      	movs	r3, #0
 8009108:	6828      	ldr	r0, [r5, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	4619      	mov	r1, r3
 800910e:	f7f9 f8b7 	bl	8002280 <xQueueGenericSend>
}
 8009112:	b003      	add	sp, #12
 8009114:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while(*log) {
 8009116:	7833      	ldrb	r3, [r6, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e8      	bne.n	80090ee <uart_log+0x36>
 800911c:	e7f3      	b.n	8009106 <uart_log+0x4e>
 800911e:	af01      	add	r7, sp, #4
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 8009120:	6828      	ldr	r0, [r5, #0]
 8009122:	4639      	mov	r1, r7
 8009124:	f7f9 fac8 	bl	80026b8 <xQueueGiveFromISR>
}
 8009128:	b003      	add	sp, #12
 800912a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800912c:	2000b964 	.word	0x2000b964
 8009130:	40011400 	.word	0x40011400
 8009134:	00000000 	.word	0x00000000

08009138 <main_application>:
int main_application(void){
 8009138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800913a:	b085      	sub	sp, #20
	system_init();
 800913c:	f000 fab8 	bl	80096b0 <system_init>
	rcc_init(&rcc);
 8009140:	4979      	ldr	r1, [pc, #484]	; (8009328 <main_application+0x1f0>)
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8009142:	4e7a      	ldr	r6, [pc, #488]	; (800932c <main_application+0x1f4>)
	rcc_init(&rcc);
 8009144:	a802      	add	r0, sp, #8
 8009146:	f7fe f84f 	bl	80071e8 <rcc_init>
	gpio_port_clock_enable(GPIOH);
 800914a:	4879      	ldr	r0, [pc, #484]	; (8009330 <main_application+0x1f8>)
 800914c:	f7fd fe9a 	bl	8006e84 <gpio_port_clock_enable>
	fmc_sdram_init(&sdram_conf);
 8009150:	4878      	ldr	r0, [pc, #480]	; (8009334 <main_application+0x1fc>)
 8009152:	f7fd fdcf 	bl	8006cf4 <fmc_sdram_init>
	sdram_init();
 8009156:	f7fd fbad 	bl	80068b4 <sdram_init>
	iwdg_init(CONFIG_IWDG_PRESCALER, CONFIG_IWDG_AUTORELOAD);
 800915a:	2104      	movs	r1, #4
 800915c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009160:	a802      	add	r0, sp, #8
 8009162:	f7fe f813 	bl	800718c <iwdg_init>
	iwdg_disable_in_debugmode();
 8009166:	f7fe f82f 	bl	80071c8 <iwdg_disable_in_debugmode>
	rng_init();
 800916a:	f7fe fa3b 	bl	80075e4 <rng_init>
	log_semaph = xSemaphoreCreateMutex();
 800916e:	2001      	movs	r0, #1
 8009170:	f7f9 fa04 	bl	800257c <xQueueCreateMutex>
 8009174:	4b70      	ldr	r3, [pc, #448]	; (8009338 <main_application+0x200>)
 8009176:	4602      	mov	r2, r0
	__IO uint32_t USART_BusFreq = 0UL;
 8009178:	2500      	movs	r5, #0
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 800917a:	4870      	ldr	r0, [pc, #448]	; (800933c <main_application+0x204>)
	log_semaph = xSemaphoreCreateMutex();
 800917c:	601a      	str	r2, [r3, #0]
	__IO uint32_t USART_BusFreq = 0UL;
 800917e:	9502      	str	r5, [sp, #8]
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 8009180:	f7fd fe80 	bl	8006e84 <gpio_port_clock_enable>
	gpio_port_clock_enable(CONFIG_LOG_UART_RXP);
 8009184:	486d      	ldr	r0, [pc, #436]	; (800933c <main_application+0x204>)
 8009186:	f7fd fe7d 	bl	8006e84 <gpio_port_clock_enable>
		gpio_set_alternatefunction(CONFIG_LOG_UART_TXP, CONFIG_LOG_UART_TX, AF8_USART4_8);
 800918a:	486c      	ldr	r0, [pc, #432]	; (800933c <main_application+0x204>)
 800918c:	2208      	movs	r2, #8
 800918e:	210e      	movs	r1, #14
 8009190:	f7fd ff56 	bl	8007040 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(CONFIG_LOG_UART_RXP, CONFIG_LOG_UART_RX, AF8_USART4_8);
 8009194:	2109      	movs	r1, #9
 8009196:	4869      	ldr	r0, [pc, #420]	; (800933c <main_application+0x204>)
 8009198:	2208      	movs	r2, #8
 800919a:	f7fd ff51 	bl	8007040 <gpio_set_alternatefunction>
		else if(log_uart == USART6) RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800919e:	4a68      	ldr	r2, [pc, #416]	; (8009340 <main_application+0x208>)
 80091a0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80091a2:	f043 0320 	orr.w	r3, r3, #32
 80091a6:	6453      	str	r3, [r2, #68]	; 0x44
		USART_BusFreq = rcc_get_bus_frequency(APB2);
 80091a8:	2003      	movs	r0, #3
 80091aa:	f7fe f9b3 	bl	8007514 <rcc_get_bus_frequency>
 80091ae:	9002      	str	r0, [sp, #8]
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80091b0:	68f3      	ldr	r3, [r6, #12]
 80091b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091b6:	f043 030c 	orr.w	r3, r3, #12
 80091ba:	60f3      	str	r3, [r6, #12]
	float USARTDIV = (float)(USART_BusFreq/(CONFIG_LOG_UART_BAUDRATE * 16.0));
 80091bc:	9802      	ldr	r0, [sp, #8]
 80091be:	f7f7 f9c1 	bl	8000544 <__aeabi_ui2d>
 80091c2:	a355      	add	r3, pc, #340	; (adr r3, 8009318 <main_application+0x1e0>)
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f7f7 fa36 	bl	8000638 <__aeabi_dmul>
 80091cc:	f7f7 fd2c 	bl	8000c28 <__aeabi_d2f>
 80091d0:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 80091d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 80091d8:	ee17 3a90 	vmov	r3, s15
 80091dc:	b29c      	uxth	r4, r3
 80091de:	f7f7 f9d3 	bl	8000588 <__aeabi_f2d>
 80091e2:	4b58      	ldr	r3, [pc, #352]	; (8009344 <main_application+0x20c>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	f7f7 fa27 	bl	8000638 <__aeabi_dmul>
 80091ea:	f7f7 fcfd 	bl	8000be8 <__aeabi_d2uiz>
 80091ee:	4607      	mov	r7, r0
 80091f0:	4620      	mov	r0, r4
 80091f2:	f7f7 f9b7 	bl	8000564 <__aeabi_i2d>
 80091f6:	4b53      	ldr	r3, [pc, #332]	; (8009344 <main_application+0x20c>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	f7f7 fa1d 	bl	8000638 <__aeabi_dmul>
 80091fe:	f7f7 fcf3 	bl	8000be8 <__aeabi_d2uiz>
 8009202:	b2bf      	uxth	r7, r7
 8009204:	b280      	uxth	r0, r0
 8009206:	1a38      	subs	r0, r7, r0
 8009208:	f7f7 f9ac 	bl	8000564 <__aeabi_i2d>
 800920c:	a344      	add	r3, pc, #272	; (adr r3, 8009320 <main_application+0x1e8>)
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	f7f7 fa11 	bl	8000638 <__aeabi_dmul>
 8009216:	f7f7 fd07 	bl	8000c28 <__aeabi_d2f>
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800921a:	ee07 0a90 	vmov	s15, r0
 800921e:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 8009222:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009226:	f000 fcc1 	bl	8009bac <ceilf>
	DIV_Fraction = ceil(Fraction);
 800922a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 800922e:	4846      	ldr	r0, [pc, #280]	; (8009348 <main_application+0x210>)
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 8009230:	ee10 3a10 	vmov	r3, s0
 8009234:	b29b      	uxth	r3, r3
 8009236:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800923a:	60b3      	str	r3, [r6, #8]
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 800923c:	f7ff ff3c 	bl	80090b8 <uart_log>
	log_init(uart_log);
 8009240:	4842      	ldr	r0, [pc, #264]	; (800934c <main_application+0x214>)
 8009242:	f000 f8d1 	bl	80093e8 <log_init>
	LOG_INFO(TAG, "Target        : %s",     mkstr(STM32F429xx));
 8009246:	4942      	ldr	r1, [pc, #264]	; (8009350 <main_application+0x218>)
 8009248:	4a42      	ldr	r2, [pc, #264]	; (8009354 <main_application+0x21c>)
 800924a:	4843      	ldr	r0, [pc, #268]	; (8009358 <main_application+0x220>)
 800924c:	f000 f8d2 	bl	80093f4 <LOG_INFO>
	LOG_INFO(TAG, "Revision ID   : 0x%04x", get_revid());
 8009250:	f000 fa1a 	bl	8009688 <get_revid>
 8009254:	4941      	ldr	r1, [pc, #260]	; (800935c <main_application+0x224>)
 8009256:	4602      	mov	r2, r0
 8009258:	483f      	ldr	r0, [pc, #252]	; (8009358 <main_application+0x220>)
 800925a:	f000 f8cb 	bl	80093f4 <LOG_INFO>
	LOG_INFO(TAG, "Device ID     : 0x%04x", get_devid());
 800925e:	f000 fa19 	bl	8009694 <get_devid>
 8009262:	493f      	ldr	r1, [pc, #252]	; (8009360 <main_application+0x228>)
 8009264:	4602      	mov	r2, r0
 8009266:	483c      	ldr	r0, [pc, #240]	; (8009358 <main_application+0x220>)
 8009268:	f000 f8c4 	bl	80093f4 <LOG_INFO>
	LOG_INFO(TAG, "Flash size    : %dKb",   get_flashsize());
 800926c:	f000 fa1a 	bl	80096a4 <get_flashsize>
 8009270:	493c      	ldr	r1, [pc, #240]	; (8009364 <main_application+0x22c>)
 8009272:	4602      	mov	r2, r0
 8009274:	4838      	ldr	r0, [pc, #224]	; (8009358 <main_application+0x220>)
 8009276:	f000 f8bd 	bl	80093f4 <LOG_INFO>
	LOG_INFO(TAG, "Ram size      : %dKb",   CONFIG_TOTAL_HEAP_SIZE/1024);
 800927a:	493b      	ldr	r1, [pc, #236]	; (8009368 <main_application+0x230>)
 800927c:	4836      	ldr	r0, [pc, #216]	; (8009358 <main_application+0x220>)
 800927e:	2280      	movs	r2, #128	; 0x80
 8009280:	f000 f8b8 	bl	80093f4 <LOG_INFO>
	LOG_INFO(TAG, "SDK version   : %s",     SDK_VERSION);
 8009284:	4939      	ldr	r1, [pc, #228]	; (800936c <main_application+0x234>)
 8009286:	4a3a      	ldr	r2, [pc, #232]	; (8009370 <main_application+0x238>)
 8009288:	4833      	ldr	r0, [pc, #204]	; (8009358 <main_application+0x220>)
 800928a:	f000 f8b3 	bl	80093f4 <LOG_INFO>
	LOG_INFO(TAG, "Core frequency: %luHz",  rcc_get_bus_frequency(SYSCLK));
 800928e:	4628      	mov	r0, r5
 8009290:	f7fe f940 	bl	8007514 <rcc_get_bus_frequency>
 8009294:	4937      	ldr	r1, [pc, #220]	; (8009374 <main_application+0x23c>)
 8009296:	4602      	mov	r2, r0
 8009298:	482f      	ldr	r0, [pc, #188]	; (8009358 <main_application+0x220>)
 800929a:	f000 f8ab 	bl	80093f4 <LOG_INFO>
	LOG_INFO(TAG, "AHB frequency : %luHz",  rcc_get_bus_frequency(AHB));
 800929e:	2001      	movs	r0, #1
 80092a0:	f7fe f938 	bl	8007514 <rcc_get_bus_frequency>
 80092a4:	4934      	ldr	r1, [pc, #208]	; (8009378 <main_application+0x240>)
 80092a6:	4602      	mov	r2, r0
 80092a8:	482b      	ldr	r0, [pc, #172]	; (8009358 <main_application+0x220>)
 80092aa:	f000 f8a3 	bl	80093f4 <LOG_INFO>
	LOG_INFO(TAG, "APB1 frequency: %luHz",  rcc_get_bus_frequency(APB1));
 80092ae:	2002      	movs	r0, #2
 80092b0:	f7fe f930 	bl	8007514 <rcc_get_bus_frequency>
 80092b4:	4931      	ldr	r1, [pc, #196]	; (800937c <main_application+0x244>)
 80092b6:	4602      	mov	r2, r0
 80092b8:	4827      	ldr	r0, [pc, #156]	; (8009358 <main_application+0x220>)
 80092ba:	f000 f89b 	bl	80093f4 <LOG_INFO>
	LOG_INFO(TAG, "APB2 frequency: %luHz",  rcc_get_bus_frequency(APB2));
 80092be:	2003      	movs	r0, #3
 80092c0:	f7fe f928 	bl	8007514 <rcc_get_bus_frequency>
 80092c4:	492e      	ldr	r1, [pc, #184]	; (8009380 <main_application+0x248>)
 80092c6:	4602      	mov	r2, r0
 80092c8:	4823      	ldr	r0, [pc, #140]	; (8009358 <main_application+0x220>)
 80092ca:	f000 f893 	bl	80093f4 <LOG_INFO>
	BaseType_t app_start_status = xTaskCreate(app_main_task, "app_main_task", CONFIG_RTOS_APP_MAIN_TASK_SIZE, NULL, CONFIG_RTOS_APP_MAIN_TASK_PRIO, NULL);
 80092ce:	2301      	movs	r3, #1
 80092d0:	e9cd 3500 	strd	r3, r5, [sp]
 80092d4:	492b      	ldr	r1, [pc, #172]	; (8009384 <main_application+0x24c>)
 80092d6:	482c      	ldr	r0, [pc, #176]	; (8009388 <main_application+0x250>)
 80092d8:	462b      	mov	r3, r5
 80092da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092de:	f7f9 ffe1 	bl	80032a4 <xTaskCreate>
	if(app_start_status != pdTRUE) {
 80092e2:	2801      	cmp	r0, #1
 80092e4:	d00b      	beq.n	80092fe <main_application+0x1c6>
		LOG_ERROR(TAG, "Error when start main application at %s -> %s Line: %d", __FILE__, __FUNCTION__, __LINE__);
 80092e6:	206a      	movs	r0, #106	; 0x6a
 80092e8:	9000      	str	r0, [sp, #0]
 80092ea:	4b28      	ldr	r3, [pc, #160]	; (800938c <main_application+0x254>)
 80092ec:	4a28      	ldr	r2, [pc, #160]	; (8009390 <main_application+0x258>)
 80092ee:	4929      	ldr	r1, [pc, #164]	; (8009394 <main_application+0x25c>)
 80092f0:	4819      	ldr	r0, [pc, #100]	; (8009358 <main_application+0x220>)
 80092f2:	f000 f8fb 	bl	80094ec <LOG_ERROR>
		return 0;
 80092f6:	462c      	mov	r4, r5
}
 80092f8:	4620      	mov	r0, r4
 80092fa:	b005      	add	sp, #20
 80092fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INFO(TAG, "Starting scheduler on CPU.");
 80092fe:	4926      	ldr	r1, [pc, #152]	; (8009398 <main_application+0x260>)
 8009300:	4604      	mov	r4, r0
 8009302:	4815      	ldr	r0, [pc, #84]	; (8009358 <main_application+0x220>)
 8009304:	f000 f876 	bl	80093f4 <LOG_INFO>
	vTaskStartScheduler();
 8009308:	f7fa f880 	bl	800340c <vTaskStartScheduler>
}
 800930c:	4620      	mov	r0, r4
 800930e:	b005      	add	sp, #20
 8009310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009312:	bf00      	nop
 8009314:	f3af 8000 	nop.w
 8009318:	789abcdf 	.word	0x789abcdf
 800931c:	3ea23456 	.word	0x3ea23456
 8009320:	47ae147b 	.word	0x47ae147b
 8009324:	3f847ae1 	.word	0x3f847ae1
 8009328:	20000040 	.word	0x20000040
 800932c:	40011400 	.word	0x40011400
 8009330:	40021c00 	.word	0x40021c00
 8009334:	20000068 	.word	0x20000068
 8009338:	2000b964 	.word	0x2000b964
 800933c:	40021800 	.word	0x40021800
 8009340:	40023800 	.word	0x40023800
 8009344:	40590000 	.word	0x40590000
 8009348:	0800d80c 	.word	0x0800d80c
 800934c:	080090b9 	.word	0x080090b9
 8009350:	0800d878 	.word	0x0800d878
 8009354:	0800d86c 	.word	0x0800d86c
 8009358:	0800d7e8 	.word	0x0800d7e8
 800935c:	0800d88c 	.word	0x0800d88c
 8009360:	0800d8a4 	.word	0x0800d8a4
 8009364:	0800d8bc 	.word	0x0800d8bc
 8009368:	0800d8d4 	.word	0x0800d8d4
 800936c:	0800d8f4 	.word	0x0800d8f4
 8009370:	0800d8ec 	.word	0x0800d8ec
 8009374:	0800d908 	.word	0x0800d908
 8009378:	0800d920 	.word	0x0800d920
 800937c:	0800d938 	.word	0x0800d938
 8009380:	0800d950 	.word	0x0800d950
 8009384:	0800d968 	.word	0x0800d968
 8009388:	0800908d 	.word	0x0800908d
 800938c:	0800d978 	.word	0x0800d978
 8009390:	0800d98c 	.word	0x0800d98c
 8009394:	0800d9ac 	.word	0x0800d9ac
 8009398:	0800d9e4 	.word	0x0800d9e4

0800939c <vApplicationIdleHook>:
	void vApplicationIdleHook(void){
 800939c:	b508      	push	{r3, lr}
		iwdg_refresh();
 800939e:	f7fd ff1b 	bl	80071d8 <iwdg_refresh>
	}
 80093a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_calculate_cpu_load_percent();
 80093a6:	f000 ba53 	b.w	8009850 <sys_calculate_cpu_load_percent>
 80093aa:	bf00      	nop

080093ac <vApplicationStackOverflowHook>:
	void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName){
 80093ac:	b508      	push	{r3, lr}
 80093ae:	460a      	mov	r2, r1
		LOG_ERROR(TAG, "Stack overflow on %s.", pcTaskName);
 80093b0:	4804      	ldr	r0, [pc, #16]	; (80093c4 <vApplicationStackOverflowHook+0x18>)
 80093b2:	4905      	ldr	r1, [pc, #20]	; (80093c8 <vApplicationStackOverflowHook+0x1c>)
 80093b4:	f000 f89a 	bl	80094ec <LOG_ERROR>
 80093b8:	4b04      	ldr	r3, [pc, #16]	; (80093cc <vApplicationStackOverflowHook+0x20>)
		for(uint32_t i=0; i< 4000000; i++) __NOP();
 80093ba:	bf00      	nop
 80093bc:	3b01      	subs	r3, #1
 80093be:	d1fc      	bne.n	80093ba <vApplicationStackOverflowHook+0xe>
		__NVIC_SystemReset();
 80093c0:	f7ff fe52 	bl	8009068 <__NVIC_SystemReset>
 80093c4:	0800d7e8 	.word	0x0800d7e8
 80093c8:	0800da00 	.word	0x0800da00
 80093cc:	003d0900 	.word	0x003d0900

080093d0 <vApplicationMallocFailedHook>:
	void vApplicationMallocFailedHook(void){
 80093d0:	b508      	push	{r3, lr}
		LOG_ERROR(TAG, "Memory allocation fail.");
 80093d2:	4903      	ldr	r1, [pc, #12]	; (80093e0 <vApplicationMallocFailedHook+0x10>)
 80093d4:	4803      	ldr	r0, [pc, #12]	; (80093e4 <vApplicationMallocFailedHook+0x14>)
 80093d6:	f000 f889 	bl	80094ec <LOG_ERROR>
		__NVIC_SystemReset();
 80093da:	f7ff fe45 	bl	8009068 <__NVIC_SystemReset>
 80093de:	bf00      	nop
 80093e0:	0800da18 	.word	0x0800da18
 80093e4:	0800d7e8 	.word	0x0800d7e8

080093e8 <log_init>:
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_init(void (*PrintString_Function)(char*)){
	plog = PrintString_Function;
 80093e8:	4b01      	ldr	r3, [pc, #4]	; (80093f0 <log_init+0x8>)
 80093ea:	6018      	str	r0, [r3, #0]
}
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	2000b968 	.word	0x2000b968

080093f4 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 80093f4:	b40e      	push	{r1, r2, r3}
 80093f6:	b570      	push	{r4, r5, r6, lr}
 80093f8:	b08b      	sub	sp, #44	; 0x2c
 80093fa:	ac0f      	add	r4, sp, #60	; 0x3c
 80093fc:	4606      	mov	r6, r0
 80093fe:	f854 1b04 	ldr.w	r1, [r4], #4
 8009402:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009404:	f7fe ff5c 	bl	80082c0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009408:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800940a:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800940c:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800940e:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009410:	4622      	mov	r2, r4
 8009412:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009414:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009416:	f001 fcab 	bl	800ad70 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 800941a:	4b0f      	ldr	r3, [pc, #60]	; (8009458 <LOG_INFO+0x64>)
 800941c:	4a0f      	ldr	r2, [pc, #60]	; (800945c <LOG_INFO+0x68>)
 800941e:	7819      	ldrb	r1, [r3, #0]
 8009420:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <LOG_INFO+0x6c>)
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	9b07      	ldr	r3, [sp, #28]
 8009426:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800942a:	9302      	str	r3, [sp, #8]
 800942c:	490d      	ldr	r1, [pc, #52]	; (8009464 <LOG_INFO+0x70>)
 800942e:	4b0e      	ldr	r3, [pc, #56]	; (8009468 <LOG_INFO+0x74>)
 8009430:	e9cd 5600 	strd	r5, r6, [sp]
 8009434:	a809      	add	r0, sp, #36	; 0x24
 8009436:	f000 fc03 	bl	8009c40 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logi], log_level_str[0], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800943a:	4b0c      	ldr	r3, [pc, #48]	; (800946c <LOG_INFO+0x78>)
 800943c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4798      	blx	r3
	free(Temp_buffer);
 8009442:	9807      	ldr	r0, [sp, #28]
 8009444:	f000 fc4c 	bl	8009ce0 <free>
	free(Output_buffer);
 8009448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800944a:	f000 fc49 	bl	8009ce0 <free>
}
 800944e:	b00b      	add	sp, #44	; 0x2c
 8009450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009454:	b003      	add	sp, #12
 8009456:	4770      	bx	lr
 8009458:	2000009e 	.word	0x2000009e
 800945c:	0800dbb8 	.word	0x0800dbb8
 8009460:	0800da48 	.word	0x0800da48
 8009464:	0800da54 	.word	0x0800da54
 8009468:	0800da50 	.word	0x0800da50
 800946c:	2000b968 	.word	0x2000b968

08009470 <LOG_WARN>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_WARN(const char *tag,  const char *format, ...){
 8009470:	b40e      	push	{r1, r2, r3}
 8009472:	b570      	push	{r4, r5, r6, lr}
 8009474:	b08b      	sub	sp, #44	; 0x2c
 8009476:	ac0f      	add	r4, sp, #60	; 0x3c
 8009478:	4606      	mov	r6, r0
 800947a:	f854 1b04 	ldr.w	r1, [r4], #4
 800947e:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009480:	f7fe ff1e 	bl	80082c0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009484:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009486:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009488:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800948a:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800948c:	4622      	mov	r2, r4
 800948e:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009490:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009492:	f001 fc6d 	bl	800ad70 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logw], log_level_str[1], time, tag, Temp_buffer, COLOR_END);
 8009496:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <LOG_WARN+0x64>)
 8009498:	4a0f      	ldr	r2, [pc, #60]	; (80094d8 <LOG_WARN+0x68>)
 800949a:	7819      	ldrb	r1, [r3, #0]
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <LOG_WARN+0x6c>)
 800949e:	9303      	str	r3, [sp, #12]
 80094a0:	9b07      	ldr	r3, [sp, #28]
 80094a2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80094a6:	9302      	str	r3, [sp, #8]
 80094a8:	490d      	ldr	r1, [pc, #52]	; (80094e0 <LOG_WARN+0x70>)
 80094aa:	4b0e      	ldr	r3, [pc, #56]	; (80094e4 <LOG_WARN+0x74>)
 80094ac:	e9cd 5600 	strd	r5, r6, [sp]
 80094b0:	a809      	add	r0, sp, #36	; 0x24
 80094b2:	f000 fbc5 	bl	8009c40 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logw], log_level_str[1], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 80094b6:	4b0c      	ldr	r3, [pc, #48]	; (80094e8 <LOG_WARN+0x78>)
 80094b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4798      	blx	r3
	free(Temp_buffer);
 80094be:	9807      	ldr	r0, [sp, #28]
 80094c0:	f000 fc0e 	bl	8009ce0 <free>
	free(Output_buffer);
 80094c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c6:	f000 fc0b 	bl	8009ce0 <free>
}
 80094ca:	b00b      	add	sp, #44	; 0x2c
 80094cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094d0:	b003      	add	sp, #12
 80094d2:	4770      	bx	lr
 80094d4:	2000009f 	.word	0x2000009f
 80094d8:	0800dbb8 	.word	0x0800dbb8
 80094dc:	0800da48 	.word	0x0800da48
 80094e0:	0800da54 	.word	0x0800da54
 80094e4:	0800da6c 	.word	0x0800da6c
 80094e8:	2000b968 	.word	0x2000b968

080094ec <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 80094ec:	b40e      	push	{r1, r2, r3}
 80094ee:	b570      	push	{r4, r5, r6, lr}
 80094f0:	b08b      	sub	sp, #44	; 0x2c
 80094f2:	ac0f      	add	r4, sp, #60	; 0x3c
 80094f4:	4606      	mov	r6, r0
 80094f6:	f854 1b04 	ldr.w	r1, [r4], #4
 80094fa:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 80094fc:	f7fe fee0 	bl	80082c0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009500:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009502:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009504:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009506:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009508:	4622      	mov	r2, r4
 800950a:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800950c:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800950e:	f001 fc2f 	bl	800ad70 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 8009512:	4b0f      	ldr	r3, [pc, #60]	; (8009550 <LOG_ERROR+0x64>)
 8009514:	4a0f      	ldr	r2, [pc, #60]	; (8009554 <LOG_ERROR+0x68>)
 8009516:	7819      	ldrb	r1, [r3, #0]
 8009518:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <LOG_ERROR+0x6c>)
 800951a:	9303      	str	r3, [sp, #12]
 800951c:	9b07      	ldr	r3, [sp, #28]
 800951e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009522:	9302      	str	r3, [sp, #8]
 8009524:	490d      	ldr	r1, [pc, #52]	; (800955c <LOG_ERROR+0x70>)
 8009526:	4b0e      	ldr	r3, [pc, #56]	; (8009560 <LOG_ERROR+0x74>)
 8009528:	e9cd 5600 	strd	r5, r6, [sp]
 800952c:	a809      	add	r0, sp, #36	; 0x24
 800952e:	f000 fb87 	bl	8009c40 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[loge], log_level_str[2], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009532:	4b0c      	ldr	r3, [pc, #48]	; (8009564 <LOG_ERROR+0x78>)
 8009534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4798      	blx	r3
	free(Temp_buffer);
 800953a:	9807      	ldr	r0, [sp, #28]
 800953c:	f000 fbd0 	bl	8009ce0 <free>
	free(Output_buffer);
 8009540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009542:	f000 fbcd 	bl	8009ce0 <free>
}
 8009546:	b00b      	add	sp, #44	; 0x2c
 8009548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800954c:	b003      	add	sp, #12
 800954e:	4770      	bx	lr
 8009550:	2000009d 	.word	0x2000009d
 8009554:	0800dbb8 	.word	0x0800dbb8
 8009558:	0800da48 	.word	0x0800da48
 800955c:	0800da54 	.word	0x0800da54
 8009560:	0800d3c4 	.word	0x0800d3c4
 8009564:	2000b968 	.word	0x2000b968

08009568 <LOG_DEBUG>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_DEBUG(const char *tag,  const char *format, ...){
 8009568:	b40e      	push	{r1, r2, r3}
 800956a:	b570      	push	{r4, r5, r6, lr}
 800956c:	b08b      	sub	sp, #44	; 0x2c
 800956e:	ac0f      	add	r4, sp, #60	; 0x3c
 8009570:	4606      	mov	r6, r0
 8009572:	f854 1b04 	ldr.w	r1, [r4], #4
 8009576:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009578:	f7fe fea2 	bl	80082c0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800957c:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800957e:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009580:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009582:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009584:	4622      	mov	r2, r4
 8009586:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009588:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800958a:	f001 fbf1 	bl	800ad70 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logd], log_level_str[3], time, tag, Temp_buffer, COLOR_END);
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <LOG_DEBUG+0x64>)
 8009590:	4a0f      	ldr	r2, [pc, #60]	; (80095d0 <LOG_DEBUG+0x68>)
 8009592:	7819      	ldrb	r1, [r3, #0]
 8009594:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <LOG_DEBUG+0x6c>)
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	9b07      	ldr	r3, [sp, #28]
 800959a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800959e:	9302      	str	r3, [sp, #8]
 80095a0:	490d      	ldr	r1, [pc, #52]	; (80095d8 <LOG_DEBUG+0x70>)
 80095a2:	4b0e      	ldr	r3, [pc, #56]	; (80095dc <LOG_DEBUG+0x74>)
 80095a4:	e9cd 5600 	strd	r5, r6, [sp]
 80095a8:	a809      	add	r0, sp, #36	; 0x24
 80095aa:	f000 fb49 	bl	8009c40 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logd], log_level_str[3], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 80095ae:	4b0c      	ldr	r3, [pc, #48]	; (80095e0 <LOG_DEBUG+0x78>)
 80095b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4798      	blx	r3
	free(Temp_buffer);
 80095b6:	9807      	ldr	r0, [sp, #28]
 80095b8:	f000 fb92 	bl	8009ce0 <free>
	free(Output_buffer);
 80095bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095be:	f000 fb8f 	bl	8009ce0 <free>
}
 80095c2:	b00b      	add	sp, #44	; 0x2c
 80095c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095c8:	b003      	add	sp, #12
 80095ca:	4770      	bx	lr
 80095cc:	2000009c 	.word	0x2000009c
 80095d0:	0800dbb8 	.word	0x0800dbb8
 80095d4:	0800da48 	.word	0x0800da48
 80095d8:	0800da54 	.word	0x0800da54
 80095dc:	0800da70 	.word	0x0800da70
 80095e0:	2000b968 	.word	0x2000b968

080095e4 <wait_flag_in_register_timeout>:
 * @param Flag
 * @param Level
 * @param TimeOut
 * @return
 */
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 80095e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	stm_ret_t res;

	__IO uint32_t time = GetCounterFunction();
 80095e8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8009658 <wait_flag_in_register_timeout+0x74>
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 80095ec:	b083      	sub	sp, #12
 80095ee:	461f      	mov	r7, r3
	stm_ret_t res;
 80095f0:	2301      	movs	r3, #1
 80095f2:	7003      	strb	r3, [r0, #0]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 80095f4:	4614      	mov	r4, r2
	__IO uint32_t time = GetCounterFunction();
 80095f6:	f8d9 3000 	ldr.w	r3, [r9]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 80095fa:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	stm_ret_t res;
 80095fe:	2200      	movs	r2, #0
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009600:	4606      	mov	r6, r0
 8009602:	460d      	mov	r5, r1
	stm_ret_t res;
 8009604:	6042      	str	r2, [r0, #4]
	__IO uint32_t time = GetCounterFunction();
 8009606:	4798      	blx	r3
 8009608:	9001      	str	r0, [sp, #4]
 800960a:	b14f      	cbz	r7, 8009620 <wait_flag_in_register_timeout+0x3c>
 800960c:	f1b8 0f00 	cmp.w	r8, #0
 8009610:	d110      	bne.n	8009634 <wait_flag_in_register_timeout+0x50>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	421c      	tst	r4, r3
 8009616:	d0fc      	beq.n	8009612 <wait_flag_in_register_timeout+0x2e>
				return res;
			}
		}
	}
	return res;
}
 8009618:	4630      	mov	r0, r6
 800961a:	b003      	add	sp, #12
 800961c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009620:	f1b8 0f00 	cmp.w	r8, #0
 8009624:	d113      	bne.n	800964e <wait_flag_in_register_timeout+0x6a>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009626:	682b      	ldr	r3, [r5, #0]
 8009628:	421c      	tst	r4, r3
 800962a:	d1fc      	bne.n	8009626 <wait_flag_in_register_timeout+0x42>
}
 800962c:	4630      	mov	r0, r6
 800962e:	b003      	add	sp, #12
 8009630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	4223      	tst	r3, r4
 8009638:	d1ee      	bne.n	8009618 <wait_flag_in_register_timeout+0x34>
			if(GetCounterFunction() - time >= TimeOut) {
 800963a:	f8d9 3000 	ldr.w	r3, [r9]
 800963e:	4798      	blx	r3
 8009640:	9b01      	ldr	r3, [sp, #4]
 8009642:	1ac0      	subs	r0, r0, r3
 8009644:	4540      	cmp	r0, r8
 8009646:	d3e0      	bcc.n	800960a <wait_flag_in_register_timeout+0x26>
				res.Status  = STM_TIMEOUT;
 8009648:	2302      	movs	r3, #2
 800964a:	7033      	strb	r3, [r6, #0]
				return res;
 800964c:	e7e4      	b.n	8009618 <wait_flag_in_register_timeout+0x34>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 800964e:	682b      	ldr	r3, [r5, #0]
 8009650:	4223      	tst	r3, r4
 8009652:	d1f2      	bne.n	800963a <wait_flag_in_register_timeout+0x56>
 8009654:	e7e0      	b.n	8009618 <wait_flag_in_register_timeout+0x34>
 8009656:	bf00      	nop
 8009658:	200000a0 	.word	0x200000a0

0800965c <set_return>:
 * @param res
 * @param Status
 * @param CodeLine
 */
void set_return(stm_ret_t *res, stm_err_t Status, uint32_t CodeLine){
	res -> Status = Status;
 800965c:	7001      	strb	r1, [r0, #0]
	res -> Line = CodeLine;
 800965e:	6042      	str	r2, [r0, #4]
}
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop

08009664 <set_return_line>:
 * @post
 * @param res
 * @param line
 */
void set_return_line(stm_ret_t *res, uint16_t line){
	res -> Line = line;
 8009664:	6041      	str	r1, [r0, #4]
}
 8009666:	4770      	bx	lr

08009668 <is_oke>:
 * @post
 * @param res
 * @return
 */
bool is_oke(stm_ret_t *res){
	if(res -> Status == STM_OKE) return true;
 8009668:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 800966a:	f1a0 0001 	sub.w	r0, r0, #1
 800966e:	fab0 f080 	clz	r0, r0
 8009672:	0940      	lsrs	r0, r0, #5
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop

08009678 <is_timeout>:
 * @post
 * @param res
 * @return
 */
bool is_timeout(stm_ret_t *res){
	if(res -> Status == STM_TIMEOUT) return true;
 8009678:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 800967a:	f1a0 0002 	sub.w	r0, r0, #2
 800967e:	fab0 f080 	clz	r0, r0
 8009682:	0940      	lsrs	r0, r0, #5
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop

08009688 <get_revid>:
static const char *Excep_TAG = "EXCEPTION";
static const char *Inter_TAG = "INTERRUPT";
#endif /* USE_HAL_DRIVER */

uint32_t get_revid(void){
	return((DBGMCU -> IDCODE) >> 16U);
 8009688:	4b01      	ldr	r3, [pc, #4]	; (8009690 <get_revid+0x8>)
 800968a:	6818      	ldr	r0, [r3, #0]
}
 800968c:	0c00      	lsrs	r0, r0, #16
 800968e:	4770      	bx	lr
 8009690:	e0042000 	.word	0xe0042000

08009694 <get_devid>:

uint32_t get_devid(void){
	return((DBGMCU -> IDCODE) & 0x0FFFU);
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <get_devid+0xc>)
 8009696:	6818      	ldr	r0, [r3, #0]
}
 8009698:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	e0042000 	.word	0xe0042000

080096a4 <get_flashsize>:

uint32_t get_flashsize(void){
#if defined(STM32F1)
	return (*(volatile uint16_t*)0x1FFFF7E0);
#elif defined(STM32F4)
	return (*(volatile uint16_t*)0x1FFF7A22);
 80096a4:	4b01      	ldr	r3, [pc, #4]	; (80096ac <get_flashsize+0x8>)
 80096a6:	8c58      	ldrh	r0, [r3, #34]	; 0x22
#endif /* STM32F4 */
}
 80096a8:	b280      	uxth	r0, r0
 80096aa:	4770      	bx	lr
 80096ac:	1fff7a00 	.word	0x1fff7a00

080096b0 <system_init>:
	/* FLASH LATENCY 2WS, PREFETCH BUFER ENABLE, DATA CACHE ENABLE */
	FLASH -> ACR |= FLASH_ACR_LATENCY_1 | FLASH_ACR_PRFTBE;
	while(!(FLASH -> ACR & FLASH_ACR_PRFTBS));
#elif defined(STM32F4)
#if CONFIG_FLASH_INSTRUCTION_CACHE
	FLASH -> ACR |= FLASH_ACR_ICEN;
 80096b0:	4b14      	ldr	r3, [pc, #80]	; (8009704 <system_init+0x54>)
  reg_value  =  (reg_value                                   |
 80096b2:	4a15      	ldr	r2, [pc, #84]	; (8009708 <system_init+0x58>)
 80096b4:	6819      	ldr	r1, [r3, #0]
 80096b6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
void system_init(void){
 80096ba:	b510      	push	{r4, lr}
	FLASH -> ACR |= FLASH_ACR_ICEN;
 80096bc:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_ICEN;
#endif

#if CONFIG_FLASH_DATA_CACHE
	FLASH -> ACR |= FLASH_ACR_DCEN;
 80096be:	6819      	ldr	r1, [r3, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096c0:	4c12      	ldr	r4, [pc, #72]	; (800970c <system_init+0x5c>)
 80096c2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80096c6:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_DCEN;
#endif

#if CONFIG_FLASH_PREFETCH_MODE
	FLASH -> ACR |= FLASH_ACR_PRFTEN;
 80096c8:	6819      	ldr	r1, [r3, #0]
 80096ca:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80096ce:	6019      	str	r1, [r3, #0]
 80096d0:	68e3      	ldr	r3, [r4, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096d2:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 80096d6:	ea03 030c 	and.w	r3, r3, ip
  reg_value  =  (reg_value                                   |
 80096da:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80096dc:	60e2      	str	r2, [r4, #12]
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 80096de:	200f      	movs	r0, #15
 80096e0:	f7fe fdcc 	bl	800827c <systick_init>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80096e4:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <system_init+0x60>)
	PWR -> CR |= PWR_CR_VOS;
 80096e6:	490b      	ldr	r1, [pc, #44]	; (8009714 <system_init+0x64>)
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80096e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80096ee:	641a      	str	r2, [r3, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80096f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096f6:	645a      	str	r2, [r3, #68]	; 0x44
	PWR -> CR |= PWR_CR_VOS;
 80096f8:	680b      	ldr	r3, [r1, #0]
 80096fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096fe:	600b      	str	r3, [r1, #0]
}
 8009700:	bd10      	pop	{r4, pc}
 8009702:	bf00      	nop
 8009704:	40023c00 	.word	0x40023c00
 8009708:	05fa0300 	.word	0x05fa0300
 800970c:	e000ed00 	.word	0xe000ed00
 8009710:	40023800 	.word	0x40023800
 8009714:	40007000 	.word	0x40007000

08009718 <embedded_flash_set_latency>:
#endif
#endif /* STM32F4 */
}

void embedded_flash_set_latency(uint32_t latency){
	FLASH -> ACR = ((FLASH -> ACR & (~FLASH_ACR_LATENCY_Msk)) | (latency << FLASH_ACR_LATENCY_Pos));
 8009718:	4a03      	ldr	r2, [pc, #12]	; (8009728 <embedded_flash_set_latency+0x10>)
 800971a:	6813      	ldr	r3, [r2, #0]
 800971c:	f023 030f 	bic.w	r3, r3, #15
 8009720:	4318      	orrs	r0, r3
 8009722:	6010      	str	r0, [r2, #0]
}
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	40023c00 	.word	0x40023c00

0800972c <embedded_flash_calculate_latency>:

	tmpreg |= (uint32_t)(latency << FLASH_ACR_LATENCY_Pos);
	FLASH -> ACR |= tmpreg;
}

uint32_t embedded_flash_calculate_latency(uint32_t freq){
 800972c:	b410      	push	{r4}
#if defined(STM32F1)
	uint32_t latency= (uint32_t)(freq / 24000000U);
	if(freq == 24000000U || freq == 48000000U || freq == 72000000U) latency -= 1;
#elif defined(STM32F4)
	uint32_t latency= (uint32_t)(freq / 30000000U);
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 800972e:	490e      	ldr	r1, [pc, #56]	; (8009768 <embedded_flash_calculate_latency+0x3c>)
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009730:	4c0e      	ldr	r4, [pc, #56]	; (800976c <embedded_flash_calculate_latency+0x40>)
uint32_t embedded_flash_calculate_latency(uint32_t freq){
 8009732:	4602      	mov	r2, r0
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009734:	09c3      	lsrs	r3, r0, #7
 8009736:	fba4 0303 	umull	r0, r3, r4, r3
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 800973a:	428a      	cmp	r2, r1
	uint32_t latency= (uint32_t)(freq / 30000000U);
 800973c:	ea4f 2093 	mov.w	r0, r3, lsr #10
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8009740:	d00e      	beq.n	8009760 <embedded_flash_calculate_latency+0x34>
 8009742:	4b0b      	ldr	r3, [pc, #44]	; (8009770 <embedded_flash_calculate_latency+0x44>)
 8009744:	429a      	cmp	r2, r3
 8009746:	d00b      	beq.n	8009760 <embedded_flash_calculate_latency+0x34>
 8009748:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <embedded_flash_calculate_latency+0x48>)
 800974a:	429a      	cmp	r2, r3
 800974c:	d008      	beq.n	8009760 <embedded_flash_calculate_latency+0x34>
    || freq == 120000000U || freq == 150000000U || freq == 180000000U) latency -= 1;
 800974e:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <embedded_flash_calculate_latency+0x4c>)
 8009750:	429a      	cmp	r2, r3
 8009752:	d005      	beq.n	8009760 <embedded_flash_calculate_latency+0x34>
 8009754:	4b09      	ldr	r3, [pc, #36]	; (800977c <embedded_flash_calculate_latency+0x50>)
 8009756:	429a      	cmp	r2, r3
 8009758:	d002      	beq.n	8009760 <embedded_flash_calculate_latency+0x34>
 800975a:	4b09      	ldr	r3, [pc, #36]	; (8009780 <embedded_flash_calculate_latency+0x54>)
 800975c:	429a      	cmp	r2, r3
 800975e:	d100      	bne.n	8009762 <embedded_flash_calculate_latency+0x36>
 8009760:	3801      	subs	r0, #1
#endif /* STM32F4 */

	return latency;
}
 8009762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	01c9c380 	.word	0x01c9c380
 800976c:	011e54c7 	.word	0x011e54c7
 8009770:	03938700 	.word	0x03938700
 8009774:	055d4a80 	.word	0x055d4a80
 8009778:	07270e00 	.word	0x07270e00
 800977c:	08f0d180 	.word	0x08f0d180
 8009780:	0aba9500 	.word	0x0aba9500

08009784 <embedded_flash_get_latency>:

uint32_t embedded_flash_get_latency(void){
	return (FLASH -> ACR & FLASH_ACR_LATENCY_Msk >> FLASH_ACR_LATENCY_Pos);
 8009784:	4b02      	ldr	r3, [pc, #8]	; (8009790 <embedded_flash_get_latency+0xc>)
 8009786:	6818      	ldr	r0, [r3, #0]
}
 8009788:	f000 000f 	and.w	r0, r0, #15
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	40023c00 	.word	0x40023c00

08009794 <NVIC_Set_Priority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009794:	4b1f      	ldr	r3, [pc, #124]	; (8009814 <NVIC_Set_Priority+0x80>)
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800979c:	290f      	cmp	r1, #15


void NVIC_Set_Priority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority){
 800979e:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097a0:	f1c3 0e07 	rsb	lr, r3, #7
 80097a4:	bf28      	it	cs
 80097a6:	210f      	movcs	r1, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097a8:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097ac:	f1be 0f04 	cmp.w	lr, #4
 80097b0:	bf28      	it	cs
 80097b2:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097b6:	f1bc 0f06 	cmp.w	ip, #6
 80097ba:	d91f      	bls.n	80097fc <NVIC_Set_Priority+0x68>
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097bc:	2a0f      	cmp	r2, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097be:	f1a3 0303 	sub.w	r3, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097c2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80097c6:	bf28      	it	cs
 80097c8:	220f      	movcs	r2, #15
 80097ca:	fa0c fc03 	lsl.w	ip, ip, r3
 80097ce:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097d2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80097d6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80097da:	ea21 010c 	bic.w	r1, r1, ip
 80097de:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80097e0:	2800      	cmp	r0, #0
         );
 80097e2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80097e6:	db0c      	blt.n	8009802 <NVIC_Set_Priority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097e8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80097ec:	0109      	lsls	r1, r1, #4
 80097ee:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80097f2:	b2c9      	uxtb	r1, r1
 80097f4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
	if(SubPriority > 15U) SubPriority = 15U;

	prioritygroup = __NVIC_GetPriorityGrouping();

	__NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80097f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80097fc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097fe:	4613      	mov	r3, r2
 8009800:	e7e7      	b.n	80097d2 <NVIC_Set_Priority+0x3e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009802:	4b05      	ldr	r3, [pc, #20]	; (8009818 <NVIC_Set_Priority+0x84>)
 8009804:	f000 000f 	and.w	r0, r0, #15
 8009808:	0109      	lsls	r1, r1, #4
 800980a:	4403      	add	r3, r0
 800980c:	b2c9      	uxtb	r1, r1
 800980e:	7619      	strb	r1, [r3, #24]
 8009810:	f85d fb04 	ldr.w	pc, [sp], #4
 8009814:	e000ed00 	.word	0xe000ed00
 8009818:	e000ecfc 	.word	0xe000ecfc

0800981c <sys_get_free_heap_size>:
	mem.total_free_ram = mi.fordblks;

	return mem;
}

uint32_t sys_get_free_heap_size(void){
 800981c:	b530      	push	{r4, r5, lr}
	char *heapend = (char*)sbrk(0);
 800981e:	2000      	movs	r0, #0
uint32_t sys_get_free_heap_size(void){
 8009820:	b08b      	sub	sp, #44	; 0x2c
	char *heapend = (char*)sbrk(0);
 8009822:	f001 fa85 	bl	800ad30 <sbrk>
 8009826:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8009828:	f3ef 8508 	mrs	r5, MSP
	char * stack_ptr = (char*)__get_MSP();
	struct mallinfo mi = mallinfo();
 800982c:	4668      	mov	r0, sp
 800982e:	f000 fa8f 	bl	8009d50 <mallinfo>

	return ((stack_ptr < minSP) ? stack_ptr : minSP) - heapend + mi.fordblks;
 8009832:	4b06      	ldr	r3, [pc, #24]	; (800984c <sys_get_free_heap_size+0x30>)
 8009834:	9808      	ldr	r0, [sp, #32]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	42ab      	cmp	r3, r5
 800983a:	bf94      	ite	ls
 800983c:	ebc4 0403 	rsbls	r4, r4, r3
 8009840:	ebc4 0405 	rsbhi	r4, r4, r5
}
 8009844:	4420      	add	r0, r4
 8009846:	b00b      	add	sp, #44	; 0x2c
 8009848:	bd30      	pop	{r4, r5, pc}
 800984a:	bf00      	nop
 800984c:	2000b96c 	.word	0x2000b96c

08009850 <sys_calculate_cpu_load_percent>:

	return mi.uordblks;
}

void sys_calculate_cpu_load_percent(void){
    if((sdk_tick - last_systick_idle_ticks) >= 1){
 8009850:	4a06      	ldr	r2, [pc, #24]	; (800986c <sys_calculate_cpu_load_percent+0x1c>)
 8009852:	4b07      	ldr	r3, [pc, #28]	; (8009870 <sys_calculate_cpu_load_percent+0x20>)
 8009854:	6810      	ldr	r0, [r2, #0]
 8009856:	6819      	ldr	r1, [r3, #0]
 8009858:	4288      	cmp	r0, r1
 800985a:	d005      	beq.n	8009868 <sys_calculate_cpu_load_percent+0x18>
    	systick_idle_ticks++;
 800985c:	4805      	ldr	r0, [pc, #20]	; (8009874 <sys_calculate_cpu_load_percent+0x24>)
 800985e:	6801      	ldr	r1, [r0, #0]
 8009860:	3101      	adds	r1, #1
 8009862:	6001      	str	r1, [r0, #0]
    	last_systick_idle_ticks = sdk_tick;
 8009864:	6812      	ldr	r2, [r2, #0]
 8009866:	601a      	str	r2, [r3, #0]
    }
}
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	2000b6d0 	.word	0x2000b6d0
 8009870:	2000b974 	.word	0x2000b974
 8009874:	2000b978 	.word	0x2000b978

08009878 <exception_interrupt_handler>:
}


void exception_interrupt_handler(const char *tag, char *message){
#if CONFIG_USE_LOG_MONITOR
	LOG_ERROR(tag, message);
 8009878:	f7ff be38 	b.w	80094ec <LOG_ERROR>

0800987c <_GLOBAL__sub_I_systick_total_ticks>:
static char *minSP = (char*)(ramend - &_Min_Stack_Size);
 800987c:	4b02      	ldr	r3, [pc, #8]	; (8009888 <_GLOBAL__sub_I_systick_total_ticks+0xc>)
 800987e:	4903      	ldr	r1, [pc, #12]	; (800988c <_GLOBAL__sub_I_systick_total_ticks+0x10>)
 8009880:	4a03      	ldr	r2, [pc, #12]	; (8009890 <_GLOBAL__sub_I_systick_total_ticks+0x14>)
 8009882:	1a5b      	subs	r3, r3, r1
 8009884:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_USE_LOG_MONITOR */
}
 8009886:	4770      	bx	lr
 8009888:	20030000 	.word	0x20030000
 800988c:	00000400 	.word	0x00000400
 8009890:	2000b96c 	.word	0x2000b96c

08009894 <_Z11task_loratxPv>:
	}
}



void task_loratx(void *){
 8009894:	b508      	push	{r3, lr}

	while(1){
		loraif_request_data();
 8009896:	f7fb fb6b 	bl	8004f70 <loraif_request_data>
		vTaskDelay(100);
 800989a:	2064      	movs	r0, #100	; 0x64
 800989c:	f7f9 ffb0 	bl	8003800 <vTaskDelay>
	while(1){
 80098a0:	e7f9      	b.n	8009896 <_Z11task_loratxPv+0x2>
 80098a2:	bf00      	nop

080098a4 <_Z11task_lorarxPv>:
	}
}

void task_lorarx(void *){
 80098a4:	b500      	push	{lr}
	spi5->init(&spi5_conf);
 80098a6:	4c23      	ldr	r4, [pc, #140]	; (8009934 <_Z11task_lorarxPv+0x90>)
 80098a8:	4a23      	ldr	r2, [pc, #140]	; (8009938 <_Z11task_lorarxPv+0x94>)
 80098aa:	6821      	ldr	r1, [r4, #0]
void task_lorarx(void *){
 80098ac:	b085      	sub	sp, #20
	spi5->init(&spi5_conf);
 80098ae:	a802      	add	r0, sp, #8
 80098b0:	f7fd fef0 	bl	8007694 <_ZN3spi4initEP12spi_config_t>
	exti_register_event_handler(0, gpioA0_event_handler, NULL);
 80098b4:	2200      	movs	r2, #0
 80098b6:	4610      	mov	r0, r2
 80098b8:	4920      	ldr	r1, [pc, #128]	; (800993c <_Z11task_lorarxPv+0x98>)
 80098ba:	f7fc fee9 	bl	8006690 <exti_register_event_handler>

	if(lora.init(spi5, 433E6, 20, 7)) LOG_INFO(TAG, "Lora Initialize OKE.");
 80098be:	2307      	movs	r3, #7
 80098c0:	6821      	ldr	r1, [r4, #0]
 80098c2:	4a1f      	ldr	r2, [pc, #124]	; (8009940 <_Z11task_lorarxPv+0x9c>)
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	481f      	ldr	r0, [pc, #124]	; (8009944 <_Z11task_lorarxPv+0xa0>)
 80098c8:	2314      	movs	r3, #20
 80098ca:	f7fb fd3b 	bl	8005344 <_ZN6sx127x4initEP3spilhm>
 80098ce:	b358      	cbz	r0, 8009928 <_Z11task_lorarxPv+0x84>
 80098d0:	491d      	ldr	r1, [pc, #116]	; (8009948 <_Z11task_lorarxPv+0xa4>)
 80098d2:	481e      	ldr	r0, [pc, #120]	; (800994c <_Z11task_lorarxPv+0xa8>)
 80098d4:	f7ff fd8e 	bl	80093f4 <LOG_INFO>
	else LOG_ERROR(TAG, "Lora Initialize Failed.");

	lora_queue = xQueueCreate(10, sizeof(uint32_t));
 80098d8:	2200      	movs	r2, #0
 80098da:	2104      	movs	r1, #4
 80098dc:	200a      	movs	r0, #10
 80098de:	f7f8 fc8d 	bl	80021fc <xQueueGenericCreate>
 80098e2:	4c1b      	ldr	r4, [pc, #108]	; (8009950 <_Z11task_lorarxPv+0xac>)
	loraif_init(&lora, tim2, 25000, 3);
 80098e4:	491b      	ldr	r1, [pc, #108]	; (8009954 <_Z11task_lorarxPv+0xb0>)
	lora_queue = xQueueCreate(10, sizeof(uint32_t));
 80098e6:	6020      	str	r0, [r4, #0]
	loraif_init(&lora, tim2, 25000, 3);
 80098e8:	2303      	movs	r3, #3
 80098ea:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80098ee:	6809      	ldr	r1, [r1, #0]
 80098f0:	4814      	ldr	r0, [pc, #80]	; (8009944 <_Z11task_lorarxPv+0xa0>)
 80098f2:	f7fa ff89 	bl	8004808 <loraif_init>
	loraif_register_event_handler(loraif_event_handler);
 80098f6:	4818      	ldr	r0, [pc, #96]	; (8009958 <_Z11task_lorarxPv+0xb4>)
 80098f8:	f7fa ffca 	bl	8004890 <loraif_register_event_handler>

	lora.setSyncWord(0x3F);
 80098fc:	4811      	ldr	r0, [pc, #68]	; (8009944 <_Z11task_lorarxPv+0xa0>)
 80098fe:	213f      	movs	r1, #63	; 0x3f
 8009900:	f7fc fbd0 	bl	80060a4 <_ZN6sx127x11setSyncWordEh>
	lora.register_event_handler(NULL, lora_event_handler);
 8009904:	480f      	ldr	r0, [pc, #60]	; (8009944 <_Z11task_lorarxPv+0xa0>)
 8009906:	4a15      	ldr	r2, [pc, #84]	; (800995c <_Z11task_lorarxPv+0xb8>)
 8009908:	2100      	movs	r1, #0
 800990a:	f7fb ffad 	bl	8005868 <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>
	lora.Receive(0);
 800990e:	480d      	ldr	r0, [pc, #52]	; (8009944 <_Z11task_lorarxPv+0xa0>)
 8009910:	2100      	movs	r1, #0
 8009912:	f7fc fae3 	bl	8005edc <_ZN6sx127x7ReceiveEh>

	while(1){
		loraif_process(&lora_queue);
 8009916:	4620      	mov	r0, r4
 8009918:	f7fb f998 	bl	8004c4c <loraif_process>
		loraif_response();
 800991c:	f7fa fffa 	bl	8004914 <loraif_response>
		vTaskDelay(20);
 8009920:	2014      	movs	r0, #20
 8009922:	f7f9 ff6d 	bl	8003800 <vTaskDelay>
	while(1){
 8009926:	e7f6      	b.n	8009916 <_Z11task_lorarxPv+0x72>
	else LOG_ERROR(TAG, "Lora Initialize Failed.");
 8009928:	490d      	ldr	r1, [pc, #52]	; (8009960 <_Z11task_lorarxPv+0xbc>)
 800992a:	4808      	ldr	r0, [pc, #32]	; (800994c <_Z11task_lorarxPv+0xa8>)
 800992c:	f7ff fdde 	bl	80094ec <LOG_ERROR>
 8009930:	e7d2      	b.n	80098d8 <_Z11task_lorarxPv+0x34>
 8009932:	bf00      	nop
 8009934:	20000030 	.word	0x20000030
 8009938:	200000a4 	.word	0x200000a4
 800993c:	08009965 	.word	0x08009965
 8009940:	19cf0e40 	.word	0x19cf0e40
 8009944:	2000b980 	.word	0x2000b980
 8009948:	0800dc38 	.word	0x0800dc38
 800994c:	0800dc50 	.word	0x0800dc50
 8009950:	2000b9ac 	.word	0x2000b9ac
 8009954:	2000003c 	.word	0x2000003c
 8009958:	08009971 	.word	0x08009971
 800995c:	08009a19 	.word	0x08009a19
 8009960:	0800dc58 	.word	0x0800dc58

08009964 <_Z20gpioA0_event_handlerPv>:
	}
}

void gpioA0_event_handler(void *){
	lora.IRQHandler();
 8009964:	4801      	ldr	r0, [pc, #4]	; (800996c <_Z20gpioA0_event_handlerPv+0x8>)
 8009966:	f7fc bbc1 	b.w	80060ec <_ZN6sx127x10IRQHandlerEv>
 800996a:	bf00      	nop
 800996c:	2000b980 	.word	0x2000b980

08009970 <_Z20loraif_event_handler12lora_event_tPc>:
	}
}

void loraif_event_handler(lora_event_t event, char *data){
//	if(data != NULL) LOG_WARN(TAG, "LoRa data: %s", data);
	switch(event){
 8009970:	3801      	subs	r0, #1
void loraif_event_handler(lora_event_t event, char *data){
 8009972:	b510      	push	{r4, lr}
 8009974:	460c      	mov	r4, r1
	switch(event){
 8009976:	2806      	cmp	r0, #6
 8009978:	d836      	bhi.n	80099e8 <_Z20loraif_event_handler12lora_event_tPc+0x78>
 800997a:	e8df f000 	tbb	[pc, r0]
 800997e:	130d      	.short	0x130d
 8009980:	2f29231d 	.word	0x2f29231d
 8009984:	04          	.byte	0x04
 8009985:	00          	.byte	0x00
		break;
		case LORA_UPDATE_DATA:
			LOG_WARN(TAG, "LORA_UPDATE_DATA");
		break;
		case LORA_DEL_DEVICE:
			LOG_WARN(TAG, "LORA_DEL_DEVICE");
 8009986:	481b      	ldr	r0, [pc, #108]	; (80099f4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 8009988:	491b      	ldr	r1, [pc, #108]	; (80099f8 <_Z20loraif_event_handler12lora_event_tPc+0x88>)
 800998a:	f7ff fd71 	bl	8009470 <LOG_WARN>
			loraif_remove_device(data);
 800998e:	4620      	mov	r0, r4
		default:
			LOG_WARN(TAG, "LoRa other event.");
		break;

	}
}
 8009990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			loraif_remove_device(data);
 8009994:	f7fb b8c8 	b.w	8004b28 <loraif_remove_device>
}
 8009998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LORA_REQ_ADDRESS");
 800999c:	4917      	ldr	r1, [pc, #92]	; (80099fc <_Z20loraif_event_handler12lora_event_tPc+0x8c>)
 800999e:	4815      	ldr	r0, [pc, #84]	; (80099f4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 80099a0:	f7ff bd66 	b.w	8009470 <LOG_WARN>
			LOG_WARN(TAG, "LORA_UPDATE_ADDRESS");
 80099a4:	4916      	ldr	r1, [pc, #88]	; (8009a00 <_Z20loraif_event_handler12lora_event_tPc+0x90>)
 80099a6:	4813      	ldr	r0, [pc, #76]	; (80099f4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 80099a8:	f7ff fd62 	bl	8009470 <LOG_WARN>
			loraif_new_device(data, NULL);
 80099ac:	4620      	mov	r0, r4
 80099ae:	2100      	movs	r1, #0
}
 80099b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			loraif_new_device(data, NULL);
 80099b4:	f7fb b85a 	b.w	8004a6c <loraif_new_device>
}
 80099b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LORA_UPDATE_STATE");
 80099bc:	4911      	ldr	r1, [pc, #68]	; (8009a04 <_Z20loraif_event_handler12lora_event_tPc+0x94>)
 80099be:	480d      	ldr	r0, [pc, #52]	; (80099f4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 80099c0:	f7ff bd56 	b.w	8009470 <LOG_WARN>
}
 80099c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LORA_UPDATE_SETTINGS");
 80099c8:	490f      	ldr	r1, [pc, #60]	; (8009a08 <_Z20loraif_event_handler12lora_event_tPc+0x98>)
 80099ca:	480a      	ldr	r0, [pc, #40]	; (80099f4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 80099cc:	f7ff bd50 	b.w	8009470 <LOG_WARN>
}
 80099d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LORA_REQ_DATA");
 80099d4:	490d      	ldr	r1, [pc, #52]	; (8009a0c <_Z20loraif_event_handler12lora_event_tPc+0x9c>)
 80099d6:	4807      	ldr	r0, [pc, #28]	; (80099f4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 80099d8:	f7ff bd4a 	b.w	8009470 <LOG_WARN>
}
 80099dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LORA_UPDATE_DATA");
 80099e0:	490b      	ldr	r1, [pc, #44]	; (8009a10 <_Z20loraif_event_handler12lora_event_tPc+0xa0>)
 80099e2:	4804      	ldr	r0, [pc, #16]	; (80099f4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 80099e4:	f7ff bd44 	b.w	8009470 <LOG_WARN>
}
 80099e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LoRa other event.");
 80099ec:	4909      	ldr	r1, [pc, #36]	; (8009a14 <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 80099ee:	4801      	ldr	r0, [pc, #4]	; (80099f4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 80099f0:	f7ff bd3e 	b.w	8009470 <LOG_WARN>
 80099f4:	0800dc50 	.word	0x0800dc50
 80099f8:	0800d404 	.word	0x0800d404
 80099fc:	0800d38c 	.word	0x0800d38c
 8009a00:	0800d3a0 	.word	0x0800d3a0
 8009a04:	0800d3b4 	.word	0x0800d3b4
 8009a08:	0800d3c8 	.word	0x0800d3c8
 8009a0c:	0800d3e0 	.word	0x0800d3e0
 8009a10:	0800d3f0 	.word	0x0800d3f0
 8009a14:	0800dc70 	.word	0x0800dc70

08009a18 <_Z18lora_event_handlerPvh>:
	if(packetSize){
 8009a18:	b901      	cbnz	r1, 8009a1c <_Z18lora_event_handlerPvh+0x4>
 8009a1a:	4770      	bx	lr
void lora_event_handler(void *, uint8_t len){
 8009a1c:	b530      	push	{r4, r5, lr}
		lora_RxBuf = (char *)malloc(packetSize+1);
 8009a1e:	1c48      	adds	r0, r1, #1
void lora_event_handler(void *, uint8_t len){
 8009a20:	b089      	sub	sp, #36	; 0x24
 8009a22:	460c      	mov	r4, r1
		lora_RxBuf = (char *)malloc(packetSize+1);
 8009a24:	f000 f954 	bl	8009cd0 <malloc>
 8009a28:	4601      	mov	r1, r0
		lora.receive(lora_RxBuf);
 8009a2a:	481e      	ldr	r0, [pc, #120]	; (8009aa4 <_Z18lora_event_handlerPvh+0x8c>)
		lora_RxBuf = (char *)malloc(packetSize+1);
 8009a2c:	9106      	str	r1, [sp, #24]
		lora.receive(lora_RxBuf);
 8009a2e:	f7fc f9ff 	bl	8005e30 <_ZN6sx127x7receiveEPc>
		lora_RxBuf[packetSize] = '\0';
 8009a32:	9b06      	ldr	r3, [sp, #24]
		LOG_INFO(TAG, "Receive: %s, packet RSSI = %d, SNR = %.02f, RSSI = %d", lora_RxBuf, lora.packetRssi(), lora.packetSnr(), lora.rssi());
 8009a34:	481b      	ldr	r0, [pc, #108]	; (8009aa4 <_Z18lora_event_handlerPvh+0x8c>)
		lora_RxBuf[packetSize] = '\0';
 8009a36:	2500      	movs	r5, #0
 8009a38:	551d      	strb	r5, [r3, r4]
		LOG_INFO(TAG, "Receive: %s, packet RSSI = %d, SNR = %.02f, RSSI = %d", lora_RxBuf, lora.packetRssi(), lora.packetSnr(), lora.rssi());
 8009a3a:	9a06      	ldr	r2, [sp, #24]
 8009a3c:	9205      	str	r2, [sp, #20]
 8009a3e:	f7fc f8e7 	bl	8005c10 <_ZN6sx127x10packetRssiEv>
 8009a42:	4603      	mov	r3, r0
 8009a44:	4817      	ldr	r0, [pc, #92]	; (8009aa4 <_Z18lora_event_handlerPvh+0x8c>)
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	f7fc f912 	bl	8005c70 <_ZN6sx127x9packetSnrEv>
 8009a4c:	4815      	ldr	r0, [pc, #84]	; (8009aa4 <_Z18lora_event_handlerPvh+0x8c>)
 8009a4e:	ee10 4a10 	vmov	r4, s0
 8009a52:	f7fc f93f 	bl	8005cd4 <_ZN6sx127x4rssiEv>
 8009a56:	4601      	mov	r1, r0
 8009a58:	4620      	mov	r0, r4
 8009a5a:	9102      	str	r1, [sp, #8]
 8009a5c:	f7f6 fd94 	bl	8000588 <__aeabi_f2d>
 8009a60:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009a64:	e9cd 0100 	strd	r0, r1, [sp]
 8009a68:	480f      	ldr	r0, [pc, #60]	; (8009aa8 <_Z18lora_event_handlerPvh+0x90>)
 8009a6a:	4910      	ldr	r1, [pc, #64]	; (8009aac <_Z18lora_event_handlerPvh+0x94>)
 8009a6c:	f7ff fcc2 	bl	80093f4 <LOG_INFO>
		if(loraif_check_crc(lora_RxBuf) == true){
 8009a70:	9806      	ldr	r0, [sp, #24]
 8009a72:	f7fa ff13 	bl	800489c <loraif_check_crc>
 8009a76:	b170      	cbz	r0, 8009a96 <_Z18lora_event_handlerPvh+0x7e>
			if(xQueueSendFromISR(lora_queue, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS){
 8009a78:	4a0d      	ldr	r2, [pc, #52]	; (8009ab0 <_Z18lora_event_handlerPvh+0x98>)
			BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8009a7a:	9507      	str	r5, [sp, #28]
			if(xQueueSendFromISR(lora_queue, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS){
 8009a7c:	6810      	ldr	r0, [r2, #0]
 8009a7e:	462b      	mov	r3, r5
 8009a80:	aa07      	add	r2, sp, #28
 8009a82:	a906      	add	r1, sp, #24
 8009a84:	f7f8 fdb2 	bl	80025ec <xQueueGenericSendFromISR>
 8009a88:	2801      	cmp	r0, #1
 8009a8a:	d008      	beq.n	8009a9e <_Z18lora_event_handlerPvh+0x86>
				LOG_ERROR(TAG, "LoRa error queue receive.");
 8009a8c:	4909      	ldr	r1, [pc, #36]	; (8009ab4 <_Z18lora_event_handlerPvh+0x9c>)
 8009a8e:	4806      	ldr	r0, [pc, #24]	; (8009aa8 <_Z18lora_event_handlerPvh+0x90>)
 8009a90:	f7ff fd2c 	bl	80094ec <LOG_ERROR>
 8009a94:	e003      	b.n	8009a9e <_Z18lora_event_handlerPvh+0x86>
			LOG_ERROR(TAG, "LoRa received packet error CRC.");
 8009a96:	4908      	ldr	r1, [pc, #32]	; (8009ab8 <_Z18lora_event_handlerPvh+0xa0>)
 8009a98:	4803      	ldr	r0, [pc, #12]	; (8009aa8 <_Z18lora_event_handlerPvh+0x90>)
 8009a9a:	f7ff fd27 	bl	80094ec <LOG_ERROR>
}
 8009a9e:	b009      	add	sp, #36	; 0x24
 8009aa0:	bd30      	pop	{r4, r5, pc}
 8009aa2:	bf00      	nop
 8009aa4:	2000b980 	.word	0x2000b980
 8009aa8:	0800dc50 	.word	0x0800dc50
 8009aac:	0800dc84 	.word	0x0800dc84
 8009ab0:	2000b9ac 	.word	0x2000b9ac
 8009ab4:	0800dcbc 	.word	0x0800dcbc
 8009ab8:	0800dcd8 	.word	0x0800dcd8

08009abc <_Z8app_mainv>:
void app_main(void){
 8009abc:	b500      	push	{lr}
 8009abe:	b083      	sub	sp, #12
	HAL_Driver_Init();
 8009ac0:	f7f7 fa86 	bl	8000fd0 <HAL_Driver_Init>
	gpio_port_clock_enable(GPIOC);
 8009ac4:	4813      	ldr	r0, [pc, #76]	; (8009b14 <_Z8app_mainv+0x58>)
 8009ac6:	f7fd f9dd 	bl	8006e84 <gpio_port_clock_enable>
	xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 5, NULL);
 8009aca:	2400      	movs	r4, #0
	gpio_set_mode(GPIOC, 13, GPIO_OUTPUT_PUSHPULL);
 8009acc:	4811      	ldr	r0, [pc, #68]	; (8009b14 <_Z8app_mainv+0x58>)
 8009ace:	2206      	movs	r2, #6
 8009ad0:	210d      	movs	r1, #13
	xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 5, NULL);
 8009ad2:	2505      	movs	r5, #5
	gpio_set_mode(GPIOC, 13, GPIO_OUTPUT_PUSHPULL);
 8009ad4:	f7fd fa3c 	bl	8006f50 <gpio_set_mode>
	xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 5, NULL);
 8009ad8:	4623      	mov	r3, r4
 8009ada:	e9cd 5400 	strd	r5, r4, [sp]
 8009ade:	490e      	ldr	r1, [pc, #56]	; (8009b18 <_Z8app_mainv+0x5c>)
 8009ae0:	480e      	ldr	r0, [pc, #56]	; (8009b1c <_Z8app_mainv+0x60>)
 8009ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ae6:	f7f9 fbdd 	bl	80032a4 <xTaskCreate>
	xTaskCreate(task_loratx, "task_loratx", byte_to_word(8192), NULL, 5, NULL);
 8009aea:	e9cd 5400 	strd	r5, r4, [sp]
 8009aee:	4623      	mov	r3, r4
 8009af0:	490b      	ldr	r1, [pc, #44]	; (8009b20 <_Z8app_mainv+0x64>)
 8009af2:	480c      	ldr	r0, [pc, #48]	; (8009b24 <_Z8app_mainv+0x68>)
 8009af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009af8:	f7f9 fbd4 	bl	80032a4 <xTaskCreate>
		gpio_toggle(GPIOC, 13);
 8009afc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8009b00:	f504 3402 	add.w	r4, r4, #133120	; 0x20800
 8009b04:	4620      	mov	r0, r4
 8009b06:	210d      	movs	r1, #13
 8009b08:	f7fd fb0a 	bl	8007120 <gpio_toggle>
		vTaskDelay(100);
 8009b0c:	2064      	movs	r0, #100	; 0x64
 8009b0e:	f7f9 fe77 	bl	8003800 <vTaskDelay>
	while(1){
 8009b12:	e7f7      	b.n	8009b04 <_Z8app_mainv+0x48>
 8009b14:	40020800 	.word	0x40020800
 8009b18:	0800dcf8 	.word	0x0800dcf8
 8009b1c:	080098a5 	.word	0x080098a5
 8009b20:	0800dd04 	.word	0x0800dd04
 8009b24:	08009895 	.word	0x08009895

08009b28 <_GLOBAL__sub_I_spi5_conf>:

		wifiif_set_response_state(rxdata);

		usart1->receive_to_idle_start_it(WF_BUFF_SIZE);
	}
}
 8009b28:	b500      	push	{lr}
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 8009b2a:	4908      	ldr	r1, [pc, #32]	; (8009b4c <_GLOBAL__sub_I_spi5_conf+0x24>)
 8009b2c:	4b08      	ldr	r3, [pc, #32]	; (8009b50 <_GLOBAL__sub_I_spi5_conf+0x28>)
}
 8009b2e:	b085      	sub	sp, #20
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 8009b30:	2000      	movs	r0, #0
 8009b32:	2203      	movs	r2, #3
 8009b34:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8009b38:	9200      	str	r2, [sp, #0]
 8009b3a:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8009b3e:	2206      	movs	r2, #6
 8009b40:	4804      	ldr	r0, [pc, #16]	; (8009b54 <_GLOBAL__sub_I_spi5_conf+0x2c>)
 8009b42:	f7fb fbed 	bl	8005320 <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>
}
 8009b46:	b005      	add	sp, #20
 8009b48:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b4c:	40020000 	.word	0x40020000
 8009b50:	40021000 	.word	0x40021000
 8009b54:	2000b980 	.word	0x2000b980

08009b58 <_ZdlPvj>:
 8009b58:	f000 b81d 	b.w	8009b96 <_ZdlPv>

08009b5c <_Znwj>:
 8009b5c:	2801      	cmp	r0, #1
 8009b5e:	bf38      	it	cc
 8009b60:	2001      	movcc	r0, #1
 8009b62:	b510      	push	{r4, lr}
 8009b64:	4604      	mov	r4, r0
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 f8b2 	bl	8009cd0 <malloc>
 8009b6c:	b930      	cbnz	r0, 8009b7c <_Znwj+0x20>
 8009b6e:	f000 f815 	bl	8009b9c <_ZSt15get_new_handlerv>
 8009b72:	b908      	cbnz	r0, 8009b78 <_Znwj+0x1c>
 8009b74:	f000 f85c 	bl	8009c30 <abort>
 8009b78:	4780      	blx	r0
 8009b7a:	e7f4      	b.n	8009b66 <_Znwj+0xa>
 8009b7c:	bd10      	pop	{r4, pc}

08009b7e <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8009b7e:	684b      	ldr	r3, [r1, #4]
 8009b80:	6043      	str	r3, [r0, #4]
 8009b82:	684b      	ldr	r3, [r1, #4]
 8009b84:	6001      	str	r1, [r0, #0]
 8009b86:	6018      	str	r0, [r3, #0]
 8009b88:	6048      	str	r0, [r1, #4]
 8009b8a:	4770      	bx	lr

08009b8c <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8009b8c:	e9d0 3200 	ldrd	r3, r2, [r0]
 8009b90:	6013      	str	r3, [r2, #0]
 8009b92:	605a      	str	r2, [r3, #4]
 8009b94:	4770      	bx	lr

08009b96 <_ZdlPv>:
 8009b96:	f000 b8a3 	b.w	8009ce0 <free>
	...

08009b9c <_ZSt15get_new_handlerv>:
 8009b9c:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <_ZSt15get_new_handlerv+0xc>)
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	f3bf 8f5b 	dmb	ish
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	2000b9b0 	.word	0x2000b9b0

08009bac <ceilf>:
 8009bac:	ee10 3a10 	vmov	r3, s0
 8009bb0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009bb4:	3a7f      	subs	r2, #127	; 0x7f
 8009bb6:	2a16      	cmp	r2, #22
 8009bb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009bbc:	dc2a      	bgt.n	8009c14 <ceilf+0x68>
 8009bbe:	2a00      	cmp	r2, #0
 8009bc0:	da11      	bge.n	8009be6 <ceilf+0x3a>
 8009bc2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8009c28 <ceilf+0x7c>
 8009bc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009bca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd2:	dd05      	ble.n	8009be0 <ceilf+0x34>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	db23      	blt.n	8009c20 <ceilf+0x74>
 8009bd8:	2900      	cmp	r1, #0
 8009bda:	bf18      	it	ne
 8009bdc:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8009be0:	ee00 3a10 	vmov	s0, r3
 8009be4:	4770      	bx	lr
 8009be6:	4911      	ldr	r1, [pc, #68]	; (8009c2c <ceilf+0x80>)
 8009be8:	4111      	asrs	r1, r2
 8009bea:	420b      	tst	r3, r1
 8009bec:	d0fa      	beq.n	8009be4 <ceilf+0x38>
 8009bee:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009c28 <ceilf+0x7c>
 8009bf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009bf6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bfe:	ddef      	ble.n	8009be0 <ceilf+0x34>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bfc2      	ittt	gt
 8009c04:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8009c08:	fa40 f202 	asrgt.w	r2, r0, r2
 8009c0c:	189b      	addgt	r3, r3, r2
 8009c0e:	ea23 0301 	bic.w	r3, r3, r1
 8009c12:	e7e5      	b.n	8009be0 <ceilf+0x34>
 8009c14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009c18:	d3e4      	bcc.n	8009be4 <ceilf+0x38>
 8009c1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c1e:	4770      	bx	lr
 8009c20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c24:	e7dc      	b.n	8009be0 <ceilf+0x34>
 8009c26:	bf00      	nop
 8009c28:	7149f2ca 	.word	0x7149f2ca
 8009c2c:	007fffff 	.word	0x007fffff

08009c30 <abort>:
 8009c30:	b508      	push	{r3, lr}
 8009c32:	2006      	movs	r0, #6
 8009c34:	f000 ffbe 	bl	800abb4 <raise>
 8009c38:	2001      	movs	r0, #1
 8009c3a:	f7f7 fa9d 	bl	8001178 <_exit>
	...

08009c40 <asiprintf>:
 8009c40:	b40e      	push	{r1, r2, r3}
 8009c42:	b530      	push	{r4, r5, lr}
 8009c44:	b09c      	sub	sp, #112	; 0x70
 8009c46:	ab1f      	add	r3, sp, #124	; 0x7c
 8009c48:	4605      	mov	r5, r0
 8009c4a:	490d      	ldr	r1, [pc, #52]	; (8009c80 <asiprintf+0x40>)
 8009c4c:	480d      	ldr	r0, [pc, #52]	; (8009c84 <asiprintf+0x44>)
 8009c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c52:	6800      	ldr	r0, [r0, #0]
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	2400      	movs	r4, #0
 8009c58:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8009c5c:	a902      	add	r1, sp, #8
 8009c5e:	9402      	str	r4, [sp, #8]
 8009c60:	9404      	str	r4, [sp, #16]
 8009c62:	9407      	str	r4, [sp, #28]
 8009c64:	f000 fa04 	bl	800a070 <_svfiprintf_r>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	bfa1      	itttt	ge
 8009c6c:	9b02      	ldrge	r3, [sp, #8]
 8009c6e:	701c      	strbge	r4, [r3, #0]
 8009c70:	9b06      	ldrge	r3, [sp, #24]
 8009c72:	602b      	strge	r3, [r5, #0]
 8009c74:	b01c      	add	sp, #112	; 0x70
 8009c76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c7a:	b003      	add	sp, #12
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	ffff0288 	.word	0xffff0288
 8009c84:	200000dc 	.word	0x200000dc

08009c88 <__libc_init_array>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	4d0d      	ldr	r5, [pc, #52]	; (8009cc0 <__libc_init_array+0x38>)
 8009c8c:	4c0d      	ldr	r4, [pc, #52]	; (8009cc4 <__libc_init_array+0x3c>)
 8009c8e:	1b64      	subs	r4, r4, r5
 8009c90:	10a4      	asrs	r4, r4, #2
 8009c92:	2600      	movs	r6, #0
 8009c94:	42a6      	cmp	r6, r4
 8009c96:	d109      	bne.n	8009cac <__libc_init_array+0x24>
 8009c98:	4d0b      	ldr	r5, [pc, #44]	; (8009cc8 <__libc_init_array+0x40>)
 8009c9a:	4c0c      	ldr	r4, [pc, #48]	; (8009ccc <__libc_init_array+0x44>)
 8009c9c:	f002 fff4 	bl	800cc88 <_init>
 8009ca0:	1b64      	subs	r4, r4, r5
 8009ca2:	10a4      	asrs	r4, r4, #2
 8009ca4:	2600      	movs	r6, #0
 8009ca6:	42a6      	cmp	r6, r4
 8009ca8:	d105      	bne.n	8009cb6 <__libc_init_array+0x2e>
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb0:	4798      	blx	r3
 8009cb2:	3601      	adds	r6, #1
 8009cb4:	e7ee      	b.n	8009c94 <__libc_init_array+0xc>
 8009cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cba:	4798      	blx	r3
 8009cbc:	3601      	adds	r6, #1
 8009cbe:	e7f2      	b.n	8009ca6 <__libc_init_array+0x1e>
 8009cc0:	0800e0f8 	.word	0x0800e0f8
 8009cc4:	0800e0f8 	.word	0x0800e0f8
 8009cc8:	0800e0f8 	.word	0x0800e0f8
 8009ccc:	0800e11c 	.word	0x0800e11c

08009cd0 <malloc>:
 8009cd0:	4b02      	ldr	r3, [pc, #8]	; (8009cdc <malloc+0xc>)
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	f000 b8fb 	b.w	8009ed0 <_malloc_r>
 8009cda:	bf00      	nop
 8009cdc:	200000dc 	.word	0x200000dc

08009ce0 <free>:
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <free+0xc>)
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	f000 b853 	b.w	8009d90 <_free_r>
 8009cea:	bf00      	nop
 8009cec:	200000dc 	.word	0x200000dc

08009cf0 <memcpy>:
 8009cf0:	440a      	add	r2, r1
 8009cf2:	4291      	cmp	r1, r2
 8009cf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009cf8:	d100      	bne.n	8009cfc <memcpy+0xc>
 8009cfa:	4770      	bx	lr
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d06:	4291      	cmp	r1, r2
 8009d08:	d1f9      	bne.n	8009cfe <memcpy+0xe>
 8009d0a:	bd10      	pop	{r4, pc}

08009d0c <memmove>:
 8009d0c:	4288      	cmp	r0, r1
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	eb01 0402 	add.w	r4, r1, r2
 8009d14:	d902      	bls.n	8009d1c <memmove+0x10>
 8009d16:	4284      	cmp	r4, r0
 8009d18:	4623      	mov	r3, r4
 8009d1a:	d807      	bhi.n	8009d2c <memmove+0x20>
 8009d1c:	1e43      	subs	r3, r0, #1
 8009d1e:	42a1      	cmp	r1, r4
 8009d20:	d008      	beq.n	8009d34 <memmove+0x28>
 8009d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d2a:	e7f8      	b.n	8009d1e <memmove+0x12>
 8009d2c:	4402      	add	r2, r0
 8009d2e:	4601      	mov	r1, r0
 8009d30:	428a      	cmp	r2, r1
 8009d32:	d100      	bne.n	8009d36 <memmove+0x2a>
 8009d34:	bd10      	pop	{r4, pc}
 8009d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d3e:	e7f7      	b.n	8009d30 <memmove+0x24>

08009d40 <memset>:
 8009d40:	4402      	add	r2, r0
 8009d42:	4603      	mov	r3, r0
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d100      	bne.n	8009d4a <memset+0xa>
 8009d48:	4770      	bx	lr
 8009d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d4e:	e7f9      	b.n	8009d44 <memset+0x4>

08009d50 <mallinfo>:
 8009d50:	b510      	push	{r4, lr}
 8009d52:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <mallinfo+0x10>)
 8009d54:	4604      	mov	r4, r0
 8009d56:	6819      	ldr	r1, [r3, #0]
 8009d58:	f000 f866 	bl	8009e28 <_mallinfo_r>
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	bd10      	pop	{r4, pc}
 8009d60:	200000dc 	.word	0x200000dc

08009d64 <_calloc_r>:
 8009d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d66:	fba1 2402 	umull	r2, r4, r1, r2
 8009d6a:	b94c      	cbnz	r4, 8009d80 <_calloc_r+0x1c>
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	9201      	str	r2, [sp, #4]
 8009d70:	f000 f8ae 	bl	8009ed0 <_malloc_r>
 8009d74:	9a01      	ldr	r2, [sp, #4]
 8009d76:	4605      	mov	r5, r0
 8009d78:	b930      	cbnz	r0, 8009d88 <_calloc_r+0x24>
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	b003      	add	sp, #12
 8009d7e:	bd30      	pop	{r4, r5, pc}
 8009d80:	220c      	movs	r2, #12
 8009d82:	6002      	str	r2, [r0, #0]
 8009d84:	2500      	movs	r5, #0
 8009d86:	e7f8      	b.n	8009d7a <_calloc_r+0x16>
 8009d88:	4621      	mov	r1, r4
 8009d8a:	f7ff ffd9 	bl	8009d40 <memset>
 8009d8e:	e7f4      	b.n	8009d7a <_calloc_r+0x16>

08009d90 <_free_r>:
 8009d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d92:	2900      	cmp	r1, #0
 8009d94:	d044      	beq.n	8009e20 <_free_r+0x90>
 8009d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d9a:	9001      	str	r0, [sp, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009da2:	bfb8      	it	lt
 8009da4:	18e4      	addlt	r4, r4, r3
 8009da6:	f001 ff9b 	bl	800bce0 <__malloc_lock>
 8009daa:	4a1e      	ldr	r2, [pc, #120]	; (8009e24 <_free_r+0x94>)
 8009dac:	9801      	ldr	r0, [sp, #4]
 8009dae:	6813      	ldr	r3, [r2, #0]
 8009db0:	b933      	cbnz	r3, 8009dc0 <_free_r+0x30>
 8009db2:	6063      	str	r3, [r4, #4]
 8009db4:	6014      	str	r4, [r2, #0]
 8009db6:	b003      	add	sp, #12
 8009db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dbc:	f001 bf96 	b.w	800bcec <__malloc_unlock>
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	d908      	bls.n	8009dd6 <_free_r+0x46>
 8009dc4:	6825      	ldr	r5, [r4, #0]
 8009dc6:	1961      	adds	r1, r4, r5
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf01      	itttt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	1949      	addeq	r1, r1, r5
 8009dd2:	6021      	streq	r1, [r4, #0]
 8009dd4:	e7ed      	b.n	8009db2 <_free_r+0x22>
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	b10b      	cbz	r3, 8009de0 <_free_r+0x50>
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	d9fa      	bls.n	8009dd6 <_free_r+0x46>
 8009de0:	6811      	ldr	r1, [r2, #0]
 8009de2:	1855      	adds	r5, r2, r1
 8009de4:	42a5      	cmp	r5, r4
 8009de6:	d10b      	bne.n	8009e00 <_free_r+0x70>
 8009de8:	6824      	ldr	r4, [r4, #0]
 8009dea:	4421      	add	r1, r4
 8009dec:	1854      	adds	r4, r2, r1
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	6011      	str	r1, [r2, #0]
 8009df2:	d1e0      	bne.n	8009db6 <_free_r+0x26>
 8009df4:	681c      	ldr	r4, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	6053      	str	r3, [r2, #4]
 8009dfa:	4421      	add	r1, r4
 8009dfc:	6011      	str	r1, [r2, #0]
 8009dfe:	e7da      	b.n	8009db6 <_free_r+0x26>
 8009e00:	d902      	bls.n	8009e08 <_free_r+0x78>
 8009e02:	230c      	movs	r3, #12
 8009e04:	6003      	str	r3, [r0, #0]
 8009e06:	e7d6      	b.n	8009db6 <_free_r+0x26>
 8009e08:	6825      	ldr	r5, [r4, #0]
 8009e0a:	1961      	adds	r1, r4, r5
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	bf04      	itt	eq
 8009e10:	6819      	ldreq	r1, [r3, #0]
 8009e12:	685b      	ldreq	r3, [r3, #4]
 8009e14:	6063      	str	r3, [r4, #4]
 8009e16:	bf04      	itt	eq
 8009e18:	1949      	addeq	r1, r1, r5
 8009e1a:	6021      	streq	r1, [r4, #0]
 8009e1c:	6054      	str	r4, [r2, #4]
 8009e1e:	e7ca      	b.n	8009db6 <_free_r+0x26>
 8009e20:	b003      	add	sp, #12
 8009e22:	bd30      	pop	{r4, r5, pc}
 8009e24:	2000b9dc 	.word	0x2000b9dc

08009e28 <_mallinfo_r>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	4c16      	ldr	r4, [pc, #88]	; (8009e84 <_mallinfo_r+0x5c>)
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	4608      	mov	r0, r1
 8009e30:	460e      	mov	r6, r1
 8009e32:	f001 ff55 	bl	800bce0 <__malloc_lock>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	b143      	cbz	r3, 8009e4c <_mallinfo_r+0x24>
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f000 fe81 	bl	800ab44 <_sbrk_r>
 8009e42:	1c42      	adds	r2, r0, #1
 8009e44:	4603      	mov	r3, r0
 8009e46:	bf1c      	itt	ne
 8009e48:	6820      	ldrne	r0, [r4, #0]
 8009e4a:	1a1b      	subne	r3, r3, r0
 8009e4c:	4a0e      	ldr	r2, [pc, #56]	; (8009e88 <_mallinfo_r+0x60>)
 8009e4e:	6812      	ldr	r2, [r2, #0]
 8009e50:	2000      	movs	r0, #0
 8009e52:	b992      	cbnz	r2, 8009e7a <_mallinfo_r+0x52>
 8009e54:	4c0d      	ldr	r4, [pc, #52]	; (8009e8c <_mallinfo_r+0x64>)
 8009e56:	6023      	str	r3, [r4, #0]
 8009e58:	6220      	str	r0, [r4, #32]
 8009e5a:	1a1b      	subs	r3, r3, r0
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	61e3      	str	r3, [r4, #28]
 8009e60:	f001 ff44 	bl	800bcec <__malloc_unlock>
 8009e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e66:	462e      	mov	r6, r5
 8009e68:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009e6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009e72:	e886 0003 	stmia.w	r6, {r0, r1}
 8009e76:	4628      	mov	r0, r5
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
 8009e7a:	6811      	ldr	r1, [r2, #0]
 8009e7c:	6852      	ldr	r2, [r2, #4]
 8009e7e:	4408      	add	r0, r1
 8009e80:	e7e7      	b.n	8009e52 <_mallinfo_r+0x2a>
 8009e82:	bf00      	nop
 8009e84:	2000b9e0 	.word	0x2000b9e0
 8009e88:	2000b9dc 	.word	0x2000b9dc
 8009e8c:	2000b9b4 	.word	0x2000b9b4

08009e90 <sbrk_aligned>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	4e0e      	ldr	r6, [pc, #56]	; (8009ecc <sbrk_aligned+0x3c>)
 8009e94:	460c      	mov	r4, r1
 8009e96:	6831      	ldr	r1, [r6, #0]
 8009e98:	4605      	mov	r5, r0
 8009e9a:	b911      	cbnz	r1, 8009ea2 <sbrk_aligned+0x12>
 8009e9c:	f000 fe52 	bl	800ab44 <_sbrk_r>
 8009ea0:	6030      	str	r0, [r6, #0]
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f000 fe4d 	bl	800ab44 <_sbrk_r>
 8009eaa:	1c43      	adds	r3, r0, #1
 8009eac:	d00a      	beq.n	8009ec4 <sbrk_aligned+0x34>
 8009eae:	1cc4      	adds	r4, r0, #3
 8009eb0:	f024 0403 	bic.w	r4, r4, #3
 8009eb4:	42a0      	cmp	r0, r4
 8009eb6:	d007      	beq.n	8009ec8 <sbrk_aligned+0x38>
 8009eb8:	1a21      	subs	r1, r4, r0
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f000 fe42 	bl	800ab44 <_sbrk_r>
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d101      	bne.n	8009ec8 <sbrk_aligned+0x38>
 8009ec4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ec8:	4620      	mov	r0, r4
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	2000b9e0 	.word	0x2000b9e0

08009ed0 <_malloc_r>:
 8009ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed4:	1ccd      	adds	r5, r1, #3
 8009ed6:	f025 0503 	bic.w	r5, r5, #3
 8009eda:	3508      	adds	r5, #8
 8009edc:	2d0c      	cmp	r5, #12
 8009ede:	bf38      	it	cc
 8009ee0:	250c      	movcc	r5, #12
 8009ee2:	2d00      	cmp	r5, #0
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	db01      	blt.n	8009eec <_malloc_r+0x1c>
 8009ee8:	42a9      	cmp	r1, r5
 8009eea:	d905      	bls.n	8009ef8 <_malloc_r+0x28>
 8009eec:	230c      	movs	r3, #12
 8009eee:	603b      	str	r3, [r7, #0]
 8009ef0:	2600      	movs	r6, #0
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef8:	4e2e      	ldr	r6, [pc, #184]	; (8009fb4 <_malloc_r+0xe4>)
 8009efa:	f001 fef1 	bl	800bce0 <__malloc_lock>
 8009efe:	6833      	ldr	r3, [r6, #0]
 8009f00:	461c      	mov	r4, r3
 8009f02:	bb34      	cbnz	r4, 8009f52 <_malloc_r+0x82>
 8009f04:	4629      	mov	r1, r5
 8009f06:	4638      	mov	r0, r7
 8009f08:	f7ff ffc2 	bl	8009e90 <sbrk_aligned>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	4604      	mov	r4, r0
 8009f10:	d14d      	bne.n	8009fae <_malloc_r+0xde>
 8009f12:	6834      	ldr	r4, [r6, #0]
 8009f14:	4626      	mov	r6, r4
 8009f16:	2e00      	cmp	r6, #0
 8009f18:	d140      	bne.n	8009f9c <_malloc_r+0xcc>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	4638      	mov	r0, r7
 8009f20:	eb04 0803 	add.w	r8, r4, r3
 8009f24:	f000 fe0e 	bl	800ab44 <_sbrk_r>
 8009f28:	4580      	cmp	r8, r0
 8009f2a:	d13a      	bne.n	8009fa2 <_malloc_r+0xd2>
 8009f2c:	6821      	ldr	r1, [r4, #0]
 8009f2e:	3503      	adds	r5, #3
 8009f30:	1a6d      	subs	r5, r5, r1
 8009f32:	f025 0503 	bic.w	r5, r5, #3
 8009f36:	3508      	adds	r5, #8
 8009f38:	2d0c      	cmp	r5, #12
 8009f3a:	bf38      	it	cc
 8009f3c:	250c      	movcc	r5, #12
 8009f3e:	4629      	mov	r1, r5
 8009f40:	4638      	mov	r0, r7
 8009f42:	f7ff ffa5 	bl	8009e90 <sbrk_aligned>
 8009f46:	3001      	adds	r0, #1
 8009f48:	d02b      	beq.n	8009fa2 <_malloc_r+0xd2>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	442b      	add	r3, r5
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	e00e      	b.n	8009f70 <_malloc_r+0xa0>
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	1b52      	subs	r2, r2, r5
 8009f56:	d41e      	bmi.n	8009f96 <_malloc_r+0xc6>
 8009f58:	2a0b      	cmp	r2, #11
 8009f5a:	d916      	bls.n	8009f8a <_malloc_r+0xba>
 8009f5c:	1961      	adds	r1, r4, r5
 8009f5e:	42a3      	cmp	r3, r4
 8009f60:	6025      	str	r5, [r4, #0]
 8009f62:	bf18      	it	ne
 8009f64:	6059      	strne	r1, [r3, #4]
 8009f66:	6863      	ldr	r3, [r4, #4]
 8009f68:	bf08      	it	eq
 8009f6a:	6031      	streq	r1, [r6, #0]
 8009f6c:	5162      	str	r2, [r4, r5]
 8009f6e:	604b      	str	r3, [r1, #4]
 8009f70:	4638      	mov	r0, r7
 8009f72:	f104 060b 	add.w	r6, r4, #11
 8009f76:	f001 feb9 	bl	800bcec <__malloc_unlock>
 8009f7a:	f026 0607 	bic.w	r6, r6, #7
 8009f7e:	1d23      	adds	r3, r4, #4
 8009f80:	1af2      	subs	r2, r6, r3
 8009f82:	d0b6      	beq.n	8009ef2 <_malloc_r+0x22>
 8009f84:	1b9b      	subs	r3, r3, r6
 8009f86:	50a3      	str	r3, [r4, r2]
 8009f88:	e7b3      	b.n	8009ef2 <_malloc_r+0x22>
 8009f8a:	6862      	ldr	r2, [r4, #4]
 8009f8c:	42a3      	cmp	r3, r4
 8009f8e:	bf0c      	ite	eq
 8009f90:	6032      	streq	r2, [r6, #0]
 8009f92:	605a      	strne	r2, [r3, #4]
 8009f94:	e7ec      	b.n	8009f70 <_malloc_r+0xa0>
 8009f96:	4623      	mov	r3, r4
 8009f98:	6864      	ldr	r4, [r4, #4]
 8009f9a:	e7b2      	b.n	8009f02 <_malloc_r+0x32>
 8009f9c:	4634      	mov	r4, r6
 8009f9e:	6876      	ldr	r6, [r6, #4]
 8009fa0:	e7b9      	b.n	8009f16 <_malloc_r+0x46>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	603b      	str	r3, [r7, #0]
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	f001 fea0 	bl	800bcec <__malloc_unlock>
 8009fac:	e7a1      	b.n	8009ef2 <_malloc_r+0x22>
 8009fae:	6025      	str	r5, [r4, #0]
 8009fb0:	e7de      	b.n	8009f70 <_malloc_r+0xa0>
 8009fb2:	bf00      	nop
 8009fb4:	2000b9dc 	.word	0x2000b9dc

08009fb8 <__ssputs_r>:
 8009fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	688e      	ldr	r6, [r1, #8]
 8009fbe:	429e      	cmp	r6, r3
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	4690      	mov	r8, r2
 8009fc6:	461f      	mov	r7, r3
 8009fc8:	d838      	bhi.n	800a03c <__ssputs_r+0x84>
 8009fca:	898a      	ldrh	r2, [r1, #12]
 8009fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fd0:	d032      	beq.n	800a038 <__ssputs_r+0x80>
 8009fd2:	6825      	ldr	r5, [r4, #0]
 8009fd4:	6909      	ldr	r1, [r1, #16]
 8009fd6:	eba5 0901 	sub.w	r9, r5, r1
 8009fda:	6965      	ldr	r5, [r4, #20]
 8009fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	444b      	add	r3, r9
 8009fe8:	106d      	asrs	r5, r5, #1
 8009fea:	429d      	cmp	r5, r3
 8009fec:	bf38      	it	cc
 8009fee:	461d      	movcc	r5, r3
 8009ff0:	0553      	lsls	r3, r2, #21
 8009ff2:	d531      	bpl.n	800a058 <__ssputs_r+0xa0>
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	f7ff ff6b 	bl	8009ed0 <_malloc_r>
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	b950      	cbnz	r0, 800a014 <__ssputs_r+0x5c>
 8009ffe:	230c      	movs	r3, #12
 800a000:	f8ca 3000 	str.w	r3, [sl]
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a014:	6921      	ldr	r1, [r4, #16]
 800a016:	464a      	mov	r2, r9
 800a018:	f7ff fe6a 	bl	8009cf0 <memcpy>
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	6126      	str	r6, [r4, #16]
 800a02a:	6165      	str	r5, [r4, #20]
 800a02c:	444e      	add	r6, r9
 800a02e:	eba5 0509 	sub.w	r5, r5, r9
 800a032:	6026      	str	r6, [r4, #0]
 800a034:	60a5      	str	r5, [r4, #8]
 800a036:	463e      	mov	r6, r7
 800a038:	42be      	cmp	r6, r7
 800a03a:	d900      	bls.n	800a03e <__ssputs_r+0x86>
 800a03c:	463e      	mov	r6, r7
 800a03e:	6820      	ldr	r0, [r4, #0]
 800a040:	4632      	mov	r2, r6
 800a042:	4641      	mov	r1, r8
 800a044:	f7ff fe62 	bl	8009d0c <memmove>
 800a048:	68a3      	ldr	r3, [r4, #8]
 800a04a:	1b9b      	subs	r3, r3, r6
 800a04c:	60a3      	str	r3, [r4, #8]
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	4433      	add	r3, r6
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	2000      	movs	r0, #0
 800a056:	e7db      	b.n	800a010 <__ssputs_r+0x58>
 800a058:	462a      	mov	r2, r5
 800a05a:	f002 f9d1 	bl	800c400 <_realloc_r>
 800a05e:	4606      	mov	r6, r0
 800a060:	2800      	cmp	r0, #0
 800a062:	d1e1      	bne.n	800a028 <__ssputs_r+0x70>
 800a064:	6921      	ldr	r1, [r4, #16]
 800a066:	4650      	mov	r0, sl
 800a068:	f7ff fe92 	bl	8009d90 <_free_r>
 800a06c:	e7c7      	b.n	8009ffe <__ssputs_r+0x46>
	...

0800a070 <_svfiprintf_r>:
 800a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	4698      	mov	r8, r3
 800a076:	898b      	ldrh	r3, [r1, #12]
 800a078:	061b      	lsls	r3, r3, #24
 800a07a:	b09d      	sub	sp, #116	; 0x74
 800a07c:	4607      	mov	r7, r0
 800a07e:	460d      	mov	r5, r1
 800a080:	4614      	mov	r4, r2
 800a082:	d50e      	bpl.n	800a0a2 <_svfiprintf_r+0x32>
 800a084:	690b      	ldr	r3, [r1, #16]
 800a086:	b963      	cbnz	r3, 800a0a2 <_svfiprintf_r+0x32>
 800a088:	2140      	movs	r1, #64	; 0x40
 800a08a:	f7ff ff21 	bl	8009ed0 <_malloc_r>
 800a08e:	6028      	str	r0, [r5, #0]
 800a090:	6128      	str	r0, [r5, #16]
 800a092:	b920      	cbnz	r0, 800a09e <_svfiprintf_r+0x2e>
 800a094:	230c      	movs	r3, #12
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a09c:	e0d1      	b.n	800a242 <_svfiprintf_r+0x1d2>
 800a09e:	2340      	movs	r3, #64	; 0x40
 800a0a0:	616b      	str	r3, [r5, #20]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a6:	2320      	movs	r3, #32
 800a0a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0b0:	2330      	movs	r3, #48	; 0x30
 800a0b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a25c <_svfiprintf_r+0x1ec>
 800a0b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ba:	f04f 0901 	mov.w	r9, #1
 800a0be:	4623      	mov	r3, r4
 800a0c0:	469a      	mov	sl, r3
 800a0c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0c6:	b10a      	cbz	r2, 800a0cc <_svfiprintf_r+0x5c>
 800a0c8:	2a25      	cmp	r2, #37	; 0x25
 800a0ca:	d1f9      	bne.n	800a0c0 <_svfiprintf_r+0x50>
 800a0cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a0d0:	d00b      	beq.n	800a0ea <_svfiprintf_r+0x7a>
 800a0d2:	465b      	mov	r3, fp
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f7ff ff6d 	bl	8009fb8 <__ssputs_r>
 800a0de:	3001      	adds	r0, #1
 800a0e0:	f000 80aa 	beq.w	800a238 <_svfiprintf_r+0x1c8>
 800a0e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0e6:	445a      	add	r2, fp
 800a0e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f000 80a2 	beq.w	800a238 <_svfiprintf_r+0x1c8>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0fe:	f10a 0a01 	add.w	sl, sl, #1
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	9307      	str	r3, [sp, #28]
 800a106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a10a:	931a      	str	r3, [sp, #104]	; 0x68
 800a10c:	4654      	mov	r4, sl
 800a10e:	2205      	movs	r2, #5
 800a110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a114:	4851      	ldr	r0, [pc, #324]	; (800a25c <_svfiprintf_r+0x1ec>)
 800a116:	f7f6 f883 	bl	8000220 <memchr>
 800a11a:	9a04      	ldr	r2, [sp, #16]
 800a11c:	b9d8      	cbnz	r0, 800a156 <_svfiprintf_r+0xe6>
 800a11e:	06d0      	lsls	r0, r2, #27
 800a120:	bf44      	itt	mi
 800a122:	2320      	movmi	r3, #32
 800a124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a128:	0711      	lsls	r1, r2, #28
 800a12a:	bf44      	itt	mi
 800a12c:	232b      	movmi	r3, #43	; 0x2b
 800a12e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a132:	f89a 3000 	ldrb.w	r3, [sl]
 800a136:	2b2a      	cmp	r3, #42	; 0x2a
 800a138:	d015      	beq.n	800a166 <_svfiprintf_r+0xf6>
 800a13a:	9a07      	ldr	r2, [sp, #28]
 800a13c:	4654      	mov	r4, sl
 800a13e:	2000      	movs	r0, #0
 800a140:	f04f 0c0a 	mov.w	ip, #10
 800a144:	4621      	mov	r1, r4
 800a146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a14a:	3b30      	subs	r3, #48	; 0x30
 800a14c:	2b09      	cmp	r3, #9
 800a14e:	d94e      	bls.n	800a1ee <_svfiprintf_r+0x17e>
 800a150:	b1b0      	cbz	r0, 800a180 <_svfiprintf_r+0x110>
 800a152:	9207      	str	r2, [sp, #28]
 800a154:	e014      	b.n	800a180 <_svfiprintf_r+0x110>
 800a156:	eba0 0308 	sub.w	r3, r0, r8
 800a15a:	fa09 f303 	lsl.w	r3, r9, r3
 800a15e:	4313      	orrs	r3, r2
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	46a2      	mov	sl, r4
 800a164:	e7d2      	b.n	800a10c <_svfiprintf_r+0x9c>
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	1d19      	adds	r1, r3, #4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	9103      	str	r1, [sp, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bfbb      	ittet	lt
 800a172:	425b      	neglt	r3, r3
 800a174:	f042 0202 	orrlt.w	r2, r2, #2
 800a178:	9307      	strge	r3, [sp, #28]
 800a17a:	9307      	strlt	r3, [sp, #28]
 800a17c:	bfb8      	it	lt
 800a17e:	9204      	strlt	r2, [sp, #16]
 800a180:	7823      	ldrb	r3, [r4, #0]
 800a182:	2b2e      	cmp	r3, #46	; 0x2e
 800a184:	d10c      	bne.n	800a1a0 <_svfiprintf_r+0x130>
 800a186:	7863      	ldrb	r3, [r4, #1]
 800a188:	2b2a      	cmp	r3, #42	; 0x2a
 800a18a:	d135      	bne.n	800a1f8 <_svfiprintf_r+0x188>
 800a18c:	9b03      	ldr	r3, [sp, #12]
 800a18e:	1d1a      	adds	r2, r3, #4
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	9203      	str	r2, [sp, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	bfb8      	it	lt
 800a198:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a19c:	3402      	adds	r4, #2
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a26c <_svfiprintf_r+0x1fc>
 800a1a4:	7821      	ldrb	r1, [r4, #0]
 800a1a6:	2203      	movs	r2, #3
 800a1a8:	4650      	mov	r0, sl
 800a1aa:	f7f6 f839 	bl	8000220 <memchr>
 800a1ae:	b140      	cbz	r0, 800a1c2 <_svfiprintf_r+0x152>
 800a1b0:	2340      	movs	r3, #64	; 0x40
 800a1b2:	eba0 000a 	sub.w	r0, r0, sl
 800a1b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ba:	9b04      	ldr	r3, [sp, #16]
 800a1bc:	4303      	orrs	r3, r0
 800a1be:	3401      	adds	r4, #1
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c6:	4826      	ldr	r0, [pc, #152]	; (800a260 <_svfiprintf_r+0x1f0>)
 800a1c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1cc:	2206      	movs	r2, #6
 800a1ce:	f7f6 f827 	bl	8000220 <memchr>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d038      	beq.n	800a248 <_svfiprintf_r+0x1d8>
 800a1d6:	4b23      	ldr	r3, [pc, #140]	; (800a264 <_svfiprintf_r+0x1f4>)
 800a1d8:	bb1b      	cbnz	r3, 800a222 <_svfiprintf_r+0x1b2>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	3307      	adds	r3, #7
 800a1de:	f023 0307 	bic.w	r3, r3, #7
 800a1e2:	3308      	adds	r3, #8
 800a1e4:	9303      	str	r3, [sp, #12]
 800a1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e8:	4433      	add	r3, r6
 800a1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ec:	e767      	b.n	800a0be <_svfiprintf_r+0x4e>
 800a1ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	e7a5      	b.n	800a144 <_svfiprintf_r+0xd4>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	3401      	adds	r4, #1
 800a1fc:	9305      	str	r3, [sp, #20]
 800a1fe:	4619      	mov	r1, r3
 800a200:	f04f 0c0a 	mov.w	ip, #10
 800a204:	4620      	mov	r0, r4
 800a206:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a20a:	3a30      	subs	r2, #48	; 0x30
 800a20c:	2a09      	cmp	r2, #9
 800a20e:	d903      	bls.n	800a218 <_svfiprintf_r+0x1a8>
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0c5      	beq.n	800a1a0 <_svfiprintf_r+0x130>
 800a214:	9105      	str	r1, [sp, #20]
 800a216:	e7c3      	b.n	800a1a0 <_svfiprintf_r+0x130>
 800a218:	fb0c 2101 	mla	r1, ip, r1, r2
 800a21c:	4604      	mov	r4, r0
 800a21e:	2301      	movs	r3, #1
 800a220:	e7f0      	b.n	800a204 <_svfiprintf_r+0x194>
 800a222:	ab03      	add	r3, sp, #12
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	462a      	mov	r2, r5
 800a228:	4b0f      	ldr	r3, [pc, #60]	; (800a268 <_svfiprintf_r+0x1f8>)
 800a22a:	a904      	add	r1, sp, #16
 800a22c:	4638      	mov	r0, r7
 800a22e:	f000 f8bf 	bl	800a3b0 <_printf_float>
 800a232:	1c42      	adds	r2, r0, #1
 800a234:	4606      	mov	r6, r0
 800a236:	d1d6      	bne.n	800a1e6 <_svfiprintf_r+0x176>
 800a238:	89ab      	ldrh	r3, [r5, #12]
 800a23a:	065b      	lsls	r3, r3, #25
 800a23c:	f53f af2c 	bmi.w	800a098 <_svfiprintf_r+0x28>
 800a240:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a242:	b01d      	add	sp, #116	; 0x74
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	ab03      	add	r3, sp, #12
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	462a      	mov	r2, r5
 800a24e:	4b06      	ldr	r3, [pc, #24]	; (800a268 <_svfiprintf_r+0x1f8>)
 800a250:	a904      	add	r1, sp, #16
 800a252:	4638      	mov	r0, r7
 800a254:	f000 fb50 	bl	800a8f8 <_printf_i>
 800a258:	e7eb      	b.n	800a232 <_svfiprintf_r+0x1c2>
 800a25a:	bf00      	nop
 800a25c:	0800de18 	.word	0x0800de18
 800a260:	0800de22 	.word	0x0800de22
 800a264:	0800a3b1 	.word	0x0800a3b1
 800a268:	08009fb9 	.word	0x08009fb9
 800a26c:	0800de1e 	.word	0x0800de1e

0800a270 <__cvt>:
 800a270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a274:	ec55 4b10 	vmov	r4, r5, d0
 800a278:	2d00      	cmp	r5, #0
 800a27a:	460e      	mov	r6, r1
 800a27c:	4619      	mov	r1, r3
 800a27e:	462b      	mov	r3, r5
 800a280:	bfbb      	ittet	lt
 800a282:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a286:	461d      	movlt	r5, r3
 800a288:	2300      	movge	r3, #0
 800a28a:	232d      	movlt	r3, #45	; 0x2d
 800a28c:	700b      	strb	r3, [r1, #0]
 800a28e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a290:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a294:	4691      	mov	r9, r2
 800a296:	f023 0820 	bic.w	r8, r3, #32
 800a29a:	bfbc      	itt	lt
 800a29c:	4622      	movlt	r2, r4
 800a29e:	4614      	movlt	r4, r2
 800a2a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2a4:	d005      	beq.n	800a2b2 <__cvt+0x42>
 800a2a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a2aa:	d100      	bne.n	800a2ae <__cvt+0x3e>
 800a2ac:	3601      	adds	r6, #1
 800a2ae:	2102      	movs	r1, #2
 800a2b0:	e000      	b.n	800a2b4 <__cvt+0x44>
 800a2b2:	2103      	movs	r1, #3
 800a2b4:	ab03      	add	r3, sp, #12
 800a2b6:	9301      	str	r3, [sp, #4]
 800a2b8:	ab02      	add	r3, sp, #8
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	ec45 4b10 	vmov	d0, r4, r5
 800a2c0:	4653      	mov	r3, sl
 800a2c2:	4632      	mov	r2, r6
 800a2c4:	f000 fe08 	bl	800aed8 <_dtoa_r>
 800a2c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a2cc:	4607      	mov	r7, r0
 800a2ce:	d102      	bne.n	800a2d6 <__cvt+0x66>
 800a2d0:	f019 0f01 	tst.w	r9, #1
 800a2d4:	d022      	beq.n	800a31c <__cvt+0xac>
 800a2d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2da:	eb07 0906 	add.w	r9, r7, r6
 800a2de:	d110      	bne.n	800a302 <__cvt+0x92>
 800a2e0:	783b      	ldrb	r3, [r7, #0]
 800a2e2:	2b30      	cmp	r3, #48	; 0x30
 800a2e4:	d10a      	bne.n	800a2fc <__cvt+0x8c>
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	f7f6 fc0b 	bl	8000b08 <__aeabi_dcmpeq>
 800a2f2:	b918      	cbnz	r0, 800a2fc <__cvt+0x8c>
 800a2f4:	f1c6 0601 	rsb	r6, r6, #1
 800a2f8:	f8ca 6000 	str.w	r6, [sl]
 800a2fc:	f8da 3000 	ldr.w	r3, [sl]
 800a300:	4499      	add	r9, r3
 800a302:	2200      	movs	r2, #0
 800a304:	2300      	movs	r3, #0
 800a306:	4620      	mov	r0, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	f7f6 fbfd 	bl	8000b08 <__aeabi_dcmpeq>
 800a30e:	b108      	cbz	r0, 800a314 <__cvt+0xa4>
 800a310:	f8cd 900c 	str.w	r9, [sp, #12]
 800a314:	2230      	movs	r2, #48	; 0x30
 800a316:	9b03      	ldr	r3, [sp, #12]
 800a318:	454b      	cmp	r3, r9
 800a31a:	d307      	bcc.n	800a32c <__cvt+0xbc>
 800a31c:	9b03      	ldr	r3, [sp, #12]
 800a31e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a320:	1bdb      	subs	r3, r3, r7
 800a322:	4638      	mov	r0, r7
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	b004      	add	sp, #16
 800a328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32c:	1c59      	adds	r1, r3, #1
 800a32e:	9103      	str	r1, [sp, #12]
 800a330:	701a      	strb	r2, [r3, #0]
 800a332:	e7f0      	b.n	800a316 <__cvt+0xa6>

0800a334 <__exponent>:
 800a334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a336:	4603      	mov	r3, r0
 800a338:	2900      	cmp	r1, #0
 800a33a:	bfb8      	it	lt
 800a33c:	4249      	neglt	r1, r1
 800a33e:	f803 2b02 	strb.w	r2, [r3], #2
 800a342:	bfb4      	ite	lt
 800a344:	222d      	movlt	r2, #45	; 0x2d
 800a346:	222b      	movge	r2, #43	; 0x2b
 800a348:	2909      	cmp	r1, #9
 800a34a:	7042      	strb	r2, [r0, #1]
 800a34c:	dd2a      	ble.n	800a3a4 <__exponent+0x70>
 800a34e:	f10d 0407 	add.w	r4, sp, #7
 800a352:	46a4      	mov	ip, r4
 800a354:	270a      	movs	r7, #10
 800a356:	46a6      	mov	lr, r4
 800a358:	460a      	mov	r2, r1
 800a35a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a35e:	fb07 1516 	mls	r5, r7, r6, r1
 800a362:	3530      	adds	r5, #48	; 0x30
 800a364:	2a63      	cmp	r2, #99	; 0x63
 800a366:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a36a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a36e:	4631      	mov	r1, r6
 800a370:	dcf1      	bgt.n	800a356 <__exponent+0x22>
 800a372:	3130      	adds	r1, #48	; 0x30
 800a374:	f1ae 0502 	sub.w	r5, lr, #2
 800a378:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a37c:	1c44      	adds	r4, r0, #1
 800a37e:	4629      	mov	r1, r5
 800a380:	4561      	cmp	r1, ip
 800a382:	d30a      	bcc.n	800a39a <__exponent+0x66>
 800a384:	f10d 0209 	add.w	r2, sp, #9
 800a388:	eba2 020e 	sub.w	r2, r2, lr
 800a38c:	4565      	cmp	r5, ip
 800a38e:	bf88      	it	hi
 800a390:	2200      	movhi	r2, #0
 800a392:	4413      	add	r3, r2
 800a394:	1a18      	subs	r0, r3, r0
 800a396:	b003      	add	sp, #12
 800a398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a39e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a3a2:	e7ed      	b.n	800a380 <__exponent+0x4c>
 800a3a4:	2330      	movs	r3, #48	; 0x30
 800a3a6:	3130      	adds	r1, #48	; 0x30
 800a3a8:	7083      	strb	r3, [r0, #2]
 800a3aa:	70c1      	strb	r1, [r0, #3]
 800a3ac:	1d03      	adds	r3, r0, #4
 800a3ae:	e7f1      	b.n	800a394 <__exponent+0x60>

0800a3b0 <_printf_float>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	ed2d 8b02 	vpush	{d8}
 800a3b8:	b08d      	sub	sp, #52	; 0x34
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a3c0:	4616      	mov	r6, r2
 800a3c2:	461f      	mov	r7, r3
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	f001 fc83 	bl	800bcd0 <_localeconv_r>
 800a3ca:	f8d0 a000 	ldr.w	sl, [r0]
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	f7f5 ff18 	bl	8000204 <strlen>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a3e4:	3307      	adds	r3, #7
 800a3e6:	f023 0307 	bic.w	r3, r3, #7
 800a3ea:	f103 0208 	add.w	r2, r3, #8
 800a3ee:	f8c8 2000 	str.w	r2, [r8]
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a3fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a3fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a402:	9307      	str	r3, [sp, #28]
 800a404:	f8cd 8018 	str.w	r8, [sp, #24]
 800a408:	ee08 0a10 	vmov	s16, r0
 800a40c:	4b9f      	ldr	r3, [pc, #636]	; (800a68c <_printf_float+0x2dc>)
 800a40e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a416:	f7f6 fba9 	bl	8000b6c <__aeabi_dcmpun>
 800a41a:	bb88      	cbnz	r0, 800a480 <_printf_float+0xd0>
 800a41c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a420:	4b9a      	ldr	r3, [pc, #616]	; (800a68c <_printf_float+0x2dc>)
 800a422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a426:	f7f6 fb83 	bl	8000b30 <__aeabi_dcmple>
 800a42a:	bb48      	cbnz	r0, 800a480 <_printf_float+0xd0>
 800a42c:	2200      	movs	r2, #0
 800a42e:	2300      	movs	r3, #0
 800a430:	4640      	mov	r0, r8
 800a432:	4649      	mov	r1, r9
 800a434:	f7f6 fb72 	bl	8000b1c <__aeabi_dcmplt>
 800a438:	b110      	cbz	r0, 800a440 <_printf_float+0x90>
 800a43a:	232d      	movs	r3, #45	; 0x2d
 800a43c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a440:	4b93      	ldr	r3, [pc, #588]	; (800a690 <_printf_float+0x2e0>)
 800a442:	4894      	ldr	r0, [pc, #592]	; (800a694 <_printf_float+0x2e4>)
 800a444:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a448:	bf94      	ite	ls
 800a44a:	4698      	movls	r8, r3
 800a44c:	4680      	movhi	r8, r0
 800a44e:	2303      	movs	r3, #3
 800a450:	6123      	str	r3, [r4, #16]
 800a452:	9b05      	ldr	r3, [sp, #20]
 800a454:	f023 0204 	bic.w	r2, r3, #4
 800a458:	6022      	str	r2, [r4, #0]
 800a45a:	f04f 0900 	mov.w	r9, #0
 800a45e:	9700      	str	r7, [sp, #0]
 800a460:	4633      	mov	r3, r6
 800a462:	aa0b      	add	r2, sp, #44	; 0x2c
 800a464:	4621      	mov	r1, r4
 800a466:	4628      	mov	r0, r5
 800a468:	f000 f9d8 	bl	800a81c <_printf_common>
 800a46c:	3001      	adds	r0, #1
 800a46e:	f040 8090 	bne.w	800a592 <_printf_float+0x1e2>
 800a472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a476:	b00d      	add	sp, #52	; 0x34
 800a478:	ecbd 8b02 	vpop	{d8}
 800a47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a480:	4642      	mov	r2, r8
 800a482:	464b      	mov	r3, r9
 800a484:	4640      	mov	r0, r8
 800a486:	4649      	mov	r1, r9
 800a488:	f7f6 fb70 	bl	8000b6c <__aeabi_dcmpun>
 800a48c:	b140      	cbz	r0, 800a4a0 <_printf_float+0xf0>
 800a48e:	464b      	mov	r3, r9
 800a490:	2b00      	cmp	r3, #0
 800a492:	bfbc      	itt	lt
 800a494:	232d      	movlt	r3, #45	; 0x2d
 800a496:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a49a:	487f      	ldr	r0, [pc, #508]	; (800a698 <_printf_float+0x2e8>)
 800a49c:	4b7f      	ldr	r3, [pc, #508]	; (800a69c <_printf_float+0x2ec>)
 800a49e:	e7d1      	b.n	800a444 <_printf_float+0x94>
 800a4a0:	6863      	ldr	r3, [r4, #4]
 800a4a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a4a6:	9206      	str	r2, [sp, #24]
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	d13f      	bne.n	800a52c <_printf_float+0x17c>
 800a4ac:	2306      	movs	r3, #6
 800a4ae:	6063      	str	r3, [r4, #4]
 800a4b0:	9b05      	ldr	r3, [sp, #20]
 800a4b2:	6861      	ldr	r1, [r4, #4]
 800a4b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	9303      	str	r3, [sp, #12]
 800a4bc:	ab0a      	add	r3, sp, #40	; 0x28
 800a4be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a4c2:	ab09      	add	r3, sp, #36	; 0x24
 800a4c4:	ec49 8b10 	vmov	d0, r8, r9
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	6022      	str	r2, [r4, #0]
 800a4cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f7ff fecd 	bl	800a270 <__cvt>
 800a4d6:	9b06      	ldr	r3, [sp, #24]
 800a4d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4da:	2b47      	cmp	r3, #71	; 0x47
 800a4dc:	4680      	mov	r8, r0
 800a4de:	d108      	bne.n	800a4f2 <_printf_float+0x142>
 800a4e0:	1cc8      	adds	r0, r1, #3
 800a4e2:	db02      	blt.n	800a4ea <_printf_float+0x13a>
 800a4e4:	6863      	ldr	r3, [r4, #4]
 800a4e6:	4299      	cmp	r1, r3
 800a4e8:	dd41      	ble.n	800a56e <_printf_float+0x1be>
 800a4ea:	f1ab 0b02 	sub.w	fp, fp, #2
 800a4ee:	fa5f fb8b 	uxtb.w	fp, fp
 800a4f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4f6:	d820      	bhi.n	800a53a <_printf_float+0x18a>
 800a4f8:	3901      	subs	r1, #1
 800a4fa:	465a      	mov	r2, fp
 800a4fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a500:	9109      	str	r1, [sp, #36]	; 0x24
 800a502:	f7ff ff17 	bl	800a334 <__exponent>
 800a506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a508:	1813      	adds	r3, r2, r0
 800a50a:	2a01      	cmp	r2, #1
 800a50c:	4681      	mov	r9, r0
 800a50e:	6123      	str	r3, [r4, #16]
 800a510:	dc02      	bgt.n	800a518 <_printf_float+0x168>
 800a512:	6822      	ldr	r2, [r4, #0]
 800a514:	07d2      	lsls	r2, r2, #31
 800a516:	d501      	bpl.n	800a51c <_printf_float+0x16c>
 800a518:	3301      	adds	r3, #1
 800a51a:	6123      	str	r3, [r4, #16]
 800a51c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a520:	2b00      	cmp	r3, #0
 800a522:	d09c      	beq.n	800a45e <_printf_float+0xae>
 800a524:	232d      	movs	r3, #45	; 0x2d
 800a526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a52a:	e798      	b.n	800a45e <_printf_float+0xae>
 800a52c:	9a06      	ldr	r2, [sp, #24]
 800a52e:	2a47      	cmp	r2, #71	; 0x47
 800a530:	d1be      	bne.n	800a4b0 <_printf_float+0x100>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1bc      	bne.n	800a4b0 <_printf_float+0x100>
 800a536:	2301      	movs	r3, #1
 800a538:	e7b9      	b.n	800a4ae <_printf_float+0xfe>
 800a53a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a53e:	d118      	bne.n	800a572 <_printf_float+0x1c2>
 800a540:	2900      	cmp	r1, #0
 800a542:	6863      	ldr	r3, [r4, #4]
 800a544:	dd0b      	ble.n	800a55e <_printf_float+0x1ae>
 800a546:	6121      	str	r1, [r4, #16]
 800a548:	b913      	cbnz	r3, 800a550 <_printf_float+0x1a0>
 800a54a:	6822      	ldr	r2, [r4, #0]
 800a54c:	07d0      	lsls	r0, r2, #31
 800a54e:	d502      	bpl.n	800a556 <_printf_float+0x1a6>
 800a550:	3301      	adds	r3, #1
 800a552:	440b      	add	r3, r1
 800a554:	6123      	str	r3, [r4, #16]
 800a556:	65a1      	str	r1, [r4, #88]	; 0x58
 800a558:	f04f 0900 	mov.w	r9, #0
 800a55c:	e7de      	b.n	800a51c <_printf_float+0x16c>
 800a55e:	b913      	cbnz	r3, 800a566 <_printf_float+0x1b6>
 800a560:	6822      	ldr	r2, [r4, #0]
 800a562:	07d2      	lsls	r2, r2, #31
 800a564:	d501      	bpl.n	800a56a <_printf_float+0x1ba>
 800a566:	3302      	adds	r3, #2
 800a568:	e7f4      	b.n	800a554 <_printf_float+0x1a4>
 800a56a:	2301      	movs	r3, #1
 800a56c:	e7f2      	b.n	800a554 <_printf_float+0x1a4>
 800a56e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a574:	4299      	cmp	r1, r3
 800a576:	db05      	blt.n	800a584 <_printf_float+0x1d4>
 800a578:	6823      	ldr	r3, [r4, #0]
 800a57a:	6121      	str	r1, [r4, #16]
 800a57c:	07d8      	lsls	r0, r3, #31
 800a57e:	d5ea      	bpl.n	800a556 <_printf_float+0x1a6>
 800a580:	1c4b      	adds	r3, r1, #1
 800a582:	e7e7      	b.n	800a554 <_printf_float+0x1a4>
 800a584:	2900      	cmp	r1, #0
 800a586:	bfd4      	ite	le
 800a588:	f1c1 0202 	rsble	r2, r1, #2
 800a58c:	2201      	movgt	r2, #1
 800a58e:	4413      	add	r3, r2
 800a590:	e7e0      	b.n	800a554 <_printf_float+0x1a4>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	055a      	lsls	r2, r3, #21
 800a596:	d407      	bmi.n	800a5a8 <_printf_float+0x1f8>
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	4642      	mov	r2, r8
 800a59c:	4631      	mov	r1, r6
 800a59e:	4628      	mov	r0, r5
 800a5a0:	47b8      	blx	r7
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	d12c      	bne.n	800a600 <_printf_float+0x250>
 800a5a6:	e764      	b.n	800a472 <_printf_float+0xc2>
 800a5a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a5ac:	f240 80e0 	bls.w	800a770 <_printf_float+0x3c0>
 800a5b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f7f6 faa6 	bl	8000b08 <__aeabi_dcmpeq>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d034      	beq.n	800a62a <_printf_float+0x27a>
 800a5c0:	4a37      	ldr	r2, [pc, #220]	; (800a6a0 <_printf_float+0x2f0>)
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	4631      	mov	r1, r6
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	47b8      	blx	r7
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	f43f af51 	beq.w	800a472 <_printf_float+0xc2>
 800a5d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	db02      	blt.n	800a5de <_printf_float+0x22e>
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	07d8      	lsls	r0, r3, #31
 800a5dc:	d510      	bpl.n	800a600 <_printf_float+0x250>
 800a5de:	ee18 3a10 	vmov	r3, s16
 800a5e2:	4652      	mov	r2, sl
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	47b8      	blx	r7
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	f43f af41 	beq.w	800a472 <_printf_float+0xc2>
 800a5f0:	f04f 0800 	mov.w	r8, #0
 800a5f4:	f104 091a 	add.w	r9, r4, #26
 800a5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	4543      	cmp	r3, r8
 800a5fe:	dc09      	bgt.n	800a614 <_printf_float+0x264>
 800a600:	6823      	ldr	r3, [r4, #0]
 800a602:	079b      	lsls	r3, r3, #30
 800a604:	f100 8105 	bmi.w	800a812 <_printf_float+0x462>
 800a608:	68e0      	ldr	r0, [r4, #12]
 800a60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a60c:	4298      	cmp	r0, r3
 800a60e:	bfb8      	it	lt
 800a610:	4618      	movlt	r0, r3
 800a612:	e730      	b.n	800a476 <_printf_float+0xc6>
 800a614:	2301      	movs	r3, #1
 800a616:	464a      	mov	r2, r9
 800a618:	4631      	mov	r1, r6
 800a61a:	4628      	mov	r0, r5
 800a61c:	47b8      	blx	r7
 800a61e:	3001      	adds	r0, #1
 800a620:	f43f af27 	beq.w	800a472 <_printf_float+0xc2>
 800a624:	f108 0801 	add.w	r8, r8, #1
 800a628:	e7e6      	b.n	800a5f8 <_printf_float+0x248>
 800a62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	dc39      	bgt.n	800a6a4 <_printf_float+0x2f4>
 800a630:	4a1b      	ldr	r2, [pc, #108]	; (800a6a0 <_printf_float+0x2f0>)
 800a632:	2301      	movs	r3, #1
 800a634:	4631      	mov	r1, r6
 800a636:	4628      	mov	r0, r5
 800a638:	47b8      	blx	r7
 800a63a:	3001      	adds	r0, #1
 800a63c:	f43f af19 	beq.w	800a472 <_printf_float+0xc2>
 800a640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a644:	4313      	orrs	r3, r2
 800a646:	d102      	bne.n	800a64e <_printf_float+0x29e>
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	07d9      	lsls	r1, r3, #31
 800a64c:	d5d8      	bpl.n	800a600 <_printf_float+0x250>
 800a64e:	ee18 3a10 	vmov	r3, s16
 800a652:	4652      	mov	r2, sl
 800a654:	4631      	mov	r1, r6
 800a656:	4628      	mov	r0, r5
 800a658:	47b8      	blx	r7
 800a65a:	3001      	adds	r0, #1
 800a65c:	f43f af09 	beq.w	800a472 <_printf_float+0xc2>
 800a660:	f04f 0900 	mov.w	r9, #0
 800a664:	f104 0a1a 	add.w	sl, r4, #26
 800a668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a66a:	425b      	negs	r3, r3
 800a66c:	454b      	cmp	r3, r9
 800a66e:	dc01      	bgt.n	800a674 <_printf_float+0x2c4>
 800a670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a672:	e792      	b.n	800a59a <_printf_float+0x1ea>
 800a674:	2301      	movs	r3, #1
 800a676:	4652      	mov	r2, sl
 800a678:	4631      	mov	r1, r6
 800a67a:	4628      	mov	r0, r5
 800a67c:	47b8      	blx	r7
 800a67e:	3001      	adds	r0, #1
 800a680:	f43f aef7 	beq.w	800a472 <_printf_float+0xc2>
 800a684:	f109 0901 	add.w	r9, r9, #1
 800a688:	e7ee      	b.n	800a668 <_printf_float+0x2b8>
 800a68a:	bf00      	nop
 800a68c:	7fefffff 	.word	0x7fefffff
 800a690:	0800de29 	.word	0x0800de29
 800a694:	0800de2d 	.word	0x0800de2d
 800a698:	0800de35 	.word	0x0800de35
 800a69c:	0800de31 	.word	0x0800de31
 800a6a0:	0800de39 	.word	0x0800de39
 800a6a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	bfa8      	it	ge
 800a6ac:	461a      	movge	r2, r3
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	4691      	mov	r9, r2
 800a6b2:	dc37      	bgt.n	800a724 <_printf_float+0x374>
 800a6b4:	f04f 0b00 	mov.w	fp, #0
 800a6b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6bc:	f104 021a 	add.w	r2, r4, #26
 800a6c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6c2:	9305      	str	r3, [sp, #20]
 800a6c4:	eba3 0309 	sub.w	r3, r3, r9
 800a6c8:	455b      	cmp	r3, fp
 800a6ca:	dc33      	bgt.n	800a734 <_printf_float+0x384>
 800a6cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	db3b      	blt.n	800a74c <_printf_float+0x39c>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	07da      	lsls	r2, r3, #31
 800a6d8:	d438      	bmi.n	800a74c <_printf_float+0x39c>
 800a6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6dc:	9a05      	ldr	r2, [sp, #20]
 800a6de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6e0:	1a9a      	subs	r2, r3, r2
 800a6e2:	eba3 0901 	sub.w	r9, r3, r1
 800a6e6:	4591      	cmp	r9, r2
 800a6e8:	bfa8      	it	ge
 800a6ea:	4691      	movge	r9, r2
 800a6ec:	f1b9 0f00 	cmp.w	r9, #0
 800a6f0:	dc35      	bgt.n	800a75e <_printf_float+0x3ae>
 800a6f2:	f04f 0800 	mov.w	r8, #0
 800a6f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6fa:	f104 0a1a 	add.w	sl, r4, #26
 800a6fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a702:	1a9b      	subs	r3, r3, r2
 800a704:	eba3 0309 	sub.w	r3, r3, r9
 800a708:	4543      	cmp	r3, r8
 800a70a:	f77f af79 	ble.w	800a600 <_printf_float+0x250>
 800a70e:	2301      	movs	r3, #1
 800a710:	4652      	mov	r2, sl
 800a712:	4631      	mov	r1, r6
 800a714:	4628      	mov	r0, r5
 800a716:	47b8      	blx	r7
 800a718:	3001      	adds	r0, #1
 800a71a:	f43f aeaa 	beq.w	800a472 <_printf_float+0xc2>
 800a71e:	f108 0801 	add.w	r8, r8, #1
 800a722:	e7ec      	b.n	800a6fe <_printf_float+0x34e>
 800a724:	4613      	mov	r3, r2
 800a726:	4631      	mov	r1, r6
 800a728:	4642      	mov	r2, r8
 800a72a:	4628      	mov	r0, r5
 800a72c:	47b8      	blx	r7
 800a72e:	3001      	adds	r0, #1
 800a730:	d1c0      	bne.n	800a6b4 <_printf_float+0x304>
 800a732:	e69e      	b.n	800a472 <_printf_float+0xc2>
 800a734:	2301      	movs	r3, #1
 800a736:	4631      	mov	r1, r6
 800a738:	4628      	mov	r0, r5
 800a73a:	9205      	str	r2, [sp, #20]
 800a73c:	47b8      	blx	r7
 800a73e:	3001      	adds	r0, #1
 800a740:	f43f ae97 	beq.w	800a472 <_printf_float+0xc2>
 800a744:	9a05      	ldr	r2, [sp, #20]
 800a746:	f10b 0b01 	add.w	fp, fp, #1
 800a74a:	e7b9      	b.n	800a6c0 <_printf_float+0x310>
 800a74c:	ee18 3a10 	vmov	r3, s16
 800a750:	4652      	mov	r2, sl
 800a752:	4631      	mov	r1, r6
 800a754:	4628      	mov	r0, r5
 800a756:	47b8      	blx	r7
 800a758:	3001      	adds	r0, #1
 800a75a:	d1be      	bne.n	800a6da <_printf_float+0x32a>
 800a75c:	e689      	b.n	800a472 <_printf_float+0xc2>
 800a75e:	9a05      	ldr	r2, [sp, #20]
 800a760:	464b      	mov	r3, r9
 800a762:	4442      	add	r2, r8
 800a764:	4631      	mov	r1, r6
 800a766:	4628      	mov	r0, r5
 800a768:	47b8      	blx	r7
 800a76a:	3001      	adds	r0, #1
 800a76c:	d1c1      	bne.n	800a6f2 <_printf_float+0x342>
 800a76e:	e680      	b.n	800a472 <_printf_float+0xc2>
 800a770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a772:	2a01      	cmp	r2, #1
 800a774:	dc01      	bgt.n	800a77a <_printf_float+0x3ca>
 800a776:	07db      	lsls	r3, r3, #31
 800a778:	d538      	bpl.n	800a7ec <_printf_float+0x43c>
 800a77a:	2301      	movs	r3, #1
 800a77c:	4642      	mov	r2, r8
 800a77e:	4631      	mov	r1, r6
 800a780:	4628      	mov	r0, r5
 800a782:	47b8      	blx	r7
 800a784:	3001      	adds	r0, #1
 800a786:	f43f ae74 	beq.w	800a472 <_printf_float+0xc2>
 800a78a:	ee18 3a10 	vmov	r3, s16
 800a78e:	4652      	mov	r2, sl
 800a790:	4631      	mov	r1, r6
 800a792:	4628      	mov	r0, r5
 800a794:	47b8      	blx	r7
 800a796:	3001      	adds	r0, #1
 800a798:	f43f ae6b 	beq.w	800a472 <_printf_float+0xc2>
 800a79c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f7f6 f9b0 	bl	8000b08 <__aeabi_dcmpeq>
 800a7a8:	b9d8      	cbnz	r0, 800a7e2 <_printf_float+0x432>
 800a7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ac:	f108 0201 	add.w	r2, r8, #1
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	4631      	mov	r1, r6
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	47b8      	blx	r7
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	d10e      	bne.n	800a7da <_printf_float+0x42a>
 800a7bc:	e659      	b.n	800a472 <_printf_float+0xc2>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	4652      	mov	r2, sl
 800a7c2:	4631      	mov	r1, r6
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	47b8      	blx	r7
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	f43f ae52 	beq.w	800a472 <_printf_float+0xc2>
 800a7ce:	f108 0801 	add.w	r8, r8, #1
 800a7d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	4543      	cmp	r3, r8
 800a7d8:	dcf1      	bgt.n	800a7be <_printf_float+0x40e>
 800a7da:	464b      	mov	r3, r9
 800a7dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a7e0:	e6dc      	b.n	800a59c <_printf_float+0x1ec>
 800a7e2:	f04f 0800 	mov.w	r8, #0
 800a7e6:	f104 0a1a 	add.w	sl, r4, #26
 800a7ea:	e7f2      	b.n	800a7d2 <_printf_float+0x422>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	4642      	mov	r2, r8
 800a7f0:	e7df      	b.n	800a7b2 <_printf_float+0x402>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	464a      	mov	r2, r9
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	47b8      	blx	r7
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	f43f ae38 	beq.w	800a472 <_printf_float+0xc2>
 800a802:	f108 0801 	add.w	r8, r8, #1
 800a806:	68e3      	ldr	r3, [r4, #12]
 800a808:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a80a:	1a5b      	subs	r3, r3, r1
 800a80c:	4543      	cmp	r3, r8
 800a80e:	dcf0      	bgt.n	800a7f2 <_printf_float+0x442>
 800a810:	e6fa      	b.n	800a608 <_printf_float+0x258>
 800a812:	f04f 0800 	mov.w	r8, #0
 800a816:	f104 0919 	add.w	r9, r4, #25
 800a81a:	e7f4      	b.n	800a806 <_printf_float+0x456>

0800a81c <_printf_common>:
 800a81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	4616      	mov	r6, r2
 800a822:	4699      	mov	r9, r3
 800a824:	688a      	ldr	r2, [r1, #8]
 800a826:	690b      	ldr	r3, [r1, #16]
 800a828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a82c:	4293      	cmp	r3, r2
 800a82e:	bfb8      	it	lt
 800a830:	4613      	movlt	r3, r2
 800a832:	6033      	str	r3, [r6, #0]
 800a834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a838:	4607      	mov	r7, r0
 800a83a:	460c      	mov	r4, r1
 800a83c:	b10a      	cbz	r2, 800a842 <_printf_common+0x26>
 800a83e:	3301      	adds	r3, #1
 800a840:	6033      	str	r3, [r6, #0]
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	0699      	lsls	r1, r3, #26
 800a846:	bf42      	ittt	mi
 800a848:	6833      	ldrmi	r3, [r6, #0]
 800a84a:	3302      	addmi	r3, #2
 800a84c:	6033      	strmi	r3, [r6, #0]
 800a84e:	6825      	ldr	r5, [r4, #0]
 800a850:	f015 0506 	ands.w	r5, r5, #6
 800a854:	d106      	bne.n	800a864 <_printf_common+0x48>
 800a856:	f104 0a19 	add.w	sl, r4, #25
 800a85a:	68e3      	ldr	r3, [r4, #12]
 800a85c:	6832      	ldr	r2, [r6, #0]
 800a85e:	1a9b      	subs	r3, r3, r2
 800a860:	42ab      	cmp	r3, r5
 800a862:	dc26      	bgt.n	800a8b2 <_printf_common+0x96>
 800a864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a868:	1e13      	subs	r3, r2, #0
 800a86a:	6822      	ldr	r2, [r4, #0]
 800a86c:	bf18      	it	ne
 800a86e:	2301      	movne	r3, #1
 800a870:	0692      	lsls	r2, r2, #26
 800a872:	d42b      	bmi.n	800a8cc <_printf_common+0xb0>
 800a874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a878:	4649      	mov	r1, r9
 800a87a:	4638      	mov	r0, r7
 800a87c:	47c0      	blx	r8
 800a87e:	3001      	adds	r0, #1
 800a880:	d01e      	beq.n	800a8c0 <_printf_common+0xa4>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	68e5      	ldr	r5, [r4, #12]
 800a886:	6832      	ldr	r2, [r6, #0]
 800a888:	f003 0306 	and.w	r3, r3, #6
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	bf08      	it	eq
 800a890:	1aad      	subeq	r5, r5, r2
 800a892:	68a3      	ldr	r3, [r4, #8]
 800a894:	6922      	ldr	r2, [r4, #16]
 800a896:	bf0c      	ite	eq
 800a898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a89c:	2500      	movne	r5, #0
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	bfc4      	itt	gt
 800a8a2:	1a9b      	subgt	r3, r3, r2
 800a8a4:	18ed      	addgt	r5, r5, r3
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	341a      	adds	r4, #26
 800a8aa:	42b5      	cmp	r5, r6
 800a8ac:	d11a      	bne.n	800a8e4 <_printf_common+0xc8>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	e008      	b.n	800a8c4 <_printf_common+0xa8>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4652      	mov	r2, sl
 800a8b6:	4649      	mov	r1, r9
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	47c0      	blx	r8
 800a8bc:	3001      	adds	r0, #1
 800a8be:	d103      	bne.n	800a8c8 <_printf_common+0xac>
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c8:	3501      	adds	r5, #1
 800a8ca:	e7c6      	b.n	800a85a <_printf_common+0x3e>
 800a8cc:	18e1      	adds	r1, r4, r3
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	2030      	movs	r0, #48	; 0x30
 800a8d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8d6:	4422      	add	r2, r4
 800a8d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8e0:	3302      	adds	r3, #2
 800a8e2:	e7c7      	b.n	800a874 <_printf_common+0x58>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	4622      	mov	r2, r4
 800a8e8:	4649      	mov	r1, r9
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	47c0      	blx	r8
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	d0e6      	beq.n	800a8c0 <_printf_common+0xa4>
 800a8f2:	3601      	adds	r6, #1
 800a8f4:	e7d9      	b.n	800a8aa <_printf_common+0x8e>
	...

0800a8f8 <_printf_i>:
 800a8f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	7e0f      	ldrb	r7, [r1, #24]
 800a8fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a900:	2f78      	cmp	r7, #120	; 0x78
 800a902:	4691      	mov	r9, r2
 800a904:	4680      	mov	r8, r0
 800a906:	460c      	mov	r4, r1
 800a908:	469a      	mov	sl, r3
 800a90a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a90e:	d807      	bhi.n	800a920 <_printf_i+0x28>
 800a910:	2f62      	cmp	r7, #98	; 0x62
 800a912:	d80a      	bhi.n	800a92a <_printf_i+0x32>
 800a914:	2f00      	cmp	r7, #0
 800a916:	f000 80d8 	beq.w	800aaca <_printf_i+0x1d2>
 800a91a:	2f58      	cmp	r7, #88	; 0x58
 800a91c:	f000 80a3 	beq.w	800aa66 <_printf_i+0x16e>
 800a920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a928:	e03a      	b.n	800a9a0 <_printf_i+0xa8>
 800a92a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a92e:	2b15      	cmp	r3, #21
 800a930:	d8f6      	bhi.n	800a920 <_printf_i+0x28>
 800a932:	a101      	add	r1, pc, #4	; (adr r1, 800a938 <_printf_i+0x40>)
 800a934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a938:	0800a991 	.word	0x0800a991
 800a93c:	0800a9a5 	.word	0x0800a9a5
 800a940:	0800a921 	.word	0x0800a921
 800a944:	0800a921 	.word	0x0800a921
 800a948:	0800a921 	.word	0x0800a921
 800a94c:	0800a921 	.word	0x0800a921
 800a950:	0800a9a5 	.word	0x0800a9a5
 800a954:	0800a921 	.word	0x0800a921
 800a958:	0800a921 	.word	0x0800a921
 800a95c:	0800a921 	.word	0x0800a921
 800a960:	0800a921 	.word	0x0800a921
 800a964:	0800aab1 	.word	0x0800aab1
 800a968:	0800a9d5 	.word	0x0800a9d5
 800a96c:	0800aa93 	.word	0x0800aa93
 800a970:	0800a921 	.word	0x0800a921
 800a974:	0800a921 	.word	0x0800a921
 800a978:	0800aad3 	.word	0x0800aad3
 800a97c:	0800a921 	.word	0x0800a921
 800a980:	0800a9d5 	.word	0x0800a9d5
 800a984:	0800a921 	.word	0x0800a921
 800a988:	0800a921 	.word	0x0800a921
 800a98c:	0800aa9b 	.word	0x0800aa9b
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	1d1a      	adds	r2, r3, #4
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	602a      	str	r2, [r5, #0]
 800a998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a99c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e0a3      	b.n	800aaec <_printf_i+0x1f4>
 800a9a4:	6820      	ldr	r0, [r4, #0]
 800a9a6:	6829      	ldr	r1, [r5, #0]
 800a9a8:	0606      	lsls	r6, r0, #24
 800a9aa:	f101 0304 	add.w	r3, r1, #4
 800a9ae:	d50a      	bpl.n	800a9c6 <_printf_i+0xce>
 800a9b0:	680e      	ldr	r6, [r1, #0]
 800a9b2:	602b      	str	r3, [r5, #0]
 800a9b4:	2e00      	cmp	r6, #0
 800a9b6:	da03      	bge.n	800a9c0 <_printf_i+0xc8>
 800a9b8:	232d      	movs	r3, #45	; 0x2d
 800a9ba:	4276      	negs	r6, r6
 800a9bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9c0:	485e      	ldr	r0, [pc, #376]	; (800ab3c <_printf_i+0x244>)
 800a9c2:	230a      	movs	r3, #10
 800a9c4:	e019      	b.n	800a9fa <_printf_i+0x102>
 800a9c6:	680e      	ldr	r6, [r1, #0]
 800a9c8:	602b      	str	r3, [r5, #0]
 800a9ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9ce:	bf18      	it	ne
 800a9d0:	b236      	sxthne	r6, r6
 800a9d2:	e7ef      	b.n	800a9b4 <_printf_i+0xbc>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	6820      	ldr	r0, [r4, #0]
 800a9d8:	1d19      	adds	r1, r3, #4
 800a9da:	6029      	str	r1, [r5, #0]
 800a9dc:	0601      	lsls	r1, r0, #24
 800a9de:	d501      	bpl.n	800a9e4 <_printf_i+0xec>
 800a9e0:	681e      	ldr	r6, [r3, #0]
 800a9e2:	e002      	b.n	800a9ea <_printf_i+0xf2>
 800a9e4:	0646      	lsls	r6, r0, #25
 800a9e6:	d5fb      	bpl.n	800a9e0 <_printf_i+0xe8>
 800a9e8:	881e      	ldrh	r6, [r3, #0]
 800a9ea:	4854      	ldr	r0, [pc, #336]	; (800ab3c <_printf_i+0x244>)
 800a9ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a9ee:	bf0c      	ite	eq
 800a9f0:	2308      	moveq	r3, #8
 800a9f2:	230a      	movne	r3, #10
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9fa:	6865      	ldr	r5, [r4, #4]
 800a9fc:	60a5      	str	r5, [r4, #8]
 800a9fe:	2d00      	cmp	r5, #0
 800aa00:	bfa2      	ittt	ge
 800aa02:	6821      	ldrge	r1, [r4, #0]
 800aa04:	f021 0104 	bicge.w	r1, r1, #4
 800aa08:	6021      	strge	r1, [r4, #0]
 800aa0a:	b90e      	cbnz	r6, 800aa10 <_printf_i+0x118>
 800aa0c:	2d00      	cmp	r5, #0
 800aa0e:	d04d      	beq.n	800aaac <_printf_i+0x1b4>
 800aa10:	4615      	mov	r5, r2
 800aa12:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa16:	fb03 6711 	mls	r7, r3, r1, r6
 800aa1a:	5dc7      	ldrb	r7, [r0, r7]
 800aa1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa20:	4637      	mov	r7, r6
 800aa22:	42bb      	cmp	r3, r7
 800aa24:	460e      	mov	r6, r1
 800aa26:	d9f4      	bls.n	800aa12 <_printf_i+0x11a>
 800aa28:	2b08      	cmp	r3, #8
 800aa2a:	d10b      	bne.n	800aa44 <_printf_i+0x14c>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	07de      	lsls	r6, r3, #31
 800aa30:	d508      	bpl.n	800aa44 <_printf_i+0x14c>
 800aa32:	6923      	ldr	r3, [r4, #16]
 800aa34:	6861      	ldr	r1, [r4, #4]
 800aa36:	4299      	cmp	r1, r3
 800aa38:	bfde      	ittt	le
 800aa3a:	2330      	movle	r3, #48	; 0x30
 800aa3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa44:	1b52      	subs	r2, r2, r5
 800aa46:	6122      	str	r2, [r4, #16]
 800aa48:	f8cd a000 	str.w	sl, [sp]
 800aa4c:	464b      	mov	r3, r9
 800aa4e:	aa03      	add	r2, sp, #12
 800aa50:	4621      	mov	r1, r4
 800aa52:	4640      	mov	r0, r8
 800aa54:	f7ff fee2 	bl	800a81c <_printf_common>
 800aa58:	3001      	adds	r0, #1
 800aa5a:	d14c      	bne.n	800aaf6 <_printf_i+0x1fe>
 800aa5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa60:	b004      	add	sp, #16
 800aa62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa66:	4835      	ldr	r0, [pc, #212]	; (800ab3c <_printf_i+0x244>)
 800aa68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa6c:	6829      	ldr	r1, [r5, #0]
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa74:	6029      	str	r1, [r5, #0]
 800aa76:	061d      	lsls	r5, r3, #24
 800aa78:	d514      	bpl.n	800aaa4 <_printf_i+0x1ac>
 800aa7a:	07df      	lsls	r7, r3, #31
 800aa7c:	bf44      	itt	mi
 800aa7e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa82:	6023      	strmi	r3, [r4, #0]
 800aa84:	b91e      	cbnz	r6, 800aa8e <_printf_i+0x196>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	f023 0320 	bic.w	r3, r3, #32
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	2310      	movs	r3, #16
 800aa90:	e7b0      	b.n	800a9f4 <_printf_i+0xfc>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	f043 0320 	orr.w	r3, r3, #32
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	2378      	movs	r3, #120	; 0x78
 800aa9c:	4828      	ldr	r0, [pc, #160]	; (800ab40 <_printf_i+0x248>)
 800aa9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aaa2:	e7e3      	b.n	800aa6c <_printf_i+0x174>
 800aaa4:	0659      	lsls	r1, r3, #25
 800aaa6:	bf48      	it	mi
 800aaa8:	b2b6      	uxthmi	r6, r6
 800aaaa:	e7e6      	b.n	800aa7a <_printf_i+0x182>
 800aaac:	4615      	mov	r5, r2
 800aaae:	e7bb      	b.n	800aa28 <_printf_i+0x130>
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	6826      	ldr	r6, [r4, #0]
 800aab4:	6961      	ldr	r1, [r4, #20]
 800aab6:	1d18      	adds	r0, r3, #4
 800aab8:	6028      	str	r0, [r5, #0]
 800aaba:	0635      	lsls	r5, r6, #24
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	d501      	bpl.n	800aac4 <_printf_i+0x1cc>
 800aac0:	6019      	str	r1, [r3, #0]
 800aac2:	e002      	b.n	800aaca <_printf_i+0x1d2>
 800aac4:	0670      	lsls	r0, r6, #25
 800aac6:	d5fb      	bpl.n	800aac0 <_printf_i+0x1c8>
 800aac8:	8019      	strh	r1, [r3, #0]
 800aaca:	2300      	movs	r3, #0
 800aacc:	6123      	str	r3, [r4, #16]
 800aace:	4615      	mov	r5, r2
 800aad0:	e7ba      	b.n	800aa48 <_printf_i+0x150>
 800aad2:	682b      	ldr	r3, [r5, #0]
 800aad4:	1d1a      	adds	r2, r3, #4
 800aad6:	602a      	str	r2, [r5, #0]
 800aad8:	681d      	ldr	r5, [r3, #0]
 800aada:	6862      	ldr	r2, [r4, #4]
 800aadc:	2100      	movs	r1, #0
 800aade:	4628      	mov	r0, r5
 800aae0:	f7f5 fb9e 	bl	8000220 <memchr>
 800aae4:	b108      	cbz	r0, 800aaea <_printf_i+0x1f2>
 800aae6:	1b40      	subs	r0, r0, r5
 800aae8:	6060      	str	r0, [r4, #4]
 800aaea:	6863      	ldr	r3, [r4, #4]
 800aaec:	6123      	str	r3, [r4, #16]
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaf4:	e7a8      	b.n	800aa48 <_printf_i+0x150>
 800aaf6:	6923      	ldr	r3, [r4, #16]
 800aaf8:	462a      	mov	r2, r5
 800aafa:	4649      	mov	r1, r9
 800aafc:	4640      	mov	r0, r8
 800aafe:	47d0      	blx	sl
 800ab00:	3001      	adds	r0, #1
 800ab02:	d0ab      	beq.n	800aa5c <_printf_i+0x164>
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	079b      	lsls	r3, r3, #30
 800ab08:	d413      	bmi.n	800ab32 <_printf_i+0x23a>
 800ab0a:	68e0      	ldr	r0, [r4, #12]
 800ab0c:	9b03      	ldr	r3, [sp, #12]
 800ab0e:	4298      	cmp	r0, r3
 800ab10:	bfb8      	it	lt
 800ab12:	4618      	movlt	r0, r3
 800ab14:	e7a4      	b.n	800aa60 <_printf_i+0x168>
 800ab16:	2301      	movs	r3, #1
 800ab18:	4632      	mov	r2, r6
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	47d0      	blx	sl
 800ab20:	3001      	adds	r0, #1
 800ab22:	d09b      	beq.n	800aa5c <_printf_i+0x164>
 800ab24:	3501      	adds	r5, #1
 800ab26:	68e3      	ldr	r3, [r4, #12]
 800ab28:	9903      	ldr	r1, [sp, #12]
 800ab2a:	1a5b      	subs	r3, r3, r1
 800ab2c:	42ab      	cmp	r3, r5
 800ab2e:	dcf2      	bgt.n	800ab16 <_printf_i+0x21e>
 800ab30:	e7eb      	b.n	800ab0a <_printf_i+0x212>
 800ab32:	2500      	movs	r5, #0
 800ab34:	f104 0619 	add.w	r6, r4, #25
 800ab38:	e7f5      	b.n	800ab26 <_printf_i+0x22e>
 800ab3a:	bf00      	nop
 800ab3c:	0800de3b 	.word	0x0800de3b
 800ab40:	0800de4c 	.word	0x0800de4c

0800ab44 <_sbrk_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4d06      	ldr	r5, [pc, #24]	; (800ab60 <_sbrk_r+0x1c>)
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	602b      	str	r3, [r5, #0]
 800ab50:	f7f6 fb42 	bl	80011d8 <_sbrk>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d102      	bne.n	800ab5e <_sbrk_r+0x1a>
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	b103      	cbz	r3, 800ab5e <_sbrk_r+0x1a>
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	2000b220 	.word	0x2000b220

0800ab64 <_raise_r>:
 800ab64:	291f      	cmp	r1, #31
 800ab66:	b538      	push	{r3, r4, r5, lr}
 800ab68:	4604      	mov	r4, r0
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	d904      	bls.n	800ab78 <_raise_r+0x14>
 800ab6e:	2316      	movs	r3, #22
 800ab70:	6003      	str	r3, [r0, #0]
 800ab72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab7a:	b112      	cbz	r2, 800ab82 <_raise_r+0x1e>
 800ab7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab80:	b94b      	cbnz	r3, 800ab96 <_raise_r+0x32>
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 f830 	bl	800abe8 <_getpid_r>
 800ab88:	462a      	mov	r2, r5
 800ab8a:	4601      	mov	r1, r0
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab92:	f000 b817 	b.w	800abc4 <_kill_r>
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d00a      	beq.n	800abb0 <_raise_r+0x4c>
 800ab9a:	1c59      	adds	r1, r3, #1
 800ab9c:	d103      	bne.n	800aba6 <_raise_r+0x42>
 800ab9e:	2316      	movs	r3, #22
 800aba0:	6003      	str	r3, [r0, #0]
 800aba2:	2001      	movs	r0, #1
 800aba4:	e7e7      	b.n	800ab76 <_raise_r+0x12>
 800aba6:	2400      	movs	r4, #0
 800aba8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abac:	4628      	mov	r0, r5
 800abae:	4798      	blx	r3
 800abb0:	2000      	movs	r0, #0
 800abb2:	e7e0      	b.n	800ab76 <_raise_r+0x12>

0800abb4 <raise>:
 800abb4:	4b02      	ldr	r3, [pc, #8]	; (800abc0 <raise+0xc>)
 800abb6:	4601      	mov	r1, r0
 800abb8:	6818      	ldr	r0, [r3, #0]
 800abba:	f7ff bfd3 	b.w	800ab64 <_raise_r>
 800abbe:	bf00      	nop
 800abc0:	200000dc 	.word	0x200000dc

0800abc4 <_kill_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4d07      	ldr	r5, [pc, #28]	; (800abe4 <_kill_r+0x20>)
 800abc8:	2300      	movs	r3, #0
 800abca:	4604      	mov	r4, r0
 800abcc:	4608      	mov	r0, r1
 800abce:	4611      	mov	r1, r2
 800abd0:	602b      	str	r3, [r5, #0]
 800abd2:	f7f6 fac9 	bl	8001168 <_kill>
 800abd6:	1c43      	adds	r3, r0, #1
 800abd8:	d102      	bne.n	800abe0 <_kill_r+0x1c>
 800abda:	682b      	ldr	r3, [r5, #0]
 800abdc:	b103      	cbz	r3, 800abe0 <_kill_r+0x1c>
 800abde:	6023      	str	r3, [r4, #0]
 800abe0:	bd38      	pop	{r3, r4, r5, pc}
 800abe2:	bf00      	nop
 800abe4:	2000b220 	.word	0x2000b220

0800abe8 <_getpid_r>:
 800abe8:	f7f6 babc 	b.w	8001164 <_getpid>

0800abec <strstr>:
 800abec:	780a      	ldrb	r2, [r1, #0]
 800abee:	b570      	push	{r4, r5, r6, lr}
 800abf0:	b96a      	cbnz	r2, 800ac0e <strstr+0x22>
 800abf2:	bd70      	pop	{r4, r5, r6, pc}
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d109      	bne.n	800ac0c <strstr+0x20>
 800abf8:	460c      	mov	r4, r1
 800abfa:	4605      	mov	r5, r0
 800abfc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d0f6      	beq.n	800abf2 <strstr+0x6>
 800ac04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ac08:	429e      	cmp	r6, r3
 800ac0a:	d0f7      	beq.n	800abfc <strstr+0x10>
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	7803      	ldrb	r3, [r0, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1ef      	bne.n	800abf4 <strstr+0x8>
 800ac14:	4618      	mov	r0, r3
 800ac16:	e7ec      	b.n	800abf2 <strstr+0x6>

0800ac18 <_strtol_l.constprop.0>:
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac1e:	d001      	beq.n	800ac24 <_strtol_l.constprop.0+0xc>
 800ac20:	2b24      	cmp	r3, #36	; 0x24
 800ac22:	d906      	bls.n	800ac32 <_strtol_l.constprop.0+0x1a>
 800ac24:	f000 ff46 	bl	800bab4 <__errno>
 800ac28:	2316      	movs	r3, #22
 800ac2a:	6003      	str	r3, [r0, #0]
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ad18 <_strtol_l.constprop.0+0x100>
 800ac36:	460d      	mov	r5, r1
 800ac38:	462e      	mov	r6, r5
 800ac3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ac42:	f017 0708 	ands.w	r7, r7, #8
 800ac46:	d1f7      	bne.n	800ac38 <_strtol_l.constprop.0+0x20>
 800ac48:	2c2d      	cmp	r4, #45	; 0x2d
 800ac4a:	d132      	bne.n	800acb2 <_strtol_l.constprop.0+0x9a>
 800ac4c:	782c      	ldrb	r4, [r5, #0]
 800ac4e:	2701      	movs	r7, #1
 800ac50:	1cb5      	adds	r5, r6, #2
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d05b      	beq.n	800ad0e <_strtol_l.constprop.0+0xf6>
 800ac56:	2b10      	cmp	r3, #16
 800ac58:	d109      	bne.n	800ac6e <_strtol_l.constprop.0+0x56>
 800ac5a:	2c30      	cmp	r4, #48	; 0x30
 800ac5c:	d107      	bne.n	800ac6e <_strtol_l.constprop.0+0x56>
 800ac5e:	782c      	ldrb	r4, [r5, #0]
 800ac60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac64:	2c58      	cmp	r4, #88	; 0x58
 800ac66:	d14d      	bne.n	800ad04 <_strtol_l.constprop.0+0xec>
 800ac68:	786c      	ldrb	r4, [r5, #1]
 800ac6a:	2310      	movs	r3, #16
 800ac6c:	3502      	adds	r5, #2
 800ac6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ac72:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ac76:	f04f 0c00 	mov.w	ip, #0
 800ac7a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ac7e:	4666      	mov	r6, ip
 800ac80:	fb03 8a19 	mls	sl, r3, r9, r8
 800ac84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ac88:	f1be 0f09 	cmp.w	lr, #9
 800ac8c:	d816      	bhi.n	800acbc <_strtol_l.constprop.0+0xa4>
 800ac8e:	4674      	mov	r4, lr
 800ac90:	42a3      	cmp	r3, r4
 800ac92:	dd24      	ble.n	800acde <_strtol_l.constprop.0+0xc6>
 800ac94:	f1bc 0f00 	cmp.w	ip, #0
 800ac98:	db1e      	blt.n	800acd8 <_strtol_l.constprop.0+0xc0>
 800ac9a:	45b1      	cmp	r9, r6
 800ac9c:	d31c      	bcc.n	800acd8 <_strtol_l.constprop.0+0xc0>
 800ac9e:	d101      	bne.n	800aca4 <_strtol_l.constprop.0+0x8c>
 800aca0:	45a2      	cmp	sl, r4
 800aca2:	db19      	blt.n	800acd8 <_strtol_l.constprop.0+0xc0>
 800aca4:	fb06 4603 	mla	r6, r6, r3, r4
 800aca8:	f04f 0c01 	mov.w	ip, #1
 800acac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acb0:	e7e8      	b.n	800ac84 <_strtol_l.constprop.0+0x6c>
 800acb2:	2c2b      	cmp	r4, #43	; 0x2b
 800acb4:	bf04      	itt	eq
 800acb6:	782c      	ldrbeq	r4, [r5, #0]
 800acb8:	1cb5      	addeq	r5, r6, #2
 800acba:	e7ca      	b.n	800ac52 <_strtol_l.constprop.0+0x3a>
 800acbc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800acc0:	f1be 0f19 	cmp.w	lr, #25
 800acc4:	d801      	bhi.n	800acca <_strtol_l.constprop.0+0xb2>
 800acc6:	3c37      	subs	r4, #55	; 0x37
 800acc8:	e7e2      	b.n	800ac90 <_strtol_l.constprop.0+0x78>
 800acca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800acce:	f1be 0f19 	cmp.w	lr, #25
 800acd2:	d804      	bhi.n	800acde <_strtol_l.constprop.0+0xc6>
 800acd4:	3c57      	subs	r4, #87	; 0x57
 800acd6:	e7db      	b.n	800ac90 <_strtol_l.constprop.0+0x78>
 800acd8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800acdc:	e7e6      	b.n	800acac <_strtol_l.constprop.0+0x94>
 800acde:	f1bc 0f00 	cmp.w	ip, #0
 800ace2:	da05      	bge.n	800acf0 <_strtol_l.constprop.0+0xd8>
 800ace4:	2322      	movs	r3, #34	; 0x22
 800ace6:	6003      	str	r3, [r0, #0]
 800ace8:	4646      	mov	r6, r8
 800acea:	b942      	cbnz	r2, 800acfe <_strtol_l.constprop.0+0xe6>
 800acec:	4630      	mov	r0, r6
 800acee:	e79e      	b.n	800ac2e <_strtol_l.constprop.0+0x16>
 800acf0:	b107      	cbz	r7, 800acf4 <_strtol_l.constprop.0+0xdc>
 800acf2:	4276      	negs	r6, r6
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	d0f9      	beq.n	800acec <_strtol_l.constprop.0+0xd4>
 800acf8:	f1bc 0f00 	cmp.w	ip, #0
 800acfc:	d000      	beq.n	800ad00 <_strtol_l.constprop.0+0xe8>
 800acfe:	1e69      	subs	r1, r5, #1
 800ad00:	6011      	str	r1, [r2, #0]
 800ad02:	e7f3      	b.n	800acec <_strtol_l.constprop.0+0xd4>
 800ad04:	2430      	movs	r4, #48	; 0x30
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1b1      	bne.n	800ac6e <_strtol_l.constprop.0+0x56>
 800ad0a:	2308      	movs	r3, #8
 800ad0c:	e7af      	b.n	800ac6e <_strtol_l.constprop.0+0x56>
 800ad0e:	2c30      	cmp	r4, #48	; 0x30
 800ad10:	d0a5      	beq.n	800ac5e <_strtol_l.constprop.0+0x46>
 800ad12:	230a      	movs	r3, #10
 800ad14:	e7ab      	b.n	800ac6e <_strtol_l.constprop.0+0x56>
 800ad16:	bf00      	nop
 800ad18:	0800dd11 	.word	0x0800dd11

0800ad1c <strtol>:
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	460a      	mov	r2, r1
 800ad20:	4601      	mov	r1, r0
 800ad22:	4802      	ldr	r0, [pc, #8]	; (800ad2c <strtol+0x10>)
 800ad24:	6800      	ldr	r0, [r0, #0]
 800ad26:	f7ff bf77 	b.w	800ac18 <_strtol_l.constprop.0>
 800ad2a:	bf00      	nop
 800ad2c:	200000dc 	.word	0x200000dc

0800ad30 <sbrk>:
 800ad30:	4b02      	ldr	r3, [pc, #8]	; (800ad3c <sbrk+0xc>)
 800ad32:	4601      	mov	r1, r0
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	f7ff bf05 	b.w	800ab44 <_sbrk_r>
 800ad3a:	bf00      	nop
 800ad3c:	200000dc 	.word	0x200000dc

0800ad40 <_vasiprintf_r>:
 800ad40:	b530      	push	{r4, r5, lr}
 800ad42:	460d      	mov	r5, r1
 800ad44:	4909      	ldr	r1, [pc, #36]	; (800ad6c <_vasiprintf_r+0x2c>)
 800ad46:	b09b      	sub	sp, #108	; 0x6c
 800ad48:	2400      	movs	r4, #0
 800ad4a:	e9cd 1403 	strd	r1, r4, [sp, #12]
 800ad4e:	4669      	mov	r1, sp
 800ad50:	9400      	str	r4, [sp, #0]
 800ad52:	9402      	str	r4, [sp, #8]
 800ad54:	9405      	str	r4, [sp, #20]
 800ad56:	f7ff f98b 	bl	800a070 <_svfiprintf_r>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	bfa1      	itttt	ge
 800ad5e:	9b00      	ldrge	r3, [sp, #0]
 800ad60:	701c      	strbge	r4, [r3, #0]
 800ad62:	9b04      	ldrge	r3, [sp, #16]
 800ad64:	602b      	strge	r3, [r5, #0]
 800ad66:	b01b      	add	sp, #108	; 0x6c
 800ad68:	bd30      	pop	{r4, r5, pc}
 800ad6a:	bf00      	nop
 800ad6c:	ffff0288 	.word	0xffff0288

0800ad70 <vasiprintf>:
 800ad70:	4613      	mov	r3, r2
 800ad72:	460a      	mov	r2, r1
 800ad74:	4601      	mov	r1, r0
 800ad76:	4802      	ldr	r0, [pc, #8]	; (800ad80 <vasiprintf+0x10>)
 800ad78:	6800      	ldr	r0, [r0, #0]
 800ad7a:	f7ff bfe1 	b.w	800ad40 <_vasiprintf_r>
 800ad7e:	bf00      	nop
 800ad80:	200000dc 	.word	0x200000dc

0800ad84 <__assert_func>:
 800ad84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad86:	4614      	mov	r4, r2
 800ad88:	461a      	mov	r2, r3
 800ad8a:	4b09      	ldr	r3, [pc, #36]	; (800adb0 <__assert_func+0x2c>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4605      	mov	r5, r0
 800ad90:	68d8      	ldr	r0, [r3, #12]
 800ad92:	b14c      	cbz	r4, 800ada8 <__assert_func+0x24>
 800ad94:	4b07      	ldr	r3, [pc, #28]	; (800adb4 <__assert_func+0x30>)
 800ad96:	9100      	str	r1, [sp, #0]
 800ad98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad9c:	4906      	ldr	r1, [pc, #24]	; (800adb8 <__assert_func+0x34>)
 800ad9e:	462b      	mov	r3, r5
 800ada0:	f000 ff64 	bl	800bc6c <fiprintf>
 800ada4:	f7fe ff44 	bl	8009c30 <abort>
 800ada8:	4b04      	ldr	r3, [pc, #16]	; (800adbc <__assert_func+0x38>)
 800adaa:	461c      	mov	r4, r3
 800adac:	e7f3      	b.n	800ad96 <__assert_func+0x12>
 800adae:	bf00      	nop
 800adb0:	200000dc 	.word	0x200000dc
 800adb4:	0800de5d 	.word	0x0800de5d
 800adb8:	0800de6a 	.word	0x0800de6a
 800adbc:	0800de98 	.word	0x0800de98

0800adc0 <quorem>:
 800adc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	6903      	ldr	r3, [r0, #16]
 800adc6:	690c      	ldr	r4, [r1, #16]
 800adc8:	42a3      	cmp	r3, r4
 800adca:	4607      	mov	r7, r0
 800adcc:	f2c0 8081 	blt.w	800aed2 <quorem+0x112>
 800add0:	3c01      	subs	r4, #1
 800add2:	f101 0814 	add.w	r8, r1, #20
 800add6:	f100 0514 	add.w	r5, r0, #20
 800adda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ade4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ade8:	3301      	adds	r3, #1
 800adea:	429a      	cmp	r2, r3
 800adec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800adf4:	fbb2 f6f3 	udiv	r6, r2, r3
 800adf8:	d331      	bcc.n	800ae5e <quorem+0x9e>
 800adfa:	f04f 0e00 	mov.w	lr, #0
 800adfe:	4640      	mov	r0, r8
 800ae00:	46ac      	mov	ip, r5
 800ae02:	46f2      	mov	sl, lr
 800ae04:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae08:	b293      	uxth	r3, r2
 800ae0a:	fb06 e303 	mla	r3, r6, r3, lr
 800ae0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	ebaa 0303 	sub.w	r3, sl, r3
 800ae18:	f8dc a000 	ldr.w	sl, [ip]
 800ae1c:	0c12      	lsrs	r2, r2, #16
 800ae1e:	fa13 f38a 	uxtah	r3, r3, sl
 800ae22:	fb06 e202 	mla	r2, r6, r2, lr
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	9b00      	ldr	r3, [sp, #0]
 800ae2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae2e:	b292      	uxth	r2, r2
 800ae30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae38:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae3c:	4581      	cmp	r9, r0
 800ae3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae42:	f84c 3b04 	str.w	r3, [ip], #4
 800ae46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae4a:	d2db      	bcs.n	800ae04 <quorem+0x44>
 800ae4c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae50:	b92b      	cbnz	r3, 800ae5e <quorem+0x9e>
 800ae52:	9b01      	ldr	r3, [sp, #4]
 800ae54:	3b04      	subs	r3, #4
 800ae56:	429d      	cmp	r5, r3
 800ae58:	461a      	mov	r2, r3
 800ae5a:	d32e      	bcc.n	800aeba <quorem+0xfa>
 800ae5c:	613c      	str	r4, [r7, #16]
 800ae5e:	4638      	mov	r0, r7
 800ae60:	f001 f9cc 	bl	800c1fc <__mcmp>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	db24      	blt.n	800aeb2 <quorem+0xf2>
 800ae68:	3601      	adds	r6, #1
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	f04f 0c00 	mov.w	ip, #0
 800ae70:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae74:	f8d0 e000 	ldr.w	lr, [r0]
 800ae78:	b293      	uxth	r3, r2
 800ae7a:	ebac 0303 	sub.w	r3, ip, r3
 800ae7e:	0c12      	lsrs	r2, r2, #16
 800ae80:	fa13 f38e 	uxtah	r3, r3, lr
 800ae84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae92:	45c1      	cmp	r9, r8
 800ae94:	f840 3b04 	str.w	r3, [r0], #4
 800ae98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae9c:	d2e8      	bcs.n	800ae70 <quorem+0xb0>
 800ae9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aea6:	b922      	cbnz	r2, 800aeb2 <quorem+0xf2>
 800aea8:	3b04      	subs	r3, #4
 800aeaa:	429d      	cmp	r5, r3
 800aeac:	461a      	mov	r2, r3
 800aeae:	d30a      	bcc.n	800aec6 <quorem+0x106>
 800aeb0:	613c      	str	r4, [r7, #16]
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	b003      	add	sp, #12
 800aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeba:	6812      	ldr	r2, [r2, #0]
 800aebc:	3b04      	subs	r3, #4
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	d1cc      	bne.n	800ae5c <quorem+0x9c>
 800aec2:	3c01      	subs	r4, #1
 800aec4:	e7c7      	b.n	800ae56 <quorem+0x96>
 800aec6:	6812      	ldr	r2, [r2, #0]
 800aec8:	3b04      	subs	r3, #4
 800aeca:	2a00      	cmp	r2, #0
 800aecc:	d1f0      	bne.n	800aeb0 <quorem+0xf0>
 800aece:	3c01      	subs	r4, #1
 800aed0:	e7eb      	b.n	800aeaa <quorem+0xea>
 800aed2:	2000      	movs	r0, #0
 800aed4:	e7ee      	b.n	800aeb4 <quorem+0xf4>
	...

0800aed8 <_dtoa_r>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	ed2d 8b04 	vpush	{d8-d9}
 800aee0:	ec57 6b10 	vmov	r6, r7, d0
 800aee4:	b093      	sub	sp, #76	; 0x4c
 800aee6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aee8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aeec:	9106      	str	r1, [sp, #24]
 800aeee:	ee10 aa10 	vmov	sl, s0
 800aef2:	4604      	mov	r4, r0
 800aef4:	9209      	str	r2, [sp, #36]	; 0x24
 800aef6:	930c      	str	r3, [sp, #48]	; 0x30
 800aef8:	46bb      	mov	fp, r7
 800aefa:	b975      	cbnz	r5, 800af1a <_dtoa_r+0x42>
 800aefc:	2010      	movs	r0, #16
 800aefe:	f7fe fee7 	bl	8009cd0 <malloc>
 800af02:	4602      	mov	r2, r0
 800af04:	6260      	str	r0, [r4, #36]	; 0x24
 800af06:	b920      	cbnz	r0, 800af12 <_dtoa_r+0x3a>
 800af08:	4ba7      	ldr	r3, [pc, #668]	; (800b1a8 <_dtoa_r+0x2d0>)
 800af0a:	21ea      	movs	r1, #234	; 0xea
 800af0c:	48a7      	ldr	r0, [pc, #668]	; (800b1ac <_dtoa_r+0x2d4>)
 800af0e:	f7ff ff39 	bl	800ad84 <__assert_func>
 800af12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af16:	6005      	str	r5, [r0, #0]
 800af18:	60c5      	str	r5, [r0, #12]
 800af1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af1c:	6819      	ldr	r1, [r3, #0]
 800af1e:	b151      	cbz	r1, 800af36 <_dtoa_r+0x5e>
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	604a      	str	r2, [r1, #4]
 800af24:	2301      	movs	r3, #1
 800af26:	4093      	lsls	r3, r2
 800af28:	608b      	str	r3, [r1, #8]
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 ff24 	bl	800bd78 <_Bfree>
 800af30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	1e3b      	subs	r3, r7, #0
 800af38:	bfaa      	itet	ge
 800af3a:	2300      	movge	r3, #0
 800af3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800af40:	f8c8 3000 	strge.w	r3, [r8]
 800af44:	4b9a      	ldr	r3, [pc, #616]	; (800b1b0 <_dtoa_r+0x2d8>)
 800af46:	bfbc      	itt	lt
 800af48:	2201      	movlt	r2, #1
 800af4a:	f8c8 2000 	strlt.w	r2, [r8]
 800af4e:	ea33 030b 	bics.w	r3, r3, fp
 800af52:	d11b      	bne.n	800af8c <_dtoa_r+0xb4>
 800af54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af56:	f242 730f 	movw	r3, #9999	; 0x270f
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af60:	4333      	orrs	r3, r6
 800af62:	f000 8592 	beq.w	800ba8a <_dtoa_r+0xbb2>
 800af66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af68:	b963      	cbnz	r3, 800af84 <_dtoa_r+0xac>
 800af6a:	4b92      	ldr	r3, [pc, #584]	; (800b1b4 <_dtoa_r+0x2dc>)
 800af6c:	e022      	b.n	800afb4 <_dtoa_r+0xdc>
 800af6e:	4b92      	ldr	r3, [pc, #584]	; (800b1b8 <_dtoa_r+0x2e0>)
 800af70:	9301      	str	r3, [sp, #4]
 800af72:	3308      	adds	r3, #8
 800af74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	9801      	ldr	r0, [sp, #4]
 800af7a:	b013      	add	sp, #76	; 0x4c
 800af7c:	ecbd 8b04 	vpop	{d8-d9}
 800af80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af84:	4b8b      	ldr	r3, [pc, #556]	; (800b1b4 <_dtoa_r+0x2dc>)
 800af86:	9301      	str	r3, [sp, #4]
 800af88:	3303      	adds	r3, #3
 800af8a:	e7f3      	b.n	800af74 <_dtoa_r+0x9c>
 800af8c:	2200      	movs	r2, #0
 800af8e:	2300      	movs	r3, #0
 800af90:	4650      	mov	r0, sl
 800af92:	4659      	mov	r1, fp
 800af94:	f7f5 fdb8 	bl	8000b08 <__aeabi_dcmpeq>
 800af98:	ec4b ab19 	vmov	d9, sl, fp
 800af9c:	4680      	mov	r8, r0
 800af9e:	b158      	cbz	r0, 800afb8 <_dtoa_r+0xe0>
 800afa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afa2:	2301      	movs	r3, #1
 800afa4:	6013      	str	r3, [r2, #0]
 800afa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f000 856b 	beq.w	800ba84 <_dtoa_r+0xbac>
 800afae:	4883      	ldr	r0, [pc, #524]	; (800b1bc <_dtoa_r+0x2e4>)
 800afb0:	6018      	str	r0, [r3, #0]
 800afb2:	1e43      	subs	r3, r0, #1
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	e7df      	b.n	800af78 <_dtoa_r+0xa0>
 800afb8:	ec4b ab10 	vmov	d0, sl, fp
 800afbc:	aa10      	add	r2, sp, #64	; 0x40
 800afbe:	a911      	add	r1, sp, #68	; 0x44
 800afc0:	4620      	mov	r0, r4
 800afc2:	f001 f9c1 	bl	800c348 <__d2b>
 800afc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800afca:	ee08 0a10 	vmov	s16, r0
 800afce:	2d00      	cmp	r5, #0
 800afd0:	f000 8084 	beq.w	800b0dc <_dtoa_r+0x204>
 800afd4:	ee19 3a90 	vmov	r3, s19
 800afd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800afe0:	4656      	mov	r6, sl
 800afe2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800afe6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800afea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800afee:	4b74      	ldr	r3, [pc, #464]	; (800b1c0 <_dtoa_r+0x2e8>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	4630      	mov	r0, r6
 800aff4:	4639      	mov	r1, r7
 800aff6:	f7f5 f967 	bl	80002c8 <__aeabi_dsub>
 800affa:	a365      	add	r3, pc, #404	; (adr r3, 800b190 <_dtoa_r+0x2b8>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	f7f5 fb1a 	bl	8000638 <__aeabi_dmul>
 800b004:	a364      	add	r3, pc, #400	; (adr r3, 800b198 <_dtoa_r+0x2c0>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	f7f5 f95f 	bl	80002cc <__adddf3>
 800b00e:	4606      	mov	r6, r0
 800b010:	4628      	mov	r0, r5
 800b012:	460f      	mov	r7, r1
 800b014:	f7f5 faa6 	bl	8000564 <__aeabi_i2d>
 800b018:	a361      	add	r3, pc, #388	; (adr r3, 800b1a0 <_dtoa_r+0x2c8>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	f7f5 fb0b 	bl	8000638 <__aeabi_dmul>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4630      	mov	r0, r6
 800b028:	4639      	mov	r1, r7
 800b02a:	f7f5 f94f 	bl	80002cc <__adddf3>
 800b02e:	4606      	mov	r6, r0
 800b030:	460f      	mov	r7, r1
 800b032:	f7f5 fdb1 	bl	8000b98 <__aeabi_d2iz>
 800b036:	2200      	movs	r2, #0
 800b038:	9000      	str	r0, [sp, #0]
 800b03a:	2300      	movs	r3, #0
 800b03c:	4630      	mov	r0, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	f7f5 fd6c 	bl	8000b1c <__aeabi_dcmplt>
 800b044:	b150      	cbz	r0, 800b05c <_dtoa_r+0x184>
 800b046:	9800      	ldr	r0, [sp, #0]
 800b048:	f7f5 fa8c 	bl	8000564 <__aeabi_i2d>
 800b04c:	4632      	mov	r2, r6
 800b04e:	463b      	mov	r3, r7
 800b050:	f7f5 fd5a 	bl	8000b08 <__aeabi_dcmpeq>
 800b054:	b910      	cbnz	r0, 800b05c <_dtoa_r+0x184>
 800b056:	9b00      	ldr	r3, [sp, #0]
 800b058:	3b01      	subs	r3, #1
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	9b00      	ldr	r3, [sp, #0]
 800b05e:	2b16      	cmp	r3, #22
 800b060:	d85a      	bhi.n	800b118 <_dtoa_r+0x240>
 800b062:	9a00      	ldr	r2, [sp, #0]
 800b064:	4b57      	ldr	r3, [pc, #348]	; (800b1c4 <_dtoa_r+0x2ec>)
 800b066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06e:	ec51 0b19 	vmov	r0, r1, d9
 800b072:	f7f5 fd53 	bl	8000b1c <__aeabi_dcmplt>
 800b076:	2800      	cmp	r0, #0
 800b078:	d050      	beq.n	800b11c <_dtoa_r+0x244>
 800b07a:	9b00      	ldr	r3, [sp, #0]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	2300      	movs	r3, #0
 800b082:	930b      	str	r3, [sp, #44]	; 0x2c
 800b084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b086:	1b5d      	subs	r5, r3, r5
 800b088:	1e6b      	subs	r3, r5, #1
 800b08a:	9305      	str	r3, [sp, #20]
 800b08c:	bf45      	ittet	mi
 800b08e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b092:	9304      	strmi	r3, [sp, #16]
 800b094:	2300      	movpl	r3, #0
 800b096:	2300      	movmi	r3, #0
 800b098:	bf4c      	ite	mi
 800b09a:	9305      	strmi	r3, [sp, #20]
 800b09c:	9304      	strpl	r3, [sp, #16]
 800b09e:	9b00      	ldr	r3, [sp, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	db3d      	blt.n	800b120 <_dtoa_r+0x248>
 800b0a4:	9b05      	ldr	r3, [sp, #20]
 800b0a6:	9a00      	ldr	r2, [sp, #0]
 800b0a8:	920a      	str	r2, [sp, #40]	; 0x28
 800b0aa:	4413      	add	r3, r2
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	9307      	str	r3, [sp, #28]
 800b0b2:	9b06      	ldr	r3, [sp, #24]
 800b0b4:	2b09      	cmp	r3, #9
 800b0b6:	f200 8089 	bhi.w	800b1cc <_dtoa_r+0x2f4>
 800b0ba:	2b05      	cmp	r3, #5
 800b0bc:	bfc4      	itt	gt
 800b0be:	3b04      	subgt	r3, #4
 800b0c0:	9306      	strgt	r3, [sp, #24]
 800b0c2:	9b06      	ldr	r3, [sp, #24]
 800b0c4:	f1a3 0302 	sub.w	r3, r3, #2
 800b0c8:	bfcc      	ite	gt
 800b0ca:	2500      	movgt	r5, #0
 800b0cc:	2501      	movle	r5, #1
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	f200 8087 	bhi.w	800b1e2 <_dtoa_r+0x30a>
 800b0d4:	e8df f003 	tbb	[pc, r3]
 800b0d8:	59383a2d 	.word	0x59383a2d
 800b0dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b0e0:	441d      	add	r5, r3
 800b0e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	bfc1      	itttt	gt
 800b0ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b0f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b0f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0fa:	bfda      	itte	le
 800b0fc:	f1c3 0320 	rsble	r3, r3, #32
 800b100:	fa06 f003 	lslle.w	r0, r6, r3
 800b104:	4318      	orrgt	r0, r3
 800b106:	f7f5 fa1d 	bl	8000544 <__aeabi_ui2d>
 800b10a:	2301      	movs	r3, #1
 800b10c:	4606      	mov	r6, r0
 800b10e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b112:	3d01      	subs	r5, #1
 800b114:	930e      	str	r3, [sp, #56]	; 0x38
 800b116:	e76a      	b.n	800afee <_dtoa_r+0x116>
 800b118:	2301      	movs	r3, #1
 800b11a:	e7b2      	b.n	800b082 <_dtoa_r+0x1aa>
 800b11c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b11e:	e7b1      	b.n	800b084 <_dtoa_r+0x1ac>
 800b120:	9b04      	ldr	r3, [sp, #16]
 800b122:	9a00      	ldr	r2, [sp, #0]
 800b124:	1a9b      	subs	r3, r3, r2
 800b126:	9304      	str	r3, [sp, #16]
 800b128:	4253      	negs	r3, r2
 800b12a:	9307      	str	r3, [sp, #28]
 800b12c:	2300      	movs	r3, #0
 800b12e:	930a      	str	r3, [sp, #40]	; 0x28
 800b130:	e7bf      	b.n	800b0b2 <_dtoa_r+0x1da>
 800b132:	2300      	movs	r3, #0
 800b134:	9308      	str	r3, [sp, #32]
 800b136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b138:	2b00      	cmp	r3, #0
 800b13a:	dc55      	bgt.n	800b1e8 <_dtoa_r+0x310>
 800b13c:	2301      	movs	r3, #1
 800b13e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b142:	461a      	mov	r2, r3
 800b144:	9209      	str	r2, [sp, #36]	; 0x24
 800b146:	e00c      	b.n	800b162 <_dtoa_r+0x28a>
 800b148:	2301      	movs	r3, #1
 800b14a:	e7f3      	b.n	800b134 <_dtoa_r+0x25c>
 800b14c:	2300      	movs	r3, #0
 800b14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b150:	9308      	str	r3, [sp, #32]
 800b152:	9b00      	ldr	r3, [sp, #0]
 800b154:	4413      	add	r3, r2
 800b156:	9302      	str	r3, [sp, #8]
 800b158:	3301      	adds	r3, #1
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	9303      	str	r3, [sp, #12]
 800b15e:	bfb8      	it	lt
 800b160:	2301      	movlt	r3, #1
 800b162:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b164:	2200      	movs	r2, #0
 800b166:	6042      	str	r2, [r0, #4]
 800b168:	2204      	movs	r2, #4
 800b16a:	f102 0614 	add.w	r6, r2, #20
 800b16e:	429e      	cmp	r6, r3
 800b170:	6841      	ldr	r1, [r0, #4]
 800b172:	d93d      	bls.n	800b1f0 <_dtoa_r+0x318>
 800b174:	4620      	mov	r0, r4
 800b176:	f000 fdbf 	bl	800bcf8 <_Balloc>
 800b17a:	9001      	str	r0, [sp, #4]
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d13b      	bne.n	800b1f8 <_dtoa_r+0x320>
 800b180:	4b11      	ldr	r3, [pc, #68]	; (800b1c8 <_dtoa_r+0x2f0>)
 800b182:	4602      	mov	r2, r0
 800b184:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b188:	e6c0      	b.n	800af0c <_dtoa_r+0x34>
 800b18a:	2301      	movs	r3, #1
 800b18c:	e7df      	b.n	800b14e <_dtoa_r+0x276>
 800b18e:	bf00      	nop
 800b190:	636f4361 	.word	0x636f4361
 800b194:	3fd287a7 	.word	0x3fd287a7
 800b198:	8b60c8b3 	.word	0x8b60c8b3
 800b19c:	3fc68a28 	.word	0x3fc68a28
 800b1a0:	509f79fb 	.word	0x509f79fb
 800b1a4:	3fd34413 	.word	0x3fd34413
 800b1a8:	0800dea6 	.word	0x0800dea6
 800b1ac:	0800debd 	.word	0x0800debd
 800b1b0:	7ff00000 	.word	0x7ff00000
 800b1b4:	0800dea2 	.word	0x0800dea2
 800b1b8:	0800de99 	.word	0x0800de99
 800b1bc:	0800de3a 	.word	0x0800de3a
 800b1c0:	3ff80000 	.word	0x3ff80000
 800b1c4:	0800e010 	.word	0x0800e010
 800b1c8:	0800df18 	.word	0x0800df18
 800b1cc:	2501      	movs	r5, #1
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	9306      	str	r3, [sp, #24]
 800b1d2:	9508      	str	r5, [sp, #32]
 800b1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2312      	movs	r3, #18
 800b1e0:	e7b0      	b.n	800b144 <_dtoa_r+0x26c>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	9308      	str	r3, [sp, #32]
 800b1e6:	e7f5      	b.n	800b1d4 <_dtoa_r+0x2fc>
 800b1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1ee:	e7b8      	b.n	800b162 <_dtoa_r+0x28a>
 800b1f0:	3101      	adds	r1, #1
 800b1f2:	6041      	str	r1, [r0, #4]
 800b1f4:	0052      	lsls	r2, r2, #1
 800b1f6:	e7b8      	b.n	800b16a <_dtoa_r+0x292>
 800b1f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1fa:	9a01      	ldr	r2, [sp, #4]
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	9b03      	ldr	r3, [sp, #12]
 800b200:	2b0e      	cmp	r3, #14
 800b202:	f200 809d 	bhi.w	800b340 <_dtoa_r+0x468>
 800b206:	2d00      	cmp	r5, #0
 800b208:	f000 809a 	beq.w	800b340 <_dtoa_r+0x468>
 800b20c:	9b00      	ldr	r3, [sp, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	dd32      	ble.n	800b278 <_dtoa_r+0x3a0>
 800b212:	4ab7      	ldr	r2, [pc, #732]	; (800b4f0 <_dtoa_r+0x618>)
 800b214:	f003 030f 	and.w	r3, r3, #15
 800b218:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b21c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b220:	9b00      	ldr	r3, [sp, #0]
 800b222:	05d8      	lsls	r0, r3, #23
 800b224:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b228:	d516      	bpl.n	800b258 <_dtoa_r+0x380>
 800b22a:	4bb2      	ldr	r3, [pc, #712]	; (800b4f4 <_dtoa_r+0x61c>)
 800b22c:	ec51 0b19 	vmov	r0, r1, d9
 800b230:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b234:	f7f5 fb2a 	bl	800088c <__aeabi_ddiv>
 800b238:	f007 070f 	and.w	r7, r7, #15
 800b23c:	4682      	mov	sl, r0
 800b23e:	468b      	mov	fp, r1
 800b240:	2503      	movs	r5, #3
 800b242:	4eac      	ldr	r6, [pc, #688]	; (800b4f4 <_dtoa_r+0x61c>)
 800b244:	b957      	cbnz	r7, 800b25c <_dtoa_r+0x384>
 800b246:	4642      	mov	r2, r8
 800b248:	464b      	mov	r3, r9
 800b24a:	4650      	mov	r0, sl
 800b24c:	4659      	mov	r1, fp
 800b24e:	f7f5 fb1d 	bl	800088c <__aeabi_ddiv>
 800b252:	4682      	mov	sl, r0
 800b254:	468b      	mov	fp, r1
 800b256:	e028      	b.n	800b2aa <_dtoa_r+0x3d2>
 800b258:	2502      	movs	r5, #2
 800b25a:	e7f2      	b.n	800b242 <_dtoa_r+0x36a>
 800b25c:	07f9      	lsls	r1, r7, #31
 800b25e:	d508      	bpl.n	800b272 <_dtoa_r+0x39a>
 800b260:	4640      	mov	r0, r8
 800b262:	4649      	mov	r1, r9
 800b264:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b268:	f7f5 f9e6 	bl	8000638 <__aeabi_dmul>
 800b26c:	3501      	adds	r5, #1
 800b26e:	4680      	mov	r8, r0
 800b270:	4689      	mov	r9, r1
 800b272:	107f      	asrs	r7, r7, #1
 800b274:	3608      	adds	r6, #8
 800b276:	e7e5      	b.n	800b244 <_dtoa_r+0x36c>
 800b278:	f000 809b 	beq.w	800b3b2 <_dtoa_r+0x4da>
 800b27c:	9b00      	ldr	r3, [sp, #0]
 800b27e:	4f9d      	ldr	r7, [pc, #628]	; (800b4f4 <_dtoa_r+0x61c>)
 800b280:	425e      	negs	r6, r3
 800b282:	4b9b      	ldr	r3, [pc, #620]	; (800b4f0 <_dtoa_r+0x618>)
 800b284:	f006 020f 	and.w	r2, r6, #15
 800b288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	ec51 0b19 	vmov	r0, r1, d9
 800b294:	f7f5 f9d0 	bl	8000638 <__aeabi_dmul>
 800b298:	1136      	asrs	r6, r6, #4
 800b29a:	4682      	mov	sl, r0
 800b29c:	468b      	mov	fp, r1
 800b29e:	2300      	movs	r3, #0
 800b2a0:	2502      	movs	r5, #2
 800b2a2:	2e00      	cmp	r6, #0
 800b2a4:	d17a      	bne.n	800b39c <_dtoa_r+0x4c4>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1d3      	bne.n	800b252 <_dtoa_r+0x37a>
 800b2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f000 8082 	beq.w	800b3b6 <_dtoa_r+0x4de>
 800b2b2:	4b91      	ldr	r3, [pc, #580]	; (800b4f8 <_dtoa_r+0x620>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4650      	mov	r0, sl
 800b2b8:	4659      	mov	r1, fp
 800b2ba:	f7f5 fc2f 	bl	8000b1c <__aeabi_dcmplt>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d079      	beq.n	800b3b6 <_dtoa_r+0x4de>
 800b2c2:	9b03      	ldr	r3, [sp, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d076      	beq.n	800b3b6 <_dtoa_r+0x4de>
 800b2c8:	9b02      	ldr	r3, [sp, #8]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	dd36      	ble.n	800b33c <_dtoa_r+0x464>
 800b2ce:	9b00      	ldr	r3, [sp, #0]
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	4659      	mov	r1, fp
 800b2d4:	1e5f      	subs	r7, r3, #1
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	4b88      	ldr	r3, [pc, #544]	; (800b4fc <_dtoa_r+0x624>)
 800b2da:	f7f5 f9ad 	bl	8000638 <__aeabi_dmul>
 800b2de:	9e02      	ldr	r6, [sp, #8]
 800b2e0:	4682      	mov	sl, r0
 800b2e2:	468b      	mov	fp, r1
 800b2e4:	3501      	adds	r5, #1
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f7f5 f93c 	bl	8000564 <__aeabi_i2d>
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	465b      	mov	r3, fp
 800b2f0:	f7f5 f9a2 	bl	8000638 <__aeabi_dmul>
 800b2f4:	4b82      	ldr	r3, [pc, #520]	; (800b500 <_dtoa_r+0x628>)
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f7f4 ffe8 	bl	80002cc <__adddf3>
 800b2fc:	46d0      	mov	r8, sl
 800b2fe:	46d9      	mov	r9, fp
 800b300:	4682      	mov	sl, r0
 800b302:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b306:	2e00      	cmp	r6, #0
 800b308:	d158      	bne.n	800b3bc <_dtoa_r+0x4e4>
 800b30a:	4b7e      	ldr	r3, [pc, #504]	; (800b504 <_dtoa_r+0x62c>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	4640      	mov	r0, r8
 800b310:	4649      	mov	r1, r9
 800b312:	f7f4 ffd9 	bl	80002c8 <__aeabi_dsub>
 800b316:	4652      	mov	r2, sl
 800b318:	465b      	mov	r3, fp
 800b31a:	4680      	mov	r8, r0
 800b31c:	4689      	mov	r9, r1
 800b31e:	f7f5 fc1b 	bl	8000b58 <__aeabi_dcmpgt>
 800b322:	2800      	cmp	r0, #0
 800b324:	f040 8295 	bne.w	800b852 <_dtoa_r+0x97a>
 800b328:	4652      	mov	r2, sl
 800b32a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b32e:	4640      	mov	r0, r8
 800b330:	4649      	mov	r1, r9
 800b332:	f7f5 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 800b336:	2800      	cmp	r0, #0
 800b338:	f040 8289 	bne.w	800b84e <_dtoa_r+0x976>
 800b33c:	ec5b ab19 	vmov	sl, fp, d9
 800b340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b342:	2b00      	cmp	r3, #0
 800b344:	f2c0 8148 	blt.w	800b5d8 <_dtoa_r+0x700>
 800b348:	9a00      	ldr	r2, [sp, #0]
 800b34a:	2a0e      	cmp	r2, #14
 800b34c:	f300 8144 	bgt.w	800b5d8 <_dtoa_r+0x700>
 800b350:	4b67      	ldr	r3, [pc, #412]	; (800b4f0 <_dtoa_r+0x618>)
 800b352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b356:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f280 80d5 	bge.w	800b50c <_dtoa_r+0x634>
 800b362:	9b03      	ldr	r3, [sp, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f300 80d1 	bgt.w	800b50c <_dtoa_r+0x634>
 800b36a:	f040 826f 	bne.w	800b84c <_dtoa_r+0x974>
 800b36e:	4b65      	ldr	r3, [pc, #404]	; (800b504 <_dtoa_r+0x62c>)
 800b370:	2200      	movs	r2, #0
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	f7f5 f95f 	bl	8000638 <__aeabi_dmul>
 800b37a:	4652      	mov	r2, sl
 800b37c:	465b      	mov	r3, fp
 800b37e:	f7f5 fbe1 	bl	8000b44 <__aeabi_dcmpge>
 800b382:	9e03      	ldr	r6, [sp, #12]
 800b384:	4637      	mov	r7, r6
 800b386:	2800      	cmp	r0, #0
 800b388:	f040 8245 	bne.w	800b816 <_dtoa_r+0x93e>
 800b38c:	9d01      	ldr	r5, [sp, #4]
 800b38e:	2331      	movs	r3, #49	; 0x31
 800b390:	f805 3b01 	strb.w	r3, [r5], #1
 800b394:	9b00      	ldr	r3, [sp, #0]
 800b396:	3301      	adds	r3, #1
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	e240      	b.n	800b81e <_dtoa_r+0x946>
 800b39c:	07f2      	lsls	r2, r6, #31
 800b39e:	d505      	bpl.n	800b3ac <_dtoa_r+0x4d4>
 800b3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a4:	f7f5 f948 	bl	8000638 <__aeabi_dmul>
 800b3a8:	3501      	adds	r5, #1
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	1076      	asrs	r6, r6, #1
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	e777      	b.n	800b2a2 <_dtoa_r+0x3ca>
 800b3b2:	2502      	movs	r5, #2
 800b3b4:	e779      	b.n	800b2aa <_dtoa_r+0x3d2>
 800b3b6:	9f00      	ldr	r7, [sp, #0]
 800b3b8:	9e03      	ldr	r6, [sp, #12]
 800b3ba:	e794      	b.n	800b2e6 <_dtoa_r+0x40e>
 800b3bc:	9901      	ldr	r1, [sp, #4]
 800b3be:	4b4c      	ldr	r3, [pc, #304]	; (800b4f0 <_dtoa_r+0x618>)
 800b3c0:	4431      	add	r1, r6
 800b3c2:	910d      	str	r1, [sp, #52]	; 0x34
 800b3c4:	9908      	ldr	r1, [sp, #32]
 800b3c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b3ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3ce:	2900      	cmp	r1, #0
 800b3d0:	d043      	beq.n	800b45a <_dtoa_r+0x582>
 800b3d2:	494d      	ldr	r1, [pc, #308]	; (800b508 <_dtoa_r+0x630>)
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	f7f5 fa59 	bl	800088c <__aeabi_ddiv>
 800b3da:	4652      	mov	r2, sl
 800b3dc:	465b      	mov	r3, fp
 800b3de:	f7f4 ff73 	bl	80002c8 <__aeabi_dsub>
 800b3e2:	9d01      	ldr	r5, [sp, #4]
 800b3e4:	4682      	mov	sl, r0
 800b3e6:	468b      	mov	fp, r1
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	4640      	mov	r0, r8
 800b3ec:	f7f5 fbd4 	bl	8000b98 <__aeabi_d2iz>
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	f7f5 f8b7 	bl	8000564 <__aeabi_i2d>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	4649      	mov	r1, r9
 800b3fe:	f7f4 ff63 	bl	80002c8 <__aeabi_dsub>
 800b402:	3630      	adds	r6, #48	; 0x30
 800b404:	f805 6b01 	strb.w	r6, [r5], #1
 800b408:	4652      	mov	r2, sl
 800b40a:	465b      	mov	r3, fp
 800b40c:	4680      	mov	r8, r0
 800b40e:	4689      	mov	r9, r1
 800b410:	f7f5 fb84 	bl	8000b1c <__aeabi_dcmplt>
 800b414:	2800      	cmp	r0, #0
 800b416:	d163      	bne.n	800b4e0 <_dtoa_r+0x608>
 800b418:	4642      	mov	r2, r8
 800b41a:	464b      	mov	r3, r9
 800b41c:	4936      	ldr	r1, [pc, #216]	; (800b4f8 <_dtoa_r+0x620>)
 800b41e:	2000      	movs	r0, #0
 800b420:	f7f4 ff52 	bl	80002c8 <__aeabi_dsub>
 800b424:	4652      	mov	r2, sl
 800b426:	465b      	mov	r3, fp
 800b428:	f7f5 fb78 	bl	8000b1c <__aeabi_dcmplt>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	f040 80b5 	bne.w	800b59c <_dtoa_r+0x6c4>
 800b432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b434:	429d      	cmp	r5, r3
 800b436:	d081      	beq.n	800b33c <_dtoa_r+0x464>
 800b438:	4b30      	ldr	r3, [pc, #192]	; (800b4fc <_dtoa_r+0x624>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	4650      	mov	r0, sl
 800b43e:	4659      	mov	r1, fp
 800b440:	f7f5 f8fa 	bl	8000638 <__aeabi_dmul>
 800b444:	4b2d      	ldr	r3, [pc, #180]	; (800b4fc <_dtoa_r+0x624>)
 800b446:	4682      	mov	sl, r0
 800b448:	468b      	mov	fp, r1
 800b44a:	4640      	mov	r0, r8
 800b44c:	4649      	mov	r1, r9
 800b44e:	2200      	movs	r2, #0
 800b450:	f7f5 f8f2 	bl	8000638 <__aeabi_dmul>
 800b454:	4680      	mov	r8, r0
 800b456:	4689      	mov	r9, r1
 800b458:	e7c6      	b.n	800b3e8 <_dtoa_r+0x510>
 800b45a:	4650      	mov	r0, sl
 800b45c:	4659      	mov	r1, fp
 800b45e:	f7f5 f8eb 	bl	8000638 <__aeabi_dmul>
 800b462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b464:	9d01      	ldr	r5, [sp, #4]
 800b466:	930f      	str	r3, [sp, #60]	; 0x3c
 800b468:	4682      	mov	sl, r0
 800b46a:	468b      	mov	fp, r1
 800b46c:	4649      	mov	r1, r9
 800b46e:	4640      	mov	r0, r8
 800b470:	f7f5 fb92 	bl	8000b98 <__aeabi_d2iz>
 800b474:	4606      	mov	r6, r0
 800b476:	f7f5 f875 	bl	8000564 <__aeabi_i2d>
 800b47a:	3630      	adds	r6, #48	; 0x30
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	4640      	mov	r0, r8
 800b482:	4649      	mov	r1, r9
 800b484:	f7f4 ff20 	bl	80002c8 <__aeabi_dsub>
 800b488:	f805 6b01 	strb.w	r6, [r5], #1
 800b48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b48e:	429d      	cmp	r5, r3
 800b490:	4680      	mov	r8, r0
 800b492:	4689      	mov	r9, r1
 800b494:	f04f 0200 	mov.w	r2, #0
 800b498:	d124      	bne.n	800b4e4 <_dtoa_r+0x60c>
 800b49a:	4b1b      	ldr	r3, [pc, #108]	; (800b508 <_dtoa_r+0x630>)
 800b49c:	4650      	mov	r0, sl
 800b49e:	4659      	mov	r1, fp
 800b4a0:	f7f4 ff14 	bl	80002cc <__adddf3>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4640      	mov	r0, r8
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	f7f5 fb54 	bl	8000b58 <__aeabi_dcmpgt>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d173      	bne.n	800b59c <_dtoa_r+0x6c4>
 800b4b4:	4652      	mov	r2, sl
 800b4b6:	465b      	mov	r3, fp
 800b4b8:	4913      	ldr	r1, [pc, #76]	; (800b508 <_dtoa_r+0x630>)
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	f7f4 ff04 	bl	80002c8 <__aeabi_dsub>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	4640      	mov	r0, r8
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	f7f5 fb28 	bl	8000b1c <__aeabi_dcmplt>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	f43f af35 	beq.w	800b33c <_dtoa_r+0x464>
 800b4d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b4d4:	1e6b      	subs	r3, r5, #1
 800b4d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4dc:	2b30      	cmp	r3, #48	; 0x30
 800b4de:	d0f8      	beq.n	800b4d2 <_dtoa_r+0x5fa>
 800b4e0:	9700      	str	r7, [sp, #0]
 800b4e2:	e049      	b.n	800b578 <_dtoa_r+0x6a0>
 800b4e4:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <_dtoa_r+0x624>)
 800b4e6:	f7f5 f8a7 	bl	8000638 <__aeabi_dmul>
 800b4ea:	4680      	mov	r8, r0
 800b4ec:	4689      	mov	r9, r1
 800b4ee:	e7bd      	b.n	800b46c <_dtoa_r+0x594>
 800b4f0:	0800e010 	.word	0x0800e010
 800b4f4:	0800dfe8 	.word	0x0800dfe8
 800b4f8:	3ff00000 	.word	0x3ff00000
 800b4fc:	40240000 	.word	0x40240000
 800b500:	401c0000 	.word	0x401c0000
 800b504:	40140000 	.word	0x40140000
 800b508:	3fe00000 	.word	0x3fe00000
 800b50c:	9d01      	ldr	r5, [sp, #4]
 800b50e:	4656      	mov	r6, sl
 800b510:	465f      	mov	r7, fp
 800b512:	4642      	mov	r2, r8
 800b514:	464b      	mov	r3, r9
 800b516:	4630      	mov	r0, r6
 800b518:	4639      	mov	r1, r7
 800b51a:	f7f5 f9b7 	bl	800088c <__aeabi_ddiv>
 800b51e:	f7f5 fb3b 	bl	8000b98 <__aeabi_d2iz>
 800b522:	4682      	mov	sl, r0
 800b524:	f7f5 f81e 	bl	8000564 <__aeabi_i2d>
 800b528:	4642      	mov	r2, r8
 800b52a:	464b      	mov	r3, r9
 800b52c:	f7f5 f884 	bl	8000638 <__aeabi_dmul>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	4630      	mov	r0, r6
 800b536:	4639      	mov	r1, r7
 800b538:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b53c:	f7f4 fec4 	bl	80002c8 <__aeabi_dsub>
 800b540:	f805 6b01 	strb.w	r6, [r5], #1
 800b544:	9e01      	ldr	r6, [sp, #4]
 800b546:	9f03      	ldr	r7, [sp, #12]
 800b548:	1bae      	subs	r6, r5, r6
 800b54a:	42b7      	cmp	r7, r6
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	d135      	bne.n	800b5be <_dtoa_r+0x6e6>
 800b552:	f7f4 febb 	bl	80002cc <__adddf3>
 800b556:	4642      	mov	r2, r8
 800b558:	464b      	mov	r3, r9
 800b55a:	4606      	mov	r6, r0
 800b55c:	460f      	mov	r7, r1
 800b55e:	f7f5 fafb 	bl	8000b58 <__aeabi_dcmpgt>
 800b562:	b9d0      	cbnz	r0, 800b59a <_dtoa_r+0x6c2>
 800b564:	4642      	mov	r2, r8
 800b566:	464b      	mov	r3, r9
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	f7f5 facc 	bl	8000b08 <__aeabi_dcmpeq>
 800b570:	b110      	cbz	r0, 800b578 <_dtoa_r+0x6a0>
 800b572:	f01a 0f01 	tst.w	sl, #1
 800b576:	d110      	bne.n	800b59a <_dtoa_r+0x6c2>
 800b578:	4620      	mov	r0, r4
 800b57a:	ee18 1a10 	vmov	r1, s16
 800b57e:	f000 fbfb 	bl	800bd78 <_Bfree>
 800b582:	2300      	movs	r3, #0
 800b584:	9800      	ldr	r0, [sp, #0]
 800b586:	702b      	strb	r3, [r5, #0]
 800b588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b58a:	3001      	adds	r0, #1
 800b58c:	6018      	str	r0, [r3, #0]
 800b58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b590:	2b00      	cmp	r3, #0
 800b592:	f43f acf1 	beq.w	800af78 <_dtoa_r+0xa0>
 800b596:	601d      	str	r5, [r3, #0]
 800b598:	e4ee      	b.n	800af78 <_dtoa_r+0xa0>
 800b59a:	9f00      	ldr	r7, [sp, #0]
 800b59c:	462b      	mov	r3, r5
 800b59e:	461d      	mov	r5, r3
 800b5a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5a4:	2a39      	cmp	r2, #57	; 0x39
 800b5a6:	d106      	bne.n	800b5b6 <_dtoa_r+0x6de>
 800b5a8:	9a01      	ldr	r2, [sp, #4]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d1f7      	bne.n	800b59e <_dtoa_r+0x6c6>
 800b5ae:	9901      	ldr	r1, [sp, #4]
 800b5b0:	2230      	movs	r2, #48	; 0x30
 800b5b2:	3701      	adds	r7, #1
 800b5b4:	700a      	strb	r2, [r1, #0]
 800b5b6:	781a      	ldrb	r2, [r3, #0]
 800b5b8:	3201      	adds	r2, #1
 800b5ba:	701a      	strb	r2, [r3, #0]
 800b5bc:	e790      	b.n	800b4e0 <_dtoa_r+0x608>
 800b5be:	4ba6      	ldr	r3, [pc, #664]	; (800b858 <_dtoa_r+0x980>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f7f5 f839 	bl	8000638 <__aeabi_dmul>
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	f7f5 fa9b 	bl	8000b08 <__aeabi_dcmpeq>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d09d      	beq.n	800b512 <_dtoa_r+0x63a>
 800b5d6:	e7cf      	b.n	800b578 <_dtoa_r+0x6a0>
 800b5d8:	9a08      	ldr	r2, [sp, #32]
 800b5da:	2a00      	cmp	r2, #0
 800b5dc:	f000 80d7 	beq.w	800b78e <_dtoa_r+0x8b6>
 800b5e0:	9a06      	ldr	r2, [sp, #24]
 800b5e2:	2a01      	cmp	r2, #1
 800b5e4:	f300 80ba 	bgt.w	800b75c <_dtoa_r+0x884>
 800b5e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5ea:	2a00      	cmp	r2, #0
 800b5ec:	f000 80b2 	beq.w	800b754 <_dtoa_r+0x87c>
 800b5f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5f4:	9e07      	ldr	r6, [sp, #28]
 800b5f6:	9d04      	ldr	r5, [sp, #16]
 800b5f8:	9a04      	ldr	r2, [sp, #16]
 800b5fa:	441a      	add	r2, r3
 800b5fc:	9204      	str	r2, [sp, #16]
 800b5fe:	9a05      	ldr	r2, [sp, #20]
 800b600:	2101      	movs	r1, #1
 800b602:	441a      	add	r2, r3
 800b604:	4620      	mov	r0, r4
 800b606:	9205      	str	r2, [sp, #20]
 800b608:	f000 fc6e 	bl	800bee8 <__i2b>
 800b60c:	4607      	mov	r7, r0
 800b60e:	2d00      	cmp	r5, #0
 800b610:	dd0c      	ble.n	800b62c <_dtoa_r+0x754>
 800b612:	9b05      	ldr	r3, [sp, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	dd09      	ble.n	800b62c <_dtoa_r+0x754>
 800b618:	42ab      	cmp	r3, r5
 800b61a:	9a04      	ldr	r2, [sp, #16]
 800b61c:	bfa8      	it	ge
 800b61e:	462b      	movge	r3, r5
 800b620:	1ad2      	subs	r2, r2, r3
 800b622:	9204      	str	r2, [sp, #16]
 800b624:	9a05      	ldr	r2, [sp, #20]
 800b626:	1aed      	subs	r5, r5, r3
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	9305      	str	r3, [sp, #20]
 800b62c:	9b07      	ldr	r3, [sp, #28]
 800b62e:	b31b      	cbz	r3, 800b678 <_dtoa_r+0x7a0>
 800b630:	9b08      	ldr	r3, [sp, #32]
 800b632:	2b00      	cmp	r3, #0
 800b634:	f000 80af 	beq.w	800b796 <_dtoa_r+0x8be>
 800b638:	2e00      	cmp	r6, #0
 800b63a:	dd13      	ble.n	800b664 <_dtoa_r+0x78c>
 800b63c:	4639      	mov	r1, r7
 800b63e:	4632      	mov	r2, r6
 800b640:	4620      	mov	r0, r4
 800b642:	f000 fd11 	bl	800c068 <__pow5mult>
 800b646:	ee18 2a10 	vmov	r2, s16
 800b64a:	4601      	mov	r1, r0
 800b64c:	4607      	mov	r7, r0
 800b64e:	4620      	mov	r0, r4
 800b650:	f000 fc60 	bl	800bf14 <__multiply>
 800b654:	ee18 1a10 	vmov	r1, s16
 800b658:	4680      	mov	r8, r0
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 fb8c 	bl	800bd78 <_Bfree>
 800b660:	ee08 8a10 	vmov	s16, r8
 800b664:	9b07      	ldr	r3, [sp, #28]
 800b666:	1b9a      	subs	r2, r3, r6
 800b668:	d006      	beq.n	800b678 <_dtoa_r+0x7a0>
 800b66a:	ee18 1a10 	vmov	r1, s16
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 fcfa 	bl	800c068 <__pow5mult>
 800b674:	ee08 0a10 	vmov	s16, r0
 800b678:	2101      	movs	r1, #1
 800b67a:	4620      	mov	r0, r4
 800b67c:	f000 fc34 	bl	800bee8 <__i2b>
 800b680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b682:	2b00      	cmp	r3, #0
 800b684:	4606      	mov	r6, r0
 800b686:	f340 8088 	ble.w	800b79a <_dtoa_r+0x8c2>
 800b68a:	461a      	mov	r2, r3
 800b68c:	4601      	mov	r1, r0
 800b68e:	4620      	mov	r0, r4
 800b690:	f000 fcea 	bl	800c068 <__pow5mult>
 800b694:	9b06      	ldr	r3, [sp, #24]
 800b696:	2b01      	cmp	r3, #1
 800b698:	4606      	mov	r6, r0
 800b69a:	f340 8081 	ble.w	800b7a0 <_dtoa_r+0x8c8>
 800b69e:	f04f 0800 	mov.w	r8, #0
 800b6a2:	6933      	ldr	r3, [r6, #16]
 800b6a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b6a8:	6918      	ldr	r0, [r3, #16]
 800b6aa:	f000 fbcd 	bl	800be48 <__hi0bits>
 800b6ae:	f1c0 0020 	rsb	r0, r0, #32
 800b6b2:	9b05      	ldr	r3, [sp, #20]
 800b6b4:	4418      	add	r0, r3
 800b6b6:	f010 001f 	ands.w	r0, r0, #31
 800b6ba:	f000 8092 	beq.w	800b7e2 <_dtoa_r+0x90a>
 800b6be:	f1c0 0320 	rsb	r3, r0, #32
 800b6c2:	2b04      	cmp	r3, #4
 800b6c4:	f340 808a 	ble.w	800b7dc <_dtoa_r+0x904>
 800b6c8:	f1c0 001c 	rsb	r0, r0, #28
 800b6cc:	9b04      	ldr	r3, [sp, #16]
 800b6ce:	4403      	add	r3, r0
 800b6d0:	9304      	str	r3, [sp, #16]
 800b6d2:	9b05      	ldr	r3, [sp, #20]
 800b6d4:	4403      	add	r3, r0
 800b6d6:	4405      	add	r5, r0
 800b6d8:	9305      	str	r3, [sp, #20]
 800b6da:	9b04      	ldr	r3, [sp, #16]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	dd07      	ble.n	800b6f0 <_dtoa_r+0x818>
 800b6e0:	ee18 1a10 	vmov	r1, s16
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 fd18 	bl	800c11c <__lshift>
 800b6ec:	ee08 0a10 	vmov	s16, r0
 800b6f0:	9b05      	ldr	r3, [sp, #20]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	dd05      	ble.n	800b702 <_dtoa_r+0x82a>
 800b6f6:	4631      	mov	r1, r6
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f000 fd0e 	bl	800c11c <__lshift>
 800b700:	4606      	mov	r6, r0
 800b702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d06e      	beq.n	800b7e6 <_dtoa_r+0x90e>
 800b708:	ee18 0a10 	vmov	r0, s16
 800b70c:	4631      	mov	r1, r6
 800b70e:	f000 fd75 	bl	800c1fc <__mcmp>
 800b712:	2800      	cmp	r0, #0
 800b714:	da67      	bge.n	800b7e6 <_dtoa_r+0x90e>
 800b716:	9b00      	ldr	r3, [sp, #0]
 800b718:	3b01      	subs	r3, #1
 800b71a:	ee18 1a10 	vmov	r1, s16
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	220a      	movs	r2, #10
 800b722:	2300      	movs	r3, #0
 800b724:	4620      	mov	r0, r4
 800b726:	f000 fb49 	bl	800bdbc <__multadd>
 800b72a:	9b08      	ldr	r3, [sp, #32]
 800b72c:	ee08 0a10 	vmov	s16, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	f000 81b1 	beq.w	800ba98 <_dtoa_r+0xbc0>
 800b736:	2300      	movs	r3, #0
 800b738:	4639      	mov	r1, r7
 800b73a:	220a      	movs	r2, #10
 800b73c:	4620      	mov	r0, r4
 800b73e:	f000 fb3d 	bl	800bdbc <__multadd>
 800b742:	9b02      	ldr	r3, [sp, #8]
 800b744:	2b00      	cmp	r3, #0
 800b746:	4607      	mov	r7, r0
 800b748:	f300 808e 	bgt.w	800b868 <_dtoa_r+0x990>
 800b74c:	9b06      	ldr	r3, [sp, #24]
 800b74e:	2b02      	cmp	r3, #2
 800b750:	dc51      	bgt.n	800b7f6 <_dtoa_r+0x91e>
 800b752:	e089      	b.n	800b868 <_dtoa_r+0x990>
 800b754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b756:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b75a:	e74b      	b.n	800b5f4 <_dtoa_r+0x71c>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	1e5e      	subs	r6, r3, #1
 800b760:	9b07      	ldr	r3, [sp, #28]
 800b762:	42b3      	cmp	r3, r6
 800b764:	bfbf      	itttt	lt
 800b766:	9b07      	ldrlt	r3, [sp, #28]
 800b768:	9607      	strlt	r6, [sp, #28]
 800b76a:	1af2      	sublt	r2, r6, r3
 800b76c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b76e:	bfb6      	itet	lt
 800b770:	189b      	addlt	r3, r3, r2
 800b772:	1b9e      	subge	r6, r3, r6
 800b774:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b776:	9b03      	ldr	r3, [sp, #12]
 800b778:	bfb8      	it	lt
 800b77a:	2600      	movlt	r6, #0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	bfb7      	itett	lt
 800b780:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b784:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b788:	1a9d      	sublt	r5, r3, r2
 800b78a:	2300      	movlt	r3, #0
 800b78c:	e734      	b.n	800b5f8 <_dtoa_r+0x720>
 800b78e:	9e07      	ldr	r6, [sp, #28]
 800b790:	9d04      	ldr	r5, [sp, #16]
 800b792:	9f08      	ldr	r7, [sp, #32]
 800b794:	e73b      	b.n	800b60e <_dtoa_r+0x736>
 800b796:	9a07      	ldr	r2, [sp, #28]
 800b798:	e767      	b.n	800b66a <_dtoa_r+0x792>
 800b79a:	9b06      	ldr	r3, [sp, #24]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	dc18      	bgt.n	800b7d2 <_dtoa_r+0x8fa>
 800b7a0:	f1ba 0f00 	cmp.w	sl, #0
 800b7a4:	d115      	bne.n	800b7d2 <_dtoa_r+0x8fa>
 800b7a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7aa:	b993      	cbnz	r3, 800b7d2 <_dtoa_r+0x8fa>
 800b7ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7b0:	0d1b      	lsrs	r3, r3, #20
 800b7b2:	051b      	lsls	r3, r3, #20
 800b7b4:	b183      	cbz	r3, 800b7d8 <_dtoa_r+0x900>
 800b7b6:	9b04      	ldr	r3, [sp, #16]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	9b05      	ldr	r3, [sp, #20]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	9305      	str	r3, [sp, #20]
 800b7c2:	f04f 0801 	mov.w	r8, #1
 800b7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f47f af6a 	bne.w	800b6a2 <_dtoa_r+0x7ca>
 800b7ce:	2001      	movs	r0, #1
 800b7d0:	e76f      	b.n	800b6b2 <_dtoa_r+0x7da>
 800b7d2:	f04f 0800 	mov.w	r8, #0
 800b7d6:	e7f6      	b.n	800b7c6 <_dtoa_r+0x8ee>
 800b7d8:	4698      	mov	r8, r3
 800b7da:	e7f4      	b.n	800b7c6 <_dtoa_r+0x8ee>
 800b7dc:	f43f af7d 	beq.w	800b6da <_dtoa_r+0x802>
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	301c      	adds	r0, #28
 800b7e4:	e772      	b.n	800b6cc <_dtoa_r+0x7f4>
 800b7e6:	9b03      	ldr	r3, [sp, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	dc37      	bgt.n	800b85c <_dtoa_r+0x984>
 800b7ec:	9b06      	ldr	r3, [sp, #24]
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	dd34      	ble.n	800b85c <_dtoa_r+0x984>
 800b7f2:	9b03      	ldr	r3, [sp, #12]
 800b7f4:	9302      	str	r3, [sp, #8]
 800b7f6:	9b02      	ldr	r3, [sp, #8]
 800b7f8:	b96b      	cbnz	r3, 800b816 <_dtoa_r+0x93e>
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	2205      	movs	r2, #5
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 fadc 	bl	800bdbc <__multadd>
 800b804:	4601      	mov	r1, r0
 800b806:	4606      	mov	r6, r0
 800b808:	ee18 0a10 	vmov	r0, s16
 800b80c:	f000 fcf6 	bl	800c1fc <__mcmp>
 800b810:	2800      	cmp	r0, #0
 800b812:	f73f adbb 	bgt.w	800b38c <_dtoa_r+0x4b4>
 800b816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b818:	9d01      	ldr	r5, [sp, #4]
 800b81a:	43db      	mvns	r3, r3
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	f04f 0800 	mov.w	r8, #0
 800b822:	4631      	mov	r1, r6
 800b824:	4620      	mov	r0, r4
 800b826:	f000 faa7 	bl	800bd78 <_Bfree>
 800b82a:	2f00      	cmp	r7, #0
 800b82c:	f43f aea4 	beq.w	800b578 <_dtoa_r+0x6a0>
 800b830:	f1b8 0f00 	cmp.w	r8, #0
 800b834:	d005      	beq.n	800b842 <_dtoa_r+0x96a>
 800b836:	45b8      	cmp	r8, r7
 800b838:	d003      	beq.n	800b842 <_dtoa_r+0x96a>
 800b83a:	4641      	mov	r1, r8
 800b83c:	4620      	mov	r0, r4
 800b83e:	f000 fa9b 	bl	800bd78 <_Bfree>
 800b842:	4639      	mov	r1, r7
 800b844:	4620      	mov	r0, r4
 800b846:	f000 fa97 	bl	800bd78 <_Bfree>
 800b84a:	e695      	b.n	800b578 <_dtoa_r+0x6a0>
 800b84c:	2600      	movs	r6, #0
 800b84e:	4637      	mov	r7, r6
 800b850:	e7e1      	b.n	800b816 <_dtoa_r+0x93e>
 800b852:	9700      	str	r7, [sp, #0]
 800b854:	4637      	mov	r7, r6
 800b856:	e599      	b.n	800b38c <_dtoa_r+0x4b4>
 800b858:	40240000 	.word	0x40240000
 800b85c:	9b08      	ldr	r3, [sp, #32]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f000 80ca 	beq.w	800b9f8 <_dtoa_r+0xb20>
 800b864:	9b03      	ldr	r3, [sp, #12]
 800b866:	9302      	str	r3, [sp, #8]
 800b868:	2d00      	cmp	r5, #0
 800b86a:	dd05      	ble.n	800b878 <_dtoa_r+0x9a0>
 800b86c:	4639      	mov	r1, r7
 800b86e:	462a      	mov	r2, r5
 800b870:	4620      	mov	r0, r4
 800b872:	f000 fc53 	bl	800c11c <__lshift>
 800b876:	4607      	mov	r7, r0
 800b878:	f1b8 0f00 	cmp.w	r8, #0
 800b87c:	d05b      	beq.n	800b936 <_dtoa_r+0xa5e>
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	4620      	mov	r0, r4
 800b882:	f000 fa39 	bl	800bcf8 <_Balloc>
 800b886:	4605      	mov	r5, r0
 800b888:	b928      	cbnz	r0, 800b896 <_dtoa_r+0x9be>
 800b88a:	4b87      	ldr	r3, [pc, #540]	; (800baa8 <_dtoa_r+0xbd0>)
 800b88c:	4602      	mov	r2, r0
 800b88e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b892:	f7ff bb3b 	b.w	800af0c <_dtoa_r+0x34>
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	3202      	adds	r2, #2
 800b89a:	0092      	lsls	r2, r2, #2
 800b89c:	f107 010c 	add.w	r1, r7, #12
 800b8a0:	300c      	adds	r0, #12
 800b8a2:	f7fe fa25 	bl	8009cf0 <memcpy>
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f000 fc36 	bl	800c11c <__lshift>
 800b8b0:	9b01      	ldr	r3, [sp, #4]
 800b8b2:	f103 0901 	add.w	r9, r3, #1
 800b8b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	9305      	str	r3, [sp, #20]
 800b8be:	f00a 0301 	and.w	r3, sl, #1
 800b8c2:	46b8      	mov	r8, r7
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	4607      	mov	r7, r0
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	ee18 0a10 	vmov	r0, s16
 800b8ce:	f7ff fa77 	bl	800adc0 <quorem>
 800b8d2:	4641      	mov	r1, r8
 800b8d4:	9002      	str	r0, [sp, #8]
 800b8d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b8da:	ee18 0a10 	vmov	r0, s16
 800b8de:	f000 fc8d 	bl	800c1fc <__mcmp>
 800b8e2:	463a      	mov	r2, r7
 800b8e4:	9003      	str	r0, [sp, #12]
 800b8e6:	4631      	mov	r1, r6
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 fca3 	bl	800c234 <__mdiff>
 800b8ee:	68c2      	ldr	r2, [r0, #12]
 800b8f0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	bb02      	cbnz	r2, 800b93a <_dtoa_r+0xa62>
 800b8f8:	4601      	mov	r1, r0
 800b8fa:	ee18 0a10 	vmov	r0, s16
 800b8fe:	f000 fc7d 	bl	800c1fc <__mcmp>
 800b902:	4602      	mov	r2, r0
 800b904:	4629      	mov	r1, r5
 800b906:	4620      	mov	r0, r4
 800b908:	9207      	str	r2, [sp, #28]
 800b90a:	f000 fa35 	bl	800bd78 <_Bfree>
 800b90e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b912:	ea43 0102 	orr.w	r1, r3, r2
 800b916:	9b04      	ldr	r3, [sp, #16]
 800b918:	430b      	orrs	r3, r1
 800b91a:	464d      	mov	r5, r9
 800b91c:	d10f      	bne.n	800b93e <_dtoa_r+0xa66>
 800b91e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b922:	d02a      	beq.n	800b97a <_dtoa_r+0xaa2>
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	2b00      	cmp	r3, #0
 800b928:	dd02      	ble.n	800b930 <_dtoa_r+0xa58>
 800b92a:	9b02      	ldr	r3, [sp, #8]
 800b92c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b930:	f88b a000 	strb.w	sl, [fp]
 800b934:	e775      	b.n	800b822 <_dtoa_r+0x94a>
 800b936:	4638      	mov	r0, r7
 800b938:	e7ba      	b.n	800b8b0 <_dtoa_r+0x9d8>
 800b93a:	2201      	movs	r2, #1
 800b93c:	e7e2      	b.n	800b904 <_dtoa_r+0xa2c>
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	db04      	blt.n	800b94e <_dtoa_r+0xa76>
 800b944:	9906      	ldr	r1, [sp, #24]
 800b946:	430b      	orrs	r3, r1
 800b948:	9904      	ldr	r1, [sp, #16]
 800b94a:	430b      	orrs	r3, r1
 800b94c:	d122      	bne.n	800b994 <_dtoa_r+0xabc>
 800b94e:	2a00      	cmp	r2, #0
 800b950:	ddee      	ble.n	800b930 <_dtoa_r+0xa58>
 800b952:	ee18 1a10 	vmov	r1, s16
 800b956:	2201      	movs	r2, #1
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 fbdf 	bl	800c11c <__lshift>
 800b95e:	4631      	mov	r1, r6
 800b960:	ee08 0a10 	vmov	s16, r0
 800b964:	f000 fc4a 	bl	800c1fc <__mcmp>
 800b968:	2800      	cmp	r0, #0
 800b96a:	dc03      	bgt.n	800b974 <_dtoa_r+0xa9c>
 800b96c:	d1e0      	bne.n	800b930 <_dtoa_r+0xa58>
 800b96e:	f01a 0f01 	tst.w	sl, #1
 800b972:	d0dd      	beq.n	800b930 <_dtoa_r+0xa58>
 800b974:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b978:	d1d7      	bne.n	800b92a <_dtoa_r+0xa52>
 800b97a:	2339      	movs	r3, #57	; 0x39
 800b97c:	f88b 3000 	strb.w	r3, [fp]
 800b980:	462b      	mov	r3, r5
 800b982:	461d      	mov	r5, r3
 800b984:	3b01      	subs	r3, #1
 800b986:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b98a:	2a39      	cmp	r2, #57	; 0x39
 800b98c:	d071      	beq.n	800ba72 <_dtoa_r+0xb9a>
 800b98e:	3201      	adds	r2, #1
 800b990:	701a      	strb	r2, [r3, #0]
 800b992:	e746      	b.n	800b822 <_dtoa_r+0x94a>
 800b994:	2a00      	cmp	r2, #0
 800b996:	dd07      	ble.n	800b9a8 <_dtoa_r+0xad0>
 800b998:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b99c:	d0ed      	beq.n	800b97a <_dtoa_r+0xaa2>
 800b99e:	f10a 0301 	add.w	r3, sl, #1
 800b9a2:	f88b 3000 	strb.w	r3, [fp]
 800b9a6:	e73c      	b.n	800b822 <_dtoa_r+0x94a>
 800b9a8:	9b05      	ldr	r3, [sp, #20]
 800b9aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b9ae:	4599      	cmp	r9, r3
 800b9b0:	d047      	beq.n	800ba42 <_dtoa_r+0xb6a>
 800b9b2:	ee18 1a10 	vmov	r1, s16
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	220a      	movs	r2, #10
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 f9fe 	bl	800bdbc <__multadd>
 800b9c0:	45b8      	cmp	r8, r7
 800b9c2:	ee08 0a10 	vmov	s16, r0
 800b9c6:	f04f 0300 	mov.w	r3, #0
 800b9ca:	f04f 020a 	mov.w	r2, #10
 800b9ce:	4641      	mov	r1, r8
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	d106      	bne.n	800b9e2 <_dtoa_r+0xb0a>
 800b9d4:	f000 f9f2 	bl	800bdbc <__multadd>
 800b9d8:	4680      	mov	r8, r0
 800b9da:	4607      	mov	r7, r0
 800b9dc:	f109 0901 	add.w	r9, r9, #1
 800b9e0:	e772      	b.n	800b8c8 <_dtoa_r+0x9f0>
 800b9e2:	f000 f9eb 	bl	800bdbc <__multadd>
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	4680      	mov	r8, r0
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	220a      	movs	r2, #10
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 f9e4 	bl	800bdbc <__multadd>
 800b9f4:	4607      	mov	r7, r0
 800b9f6:	e7f1      	b.n	800b9dc <_dtoa_r+0xb04>
 800b9f8:	9b03      	ldr	r3, [sp, #12]
 800b9fa:	9302      	str	r3, [sp, #8]
 800b9fc:	9d01      	ldr	r5, [sp, #4]
 800b9fe:	ee18 0a10 	vmov	r0, s16
 800ba02:	4631      	mov	r1, r6
 800ba04:	f7ff f9dc 	bl	800adc0 <quorem>
 800ba08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba0c:	9b01      	ldr	r3, [sp, #4]
 800ba0e:	f805 ab01 	strb.w	sl, [r5], #1
 800ba12:	1aea      	subs	r2, r5, r3
 800ba14:	9b02      	ldr	r3, [sp, #8]
 800ba16:	4293      	cmp	r3, r2
 800ba18:	dd09      	ble.n	800ba2e <_dtoa_r+0xb56>
 800ba1a:	ee18 1a10 	vmov	r1, s16
 800ba1e:	2300      	movs	r3, #0
 800ba20:	220a      	movs	r2, #10
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 f9ca 	bl	800bdbc <__multadd>
 800ba28:	ee08 0a10 	vmov	s16, r0
 800ba2c:	e7e7      	b.n	800b9fe <_dtoa_r+0xb26>
 800ba2e:	9b02      	ldr	r3, [sp, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bfc8      	it	gt
 800ba34:	461d      	movgt	r5, r3
 800ba36:	9b01      	ldr	r3, [sp, #4]
 800ba38:	bfd8      	it	le
 800ba3a:	2501      	movle	r5, #1
 800ba3c:	441d      	add	r5, r3
 800ba3e:	f04f 0800 	mov.w	r8, #0
 800ba42:	ee18 1a10 	vmov	r1, s16
 800ba46:	2201      	movs	r2, #1
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 fb67 	bl	800c11c <__lshift>
 800ba4e:	4631      	mov	r1, r6
 800ba50:	ee08 0a10 	vmov	s16, r0
 800ba54:	f000 fbd2 	bl	800c1fc <__mcmp>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	dc91      	bgt.n	800b980 <_dtoa_r+0xaa8>
 800ba5c:	d102      	bne.n	800ba64 <_dtoa_r+0xb8c>
 800ba5e:	f01a 0f01 	tst.w	sl, #1
 800ba62:	d18d      	bne.n	800b980 <_dtoa_r+0xaa8>
 800ba64:	462b      	mov	r3, r5
 800ba66:	461d      	mov	r5, r3
 800ba68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba6c:	2a30      	cmp	r2, #48	; 0x30
 800ba6e:	d0fa      	beq.n	800ba66 <_dtoa_r+0xb8e>
 800ba70:	e6d7      	b.n	800b822 <_dtoa_r+0x94a>
 800ba72:	9a01      	ldr	r2, [sp, #4]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d184      	bne.n	800b982 <_dtoa_r+0xaaa>
 800ba78:	9b00      	ldr	r3, [sp, #0]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	2331      	movs	r3, #49	; 0x31
 800ba80:	7013      	strb	r3, [r2, #0]
 800ba82:	e6ce      	b.n	800b822 <_dtoa_r+0x94a>
 800ba84:	4b09      	ldr	r3, [pc, #36]	; (800baac <_dtoa_r+0xbd4>)
 800ba86:	f7ff ba95 	b.w	800afb4 <_dtoa_r+0xdc>
 800ba8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f47f aa6e 	bne.w	800af6e <_dtoa_r+0x96>
 800ba92:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <_dtoa_r+0xbd8>)
 800ba94:	f7ff ba8e 	b.w	800afb4 <_dtoa_r+0xdc>
 800ba98:	9b02      	ldr	r3, [sp, #8]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	dcae      	bgt.n	800b9fc <_dtoa_r+0xb24>
 800ba9e:	9b06      	ldr	r3, [sp, #24]
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	f73f aea8 	bgt.w	800b7f6 <_dtoa_r+0x91e>
 800baa6:	e7a9      	b.n	800b9fc <_dtoa_r+0xb24>
 800baa8:	0800df18 	.word	0x0800df18
 800baac:	0800de39 	.word	0x0800de39
 800bab0:	0800de99 	.word	0x0800de99

0800bab4 <__errno>:
 800bab4:	4b01      	ldr	r3, [pc, #4]	; (800babc <__errno+0x8>)
 800bab6:	6818      	ldr	r0, [r3, #0]
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	200000dc 	.word	0x200000dc

0800bac0 <std>:
 800bac0:	2300      	movs	r3, #0
 800bac2:	b510      	push	{r4, lr}
 800bac4:	4604      	mov	r4, r0
 800bac6:	e9c0 3300 	strd	r3, r3, [r0]
 800baca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bace:	6083      	str	r3, [r0, #8]
 800bad0:	8181      	strh	r1, [r0, #12]
 800bad2:	6643      	str	r3, [r0, #100]	; 0x64
 800bad4:	81c2      	strh	r2, [r0, #14]
 800bad6:	6183      	str	r3, [r0, #24]
 800bad8:	4619      	mov	r1, r3
 800bada:	2208      	movs	r2, #8
 800badc:	305c      	adds	r0, #92	; 0x5c
 800bade:	f7fe f92f 	bl	8009d40 <memset>
 800bae2:	4b05      	ldr	r3, [pc, #20]	; (800baf8 <std+0x38>)
 800bae4:	6263      	str	r3, [r4, #36]	; 0x24
 800bae6:	4b05      	ldr	r3, [pc, #20]	; (800bafc <std+0x3c>)
 800bae8:	62a3      	str	r3, [r4, #40]	; 0x28
 800baea:	4b05      	ldr	r3, [pc, #20]	; (800bb00 <std+0x40>)
 800baec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800baee:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <std+0x44>)
 800baf0:	6224      	str	r4, [r4, #32]
 800baf2:	6323      	str	r3, [r4, #48]	; 0x30
 800baf4:	bd10      	pop	{r4, pc}
 800baf6:	bf00      	nop
 800baf8:	0800c711 	.word	0x0800c711
 800bafc:	0800c733 	.word	0x0800c733
 800bb00:	0800c76b 	.word	0x0800c76b
 800bb04:	0800c78f 	.word	0x0800c78f

0800bb08 <_cleanup_r>:
 800bb08:	4901      	ldr	r1, [pc, #4]	; (800bb10 <_cleanup_r+0x8>)
 800bb0a:	f000 b8c1 	b.w	800bc90 <_fwalk_reent>
 800bb0e:	bf00      	nop
 800bb10:	0800ca69 	.word	0x0800ca69

0800bb14 <__sfmoreglue>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	2268      	movs	r2, #104	; 0x68
 800bb18:	1e4d      	subs	r5, r1, #1
 800bb1a:	4355      	muls	r5, r2
 800bb1c:	460e      	mov	r6, r1
 800bb1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb22:	f7fe f9d5 	bl	8009ed0 <_malloc_r>
 800bb26:	4604      	mov	r4, r0
 800bb28:	b140      	cbz	r0, 800bb3c <__sfmoreglue+0x28>
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	e9c0 1600 	strd	r1, r6, [r0]
 800bb30:	300c      	adds	r0, #12
 800bb32:	60a0      	str	r0, [r4, #8]
 800bb34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb38:	f7fe f902 	bl	8009d40 <memset>
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}

0800bb40 <__sfp_lock_acquire>:
 800bb40:	4801      	ldr	r0, [pc, #4]	; (800bb48 <__sfp_lock_acquire+0x8>)
 800bb42:	f000 b8ca 	b.w	800bcda <__retarget_lock_acquire_recursive>
 800bb46:	bf00      	nop
 800bb48:	2000b9e5 	.word	0x2000b9e5

0800bb4c <__sfp_lock_release>:
 800bb4c:	4801      	ldr	r0, [pc, #4]	; (800bb54 <__sfp_lock_release+0x8>)
 800bb4e:	f000 b8c5 	b.w	800bcdc <__retarget_lock_release_recursive>
 800bb52:	bf00      	nop
 800bb54:	2000b9e5 	.word	0x2000b9e5

0800bb58 <__sinit_lock_acquire>:
 800bb58:	4801      	ldr	r0, [pc, #4]	; (800bb60 <__sinit_lock_acquire+0x8>)
 800bb5a:	f000 b8be 	b.w	800bcda <__retarget_lock_acquire_recursive>
 800bb5e:	bf00      	nop
 800bb60:	2000b9e6 	.word	0x2000b9e6

0800bb64 <__sinit_lock_release>:
 800bb64:	4801      	ldr	r0, [pc, #4]	; (800bb6c <__sinit_lock_release+0x8>)
 800bb66:	f000 b8b9 	b.w	800bcdc <__retarget_lock_release_recursive>
 800bb6a:	bf00      	nop
 800bb6c:	2000b9e6 	.word	0x2000b9e6

0800bb70 <__sinit>:
 800bb70:	b510      	push	{r4, lr}
 800bb72:	4604      	mov	r4, r0
 800bb74:	f7ff fff0 	bl	800bb58 <__sinit_lock_acquire>
 800bb78:	69a3      	ldr	r3, [r4, #24]
 800bb7a:	b11b      	cbz	r3, 800bb84 <__sinit+0x14>
 800bb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb80:	f7ff bff0 	b.w	800bb64 <__sinit_lock_release>
 800bb84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb88:	6523      	str	r3, [r4, #80]	; 0x50
 800bb8a:	4b13      	ldr	r3, [pc, #76]	; (800bbd8 <__sinit+0x68>)
 800bb8c:	4a13      	ldr	r2, [pc, #76]	; (800bbdc <__sinit+0x6c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb92:	42a3      	cmp	r3, r4
 800bb94:	bf04      	itt	eq
 800bb96:	2301      	moveq	r3, #1
 800bb98:	61a3      	streq	r3, [r4, #24]
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 f820 	bl	800bbe0 <__sfp>
 800bba0:	6060      	str	r0, [r4, #4]
 800bba2:	4620      	mov	r0, r4
 800bba4:	f000 f81c 	bl	800bbe0 <__sfp>
 800bba8:	60a0      	str	r0, [r4, #8]
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 f818 	bl	800bbe0 <__sfp>
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	60e0      	str	r0, [r4, #12]
 800bbb4:	2104      	movs	r1, #4
 800bbb6:	6860      	ldr	r0, [r4, #4]
 800bbb8:	f7ff ff82 	bl	800bac0 <std>
 800bbbc:	68a0      	ldr	r0, [r4, #8]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	2109      	movs	r1, #9
 800bbc2:	f7ff ff7d 	bl	800bac0 <std>
 800bbc6:	68e0      	ldr	r0, [r4, #12]
 800bbc8:	2202      	movs	r2, #2
 800bbca:	2112      	movs	r1, #18
 800bbcc:	f7ff ff78 	bl	800bac0 <std>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	61a3      	str	r3, [r4, #24]
 800bbd4:	e7d2      	b.n	800bb7c <__sinit+0xc>
 800bbd6:	bf00      	nop
 800bbd8:	0800de14 	.word	0x0800de14
 800bbdc:	0800bb09 	.word	0x0800bb09

0800bbe0 <__sfp>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	4607      	mov	r7, r0
 800bbe4:	f7ff ffac 	bl	800bb40 <__sfp_lock_acquire>
 800bbe8:	4b1e      	ldr	r3, [pc, #120]	; (800bc64 <__sfp+0x84>)
 800bbea:	681e      	ldr	r6, [r3, #0]
 800bbec:	69b3      	ldr	r3, [r6, #24]
 800bbee:	b913      	cbnz	r3, 800bbf6 <__sfp+0x16>
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f7ff ffbd 	bl	800bb70 <__sinit>
 800bbf6:	3648      	adds	r6, #72	; 0x48
 800bbf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	d503      	bpl.n	800bc08 <__sfp+0x28>
 800bc00:	6833      	ldr	r3, [r6, #0]
 800bc02:	b30b      	cbz	r3, 800bc48 <__sfp+0x68>
 800bc04:	6836      	ldr	r6, [r6, #0]
 800bc06:	e7f7      	b.n	800bbf8 <__sfp+0x18>
 800bc08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc0c:	b9d5      	cbnz	r5, 800bc44 <__sfp+0x64>
 800bc0e:	4b16      	ldr	r3, [pc, #88]	; (800bc68 <__sfp+0x88>)
 800bc10:	60e3      	str	r3, [r4, #12]
 800bc12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc16:	6665      	str	r5, [r4, #100]	; 0x64
 800bc18:	f000 f85e 	bl	800bcd8 <__retarget_lock_init_recursive>
 800bc1c:	f7ff ff96 	bl	800bb4c <__sfp_lock_release>
 800bc20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc28:	6025      	str	r5, [r4, #0]
 800bc2a:	61a5      	str	r5, [r4, #24]
 800bc2c:	2208      	movs	r2, #8
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc34:	f7fe f884 	bl	8009d40 <memset>
 800bc38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc40:	4620      	mov	r0, r4
 800bc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc44:	3468      	adds	r4, #104	; 0x68
 800bc46:	e7d9      	b.n	800bbfc <__sfp+0x1c>
 800bc48:	2104      	movs	r1, #4
 800bc4a:	4638      	mov	r0, r7
 800bc4c:	f7ff ff62 	bl	800bb14 <__sfmoreglue>
 800bc50:	4604      	mov	r4, r0
 800bc52:	6030      	str	r0, [r6, #0]
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d1d5      	bne.n	800bc04 <__sfp+0x24>
 800bc58:	f7ff ff78 	bl	800bb4c <__sfp_lock_release>
 800bc5c:	230c      	movs	r3, #12
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	e7ee      	b.n	800bc40 <__sfp+0x60>
 800bc62:	bf00      	nop
 800bc64:	0800de14 	.word	0x0800de14
 800bc68:	ffff0001 	.word	0xffff0001

0800bc6c <fiprintf>:
 800bc6c:	b40e      	push	{r1, r2, r3}
 800bc6e:	b503      	push	{r0, r1, lr}
 800bc70:	4601      	mov	r1, r0
 800bc72:	ab03      	add	r3, sp, #12
 800bc74:	4805      	ldr	r0, [pc, #20]	; (800bc8c <fiprintf+0x20>)
 800bc76:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc7a:	6800      	ldr	r0, [r0, #0]
 800bc7c:	9301      	str	r3, [sp, #4]
 800bc7e:	f000 fc17 	bl	800c4b0 <_vfiprintf_r>
 800bc82:	b002      	add	sp, #8
 800bc84:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc88:	b003      	add	sp, #12
 800bc8a:	4770      	bx	lr
 800bc8c:	200000dc 	.word	0x200000dc

0800bc90 <_fwalk_reent>:
 800bc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc94:	4606      	mov	r6, r0
 800bc96:	4688      	mov	r8, r1
 800bc98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc9c:	2700      	movs	r7, #0
 800bc9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bca2:	f1b9 0901 	subs.w	r9, r9, #1
 800bca6:	d505      	bpl.n	800bcb4 <_fwalk_reent+0x24>
 800bca8:	6824      	ldr	r4, [r4, #0]
 800bcaa:	2c00      	cmp	r4, #0
 800bcac:	d1f7      	bne.n	800bc9e <_fwalk_reent+0xe>
 800bcae:	4638      	mov	r0, r7
 800bcb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcb4:	89ab      	ldrh	r3, [r5, #12]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d907      	bls.n	800bcca <_fwalk_reent+0x3a>
 800bcba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	d003      	beq.n	800bcca <_fwalk_reent+0x3a>
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	47c0      	blx	r8
 800bcc8:	4307      	orrs	r7, r0
 800bcca:	3568      	adds	r5, #104	; 0x68
 800bccc:	e7e9      	b.n	800bca2 <_fwalk_reent+0x12>
	...

0800bcd0 <_localeconv_r>:
 800bcd0:	4800      	ldr	r0, [pc, #0]	; (800bcd4 <_localeconv_r+0x4>)
 800bcd2:	4770      	bx	lr
 800bcd4:	20000230 	.word	0x20000230

0800bcd8 <__retarget_lock_init_recursive>:
 800bcd8:	4770      	bx	lr

0800bcda <__retarget_lock_acquire_recursive>:
 800bcda:	4770      	bx	lr

0800bcdc <__retarget_lock_release_recursive>:
 800bcdc:	4770      	bx	lr
	...

0800bce0 <__malloc_lock>:
 800bce0:	4801      	ldr	r0, [pc, #4]	; (800bce8 <__malloc_lock+0x8>)
 800bce2:	f7ff bffa 	b.w	800bcda <__retarget_lock_acquire_recursive>
 800bce6:	bf00      	nop
 800bce8:	2000b9e4 	.word	0x2000b9e4

0800bcec <__malloc_unlock>:
 800bcec:	4801      	ldr	r0, [pc, #4]	; (800bcf4 <__malloc_unlock+0x8>)
 800bcee:	f7ff bff5 	b.w	800bcdc <__retarget_lock_release_recursive>
 800bcf2:	bf00      	nop
 800bcf4:	2000b9e4 	.word	0x2000b9e4

0800bcf8 <_Balloc>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	460d      	mov	r5, r1
 800bd00:	b976      	cbnz	r6, 800bd20 <_Balloc+0x28>
 800bd02:	2010      	movs	r0, #16
 800bd04:	f7fd ffe4 	bl	8009cd0 <malloc>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	6260      	str	r0, [r4, #36]	; 0x24
 800bd0c:	b920      	cbnz	r0, 800bd18 <_Balloc+0x20>
 800bd0e:	4b18      	ldr	r3, [pc, #96]	; (800bd70 <_Balloc+0x78>)
 800bd10:	4818      	ldr	r0, [pc, #96]	; (800bd74 <_Balloc+0x7c>)
 800bd12:	2166      	movs	r1, #102	; 0x66
 800bd14:	f7ff f836 	bl	800ad84 <__assert_func>
 800bd18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd1c:	6006      	str	r6, [r0, #0]
 800bd1e:	60c6      	str	r6, [r0, #12]
 800bd20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd22:	68f3      	ldr	r3, [r6, #12]
 800bd24:	b183      	cbz	r3, 800bd48 <_Balloc+0x50>
 800bd26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd2e:	b9b8      	cbnz	r0, 800bd60 <_Balloc+0x68>
 800bd30:	2101      	movs	r1, #1
 800bd32:	fa01 f605 	lsl.w	r6, r1, r5
 800bd36:	1d72      	adds	r2, r6, #5
 800bd38:	0092      	lsls	r2, r2, #2
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f7fe f812 	bl	8009d64 <_calloc_r>
 800bd40:	b160      	cbz	r0, 800bd5c <_Balloc+0x64>
 800bd42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd46:	e00e      	b.n	800bd66 <_Balloc+0x6e>
 800bd48:	2221      	movs	r2, #33	; 0x21
 800bd4a:	2104      	movs	r1, #4
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f7fe f809 	bl	8009d64 <_calloc_r>
 800bd52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd54:	60f0      	str	r0, [r6, #12]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e4      	bne.n	800bd26 <_Balloc+0x2e>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	6802      	ldr	r2, [r0, #0]
 800bd62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd66:	2300      	movs	r3, #0
 800bd68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd6c:	e7f7      	b.n	800bd5e <_Balloc+0x66>
 800bd6e:	bf00      	nop
 800bd70:	0800dea6 	.word	0x0800dea6
 800bd74:	0800df8c 	.word	0x0800df8c

0800bd78 <_Bfree>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd7c:	4605      	mov	r5, r0
 800bd7e:	460c      	mov	r4, r1
 800bd80:	b976      	cbnz	r6, 800bda0 <_Bfree+0x28>
 800bd82:	2010      	movs	r0, #16
 800bd84:	f7fd ffa4 	bl	8009cd0 <malloc>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	6268      	str	r0, [r5, #36]	; 0x24
 800bd8c:	b920      	cbnz	r0, 800bd98 <_Bfree+0x20>
 800bd8e:	4b09      	ldr	r3, [pc, #36]	; (800bdb4 <_Bfree+0x3c>)
 800bd90:	4809      	ldr	r0, [pc, #36]	; (800bdb8 <_Bfree+0x40>)
 800bd92:	218a      	movs	r1, #138	; 0x8a
 800bd94:	f7fe fff6 	bl	800ad84 <__assert_func>
 800bd98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd9c:	6006      	str	r6, [r0, #0]
 800bd9e:	60c6      	str	r6, [r0, #12]
 800bda0:	b13c      	cbz	r4, 800bdb2 <_Bfree+0x3a>
 800bda2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bda4:	6862      	ldr	r2, [r4, #4]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdac:	6021      	str	r1, [r4, #0]
 800bdae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}
 800bdb4:	0800dea6 	.word	0x0800dea6
 800bdb8:	0800df8c 	.word	0x0800df8c

0800bdbc <__multadd>:
 800bdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc0:	690d      	ldr	r5, [r1, #16]
 800bdc2:	4607      	mov	r7, r0
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	461e      	mov	r6, r3
 800bdc8:	f101 0c14 	add.w	ip, r1, #20
 800bdcc:	2000      	movs	r0, #0
 800bdce:	f8dc 3000 	ldr.w	r3, [ip]
 800bdd2:	b299      	uxth	r1, r3
 800bdd4:	fb02 6101 	mla	r1, r2, r1, r6
 800bdd8:	0c1e      	lsrs	r6, r3, #16
 800bdda:	0c0b      	lsrs	r3, r1, #16
 800bddc:	fb02 3306 	mla	r3, r2, r6, r3
 800bde0:	b289      	uxth	r1, r1
 800bde2:	3001      	adds	r0, #1
 800bde4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bde8:	4285      	cmp	r5, r0
 800bdea:	f84c 1b04 	str.w	r1, [ip], #4
 800bdee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdf2:	dcec      	bgt.n	800bdce <__multadd+0x12>
 800bdf4:	b30e      	cbz	r6, 800be3a <__multadd+0x7e>
 800bdf6:	68a3      	ldr	r3, [r4, #8]
 800bdf8:	42ab      	cmp	r3, r5
 800bdfa:	dc19      	bgt.n	800be30 <__multadd+0x74>
 800bdfc:	6861      	ldr	r1, [r4, #4]
 800bdfe:	4638      	mov	r0, r7
 800be00:	3101      	adds	r1, #1
 800be02:	f7ff ff79 	bl	800bcf8 <_Balloc>
 800be06:	4680      	mov	r8, r0
 800be08:	b928      	cbnz	r0, 800be16 <__multadd+0x5a>
 800be0a:	4602      	mov	r2, r0
 800be0c:	4b0c      	ldr	r3, [pc, #48]	; (800be40 <__multadd+0x84>)
 800be0e:	480d      	ldr	r0, [pc, #52]	; (800be44 <__multadd+0x88>)
 800be10:	21b5      	movs	r1, #181	; 0xb5
 800be12:	f7fe ffb7 	bl	800ad84 <__assert_func>
 800be16:	6922      	ldr	r2, [r4, #16]
 800be18:	3202      	adds	r2, #2
 800be1a:	f104 010c 	add.w	r1, r4, #12
 800be1e:	0092      	lsls	r2, r2, #2
 800be20:	300c      	adds	r0, #12
 800be22:	f7fd ff65 	bl	8009cf0 <memcpy>
 800be26:	4621      	mov	r1, r4
 800be28:	4638      	mov	r0, r7
 800be2a:	f7ff ffa5 	bl	800bd78 <_Bfree>
 800be2e:	4644      	mov	r4, r8
 800be30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be34:	3501      	adds	r5, #1
 800be36:	615e      	str	r6, [r3, #20]
 800be38:	6125      	str	r5, [r4, #16]
 800be3a:	4620      	mov	r0, r4
 800be3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be40:	0800df18 	.word	0x0800df18
 800be44:	0800df8c 	.word	0x0800df8c

0800be48 <__hi0bits>:
 800be48:	0c03      	lsrs	r3, r0, #16
 800be4a:	041b      	lsls	r3, r3, #16
 800be4c:	b9d3      	cbnz	r3, 800be84 <__hi0bits+0x3c>
 800be4e:	0400      	lsls	r0, r0, #16
 800be50:	2310      	movs	r3, #16
 800be52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be56:	bf04      	itt	eq
 800be58:	0200      	lsleq	r0, r0, #8
 800be5a:	3308      	addeq	r3, #8
 800be5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800be60:	bf04      	itt	eq
 800be62:	0100      	lsleq	r0, r0, #4
 800be64:	3304      	addeq	r3, #4
 800be66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be6a:	bf04      	itt	eq
 800be6c:	0080      	lsleq	r0, r0, #2
 800be6e:	3302      	addeq	r3, #2
 800be70:	2800      	cmp	r0, #0
 800be72:	db05      	blt.n	800be80 <__hi0bits+0x38>
 800be74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be78:	f103 0301 	add.w	r3, r3, #1
 800be7c:	bf08      	it	eq
 800be7e:	2320      	moveq	r3, #32
 800be80:	4618      	mov	r0, r3
 800be82:	4770      	bx	lr
 800be84:	2300      	movs	r3, #0
 800be86:	e7e4      	b.n	800be52 <__hi0bits+0xa>

0800be88 <__lo0bits>:
 800be88:	6803      	ldr	r3, [r0, #0]
 800be8a:	f013 0207 	ands.w	r2, r3, #7
 800be8e:	4601      	mov	r1, r0
 800be90:	d00b      	beq.n	800beaa <__lo0bits+0x22>
 800be92:	07da      	lsls	r2, r3, #31
 800be94:	d423      	bmi.n	800bede <__lo0bits+0x56>
 800be96:	0798      	lsls	r0, r3, #30
 800be98:	bf49      	itett	mi
 800be9a:	085b      	lsrmi	r3, r3, #1
 800be9c:	089b      	lsrpl	r3, r3, #2
 800be9e:	2001      	movmi	r0, #1
 800bea0:	600b      	strmi	r3, [r1, #0]
 800bea2:	bf5c      	itt	pl
 800bea4:	600b      	strpl	r3, [r1, #0]
 800bea6:	2002      	movpl	r0, #2
 800bea8:	4770      	bx	lr
 800beaa:	b298      	uxth	r0, r3
 800beac:	b9a8      	cbnz	r0, 800beda <__lo0bits+0x52>
 800beae:	0c1b      	lsrs	r3, r3, #16
 800beb0:	2010      	movs	r0, #16
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	b90a      	cbnz	r2, 800beba <__lo0bits+0x32>
 800beb6:	3008      	adds	r0, #8
 800beb8:	0a1b      	lsrs	r3, r3, #8
 800beba:	071a      	lsls	r2, r3, #28
 800bebc:	bf04      	itt	eq
 800bebe:	091b      	lsreq	r3, r3, #4
 800bec0:	3004      	addeq	r0, #4
 800bec2:	079a      	lsls	r2, r3, #30
 800bec4:	bf04      	itt	eq
 800bec6:	089b      	lsreq	r3, r3, #2
 800bec8:	3002      	addeq	r0, #2
 800beca:	07da      	lsls	r2, r3, #31
 800becc:	d403      	bmi.n	800bed6 <__lo0bits+0x4e>
 800bece:	085b      	lsrs	r3, r3, #1
 800bed0:	f100 0001 	add.w	r0, r0, #1
 800bed4:	d005      	beq.n	800bee2 <__lo0bits+0x5a>
 800bed6:	600b      	str	r3, [r1, #0]
 800bed8:	4770      	bx	lr
 800beda:	4610      	mov	r0, r2
 800bedc:	e7e9      	b.n	800beb2 <__lo0bits+0x2a>
 800bede:	2000      	movs	r0, #0
 800bee0:	4770      	bx	lr
 800bee2:	2020      	movs	r0, #32
 800bee4:	4770      	bx	lr
	...

0800bee8 <__i2b>:
 800bee8:	b510      	push	{r4, lr}
 800beea:	460c      	mov	r4, r1
 800beec:	2101      	movs	r1, #1
 800beee:	f7ff ff03 	bl	800bcf8 <_Balloc>
 800bef2:	4602      	mov	r2, r0
 800bef4:	b928      	cbnz	r0, 800bf02 <__i2b+0x1a>
 800bef6:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <__i2b+0x24>)
 800bef8:	4805      	ldr	r0, [pc, #20]	; (800bf10 <__i2b+0x28>)
 800befa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800befe:	f7fe ff41 	bl	800ad84 <__assert_func>
 800bf02:	2301      	movs	r3, #1
 800bf04:	6144      	str	r4, [r0, #20]
 800bf06:	6103      	str	r3, [r0, #16]
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	bf00      	nop
 800bf0c:	0800df18 	.word	0x0800df18
 800bf10:	0800df8c 	.word	0x0800df8c

0800bf14 <__multiply>:
 800bf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf18:	4691      	mov	r9, r2
 800bf1a:	690a      	ldr	r2, [r1, #16]
 800bf1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	bfb8      	it	lt
 800bf24:	460b      	movlt	r3, r1
 800bf26:	460c      	mov	r4, r1
 800bf28:	bfbc      	itt	lt
 800bf2a:	464c      	movlt	r4, r9
 800bf2c:	4699      	movlt	r9, r3
 800bf2e:	6927      	ldr	r7, [r4, #16]
 800bf30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf34:	68a3      	ldr	r3, [r4, #8]
 800bf36:	6861      	ldr	r1, [r4, #4]
 800bf38:	eb07 060a 	add.w	r6, r7, sl
 800bf3c:	42b3      	cmp	r3, r6
 800bf3e:	b085      	sub	sp, #20
 800bf40:	bfb8      	it	lt
 800bf42:	3101      	addlt	r1, #1
 800bf44:	f7ff fed8 	bl	800bcf8 <_Balloc>
 800bf48:	b930      	cbnz	r0, 800bf58 <__multiply+0x44>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	4b44      	ldr	r3, [pc, #272]	; (800c060 <__multiply+0x14c>)
 800bf4e:	4845      	ldr	r0, [pc, #276]	; (800c064 <__multiply+0x150>)
 800bf50:	f240 115d 	movw	r1, #349	; 0x15d
 800bf54:	f7fe ff16 	bl	800ad84 <__assert_func>
 800bf58:	f100 0514 	add.w	r5, r0, #20
 800bf5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf60:	462b      	mov	r3, r5
 800bf62:	2200      	movs	r2, #0
 800bf64:	4543      	cmp	r3, r8
 800bf66:	d321      	bcc.n	800bfac <__multiply+0x98>
 800bf68:	f104 0314 	add.w	r3, r4, #20
 800bf6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf70:	f109 0314 	add.w	r3, r9, #20
 800bf74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf78:	9202      	str	r2, [sp, #8]
 800bf7a:	1b3a      	subs	r2, r7, r4
 800bf7c:	3a15      	subs	r2, #21
 800bf7e:	f022 0203 	bic.w	r2, r2, #3
 800bf82:	3204      	adds	r2, #4
 800bf84:	f104 0115 	add.w	r1, r4, #21
 800bf88:	428f      	cmp	r7, r1
 800bf8a:	bf38      	it	cc
 800bf8c:	2204      	movcc	r2, #4
 800bf8e:	9201      	str	r2, [sp, #4]
 800bf90:	9a02      	ldr	r2, [sp, #8]
 800bf92:	9303      	str	r3, [sp, #12]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d80c      	bhi.n	800bfb2 <__multiply+0x9e>
 800bf98:	2e00      	cmp	r6, #0
 800bf9a:	dd03      	ble.n	800bfa4 <__multiply+0x90>
 800bf9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d05a      	beq.n	800c05a <__multiply+0x146>
 800bfa4:	6106      	str	r6, [r0, #16]
 800bfa6:	b005      	add	sp, #20
 800bfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfac:	f843 2b04 	str.w	r2, [r3], #4
 800bfb0:	e7d8      	b.n	800bf64 <__multiply+0x50>
 800bfb2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bfb6:	f1ba 0f00 	cmp.w	sl, #0
 800bfba:	d024      	beq.n	800c006 <__multiply+0xf2>
 800bfbc:	f104 0e14 	add.w	lr, r4, #20
 800bfc0:	46a9      	mov	r9, r5
 800bfc2:	f04f 0c00 	mov.w	ip, #0
 800bfc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bfca:	f8d9 1000 	ldr.w	r1, [r9]
 800bfce:	fa1f fb82 	uxth.w	fp, r2
 800bfd2:	b289      	uxth	r1, r1
 800bfd4:	fb0a 110b 	mla	r1, sl, fp, r1
 800bfd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bfdc:	f8d9 2000 	ldr.w	r2, [r9]
 800bfe0:	4461      	add	r1, ip
 800bfe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bfe6:	fb0a c20b 	mla	r2, sl, fp, ip
 800bfea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bfee:	b289      	uxth	r1, r1
 800bff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bff4:	4577      	cmp	r7, lr
 800bff6:	f849 1b04 	str.w	r1, [r9], #4
 800bffa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bffe:	d8e2      	bhi.n	800bfc6 <__multiply+0xb2>
 800c000:	9a01      	ldr	r2, [sp, #4]
 800c002:	f845 c002 	str.w	ip, [r5, r2]
 800c006:	9a03      	ldr	r2, [sp, #12]
 800c008:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c00c:	3304      	adds	r3, #4
 800c00e:	f1b9 0f00 	cmp.w	r9, #0
 800c012:	d020      	beq.n	800c056 <__multiply+0x142>
 800c014:	6829      	ldr	r1, [r5, #0]
 800c016:	f104 0c14 	add.w	ip, r4, #20
 800c01a:	46ae      	mov	lr, r5
 800c01c:	f04f 0a00 	mov.w	sl, #0
 800c020:	f8bc b000 	ldrh.w	fp, [ip]
 800c024:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c028:	fb09 220b 	mla	r2, r9, fp, r2
 800c02c:	4492      	add	sl, r2
 800c02e:	b289      	uxth	r1, r1
 800c030:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c034:	f84e 1b04 	str.w	r1, [lr], #4
 800c038:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c03c:	f8be 1000 	ldrh.w	r1, [lr]
 800c040:	0c12      	lsrs	r2, r2, #16
 800c042:	fb09 1102 	mla	r1, r9, r2, r1
 800c046:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c04a:	4567      	cmp	r7, ip
 800c04c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c050:	d8e6      	bhi.n	800c020 <__multiply+0x10c>
 800c052:	9a01      	ldr	r2, [sp, #4]
 800c054:	50a9      	str	r1, [r5, r2]
 800c056:	3504      	adds	r5, #4
 800c058:	e79a      	b.n	800bf90 <__multiply+0x7c>
 800c05a:	3e01      	subs	r6, #1
 800c05c:	e79c      	b.n	800bf98 <__multiply+0x84>
 800c05e:	bf00      	nop
 800c060:	0800df18 	.word	0x0800df18
 800c064:	0800df8c 	.word	0x0800df8c

0800c068 <__pow5mult>:
 800c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c06c:	4615      	mov	r5, r2
 800c06e:	f012 0203 	ands.w	r2, r2, #3
 800c072:	4606      	mov	r6, r0
 800c074:	460f      	mov	r7, r1
 800c076:	d007      	beq.n	800c088 <__pow5mult+0x20>
 800c078:	4c25      	ldr	r4, [pc, #148]	; (800c110 <__pow5mult+0xa8>)
 800c07a:	3a01      	subs	r2, #1
 800c07c:	2300      	movs	r3, #0
 800c07e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c082:	f7ff fe9b 	bl	800bdbc <__multadd>
 800c086:	4607      	mov	r7, r0
 800c088:	10ad      	asrs	r5, r5, #2
 800c08a:	d03d      	beq.n	800c108 <__pow5mult+0xa0>
 800c08c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c08e:	b97c      	cbnz	r4, 800c0b0 <__pow5mult+0x48>
 800c090:	2010      	movs	r0, #16
 800c092:	f7fd fe1d 	bl	8009cd0 <malloc>
 800c096:	4602      	mov	r2, r0
 800c098:	6270      	str	r0, [r6, #36]	; 0x24
 800c09a:	b928      	cbnz	r0, 800c0a8 <__pow5mult+0x40>
 800c09c:	4b1d      	ldr	r3, [pc, #116]	; (800c114 <__pow5mult+0xac>)
 800c09e:	481e      	ldr	r0, [pc, #120]	; (800c118 <__pow5mult+0xb0>)
 800c0a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c0a4:	f7fe fe6e 	bl	800ad84 <__assert_func>
 800c0a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0ac:	6004      	str	r4, [r0, #0]
 800c0ae:	60c4      	str	r4, [r0, #12]
 800c0b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c0b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0b8:	b94c      	cbnz	r4, 800c0ce <__pow5mult+0x66>
 800c0ba:	f240 2171 	movw	r1, #625	; 0x271
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7ff ff12 	bl	800bee8 <__i2b>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	6003      	str	r3, [r0, #0]
 800c0ce:	f04f 0900 	mov.w	r9, #0
 800c0d2:	07eb      	lsls	r3, r5, #31
 800c0d4:	d50a      	bpl.n	800c0ec <__pow5mult+0x84>
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	4622      	mov	r2, r4
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f7ff ff1a 	bl	800bf14 <__multiply>
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	4680      	mov	r8, r0
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f7ff fe47 	bl	800bd78 <_Bfree>
 800c0ea:	4647      	mov	r7, r8
 800c0ec:	106d      	asrs	r5, r5, #1
 800c0ee:	d00b      	beq.n	800c108 <__pow5mult+0xa0>
 800c0f0:	6820      	ldr	r0, [r4, #0]
 800c0f2:	b938      	cbnz	r0, 800c104 <__pow5mult+0x9c>
 800c0f4:	4622      	mov	r2, r4
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	f7ff ff0b 	bl	800bf14 <__multiply>
 800c0fe:	6020      	str	r0, [r4, #0]
 800c100:	f8c0 9000 	str.w	r9, [r0]
 800c104:	4604      	mov	r4, r0
 800c106:	e7e4      	b.n	800c0d2 <__pow5mult+0x6a>
 800c108:	4638      	mov	r0, r7
 800c10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c10e:	bf00      	nop
 800c110:	0800e0d8 	.word	0x0800e0d8
 800c114:	0800dea6 	.word	0x0800dea6
 800c118:	0800df8c 	.word	0x0800df8c

0800c11c <__lshift>:
 800c11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c120:	460c      	mov	r4, r1
 800c122:	6849      	ldr	r1, [r1, #4]
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c12a:	68a3      	ldr	r3, [r4, #8]
 800c12c:	4607      	mov	r7, r0
 800c12e:	4691      	mov	r9, r2
 800c130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c134:	f108 0601 	add.w	r6, r8, #1
 800c138:	42b3      	cmp	r3, r6
 800c13a:	db0b      	blt.n	800c154 <__lshift+0x38>
 800c13c:	4638      	mov	r0, r7
 800c13e:	f7ff fddb 	bl	800bcf8 <_Balloc>
 800c142:	4605      	mov	r5, r0
 800c144:	b948      	cbnz	r0, 800c15a <__lshift+0x3e>
 800c146:	4602      	mov	r2, r0
 800c148:	4b2a      	ldr	r3, [pc, #168]	; (800c1f4 <__lshift+0xd8>)
 800c14a:	482b      	ldr	r0, [pc, #172]	; (800c1f8 <__lshift+0xdc>)
 800c14c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c150:	f7fe fe18 	bl	800ad84 <__assert_func>
 800c154:	3101      	adds	r1, #1
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	e7ee      	b.n	800c138 <__lshift+0x1c>
 800c15a:	2300      	movs	r3, #0
 800c15c:	f100 0114 	add.w	r1, r0, #20
 800c160:	f100 0210 	add.w	r2, r0, #16
 800c164:	4618      	mov	r0, r3
 800c166:	4553      	cmp	r3, sl
 800c168:	db37      	blt.n	800c1da <__lshift+0xbe>
 800c16a:	6920      	ldr	r0, [r4, #16]
 800c16c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c170:	f104 0314 	add.w	r3, r4, #20
 800c174:	f019 091f 	ands.w	r9, r9, #31
 800c178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c17c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c180:	d02f      	beq.n	800c1e2 <__lshift+0xc6>
 800c182:	f1c9 0e20 	rsb	lr, r9, #32
 800c186:	468a      	mov	sl, r1
 800c188:	f04f 0c00 	mov.w	ip, #0
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	fa02 f209 	lsl.w	r2, r2, r9
 800c192:	ea42 020c 	orr.w	r2, r2, ip
 800c196:	f84a 2b04 	str.w	r2, [sl], #4
 800c19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c19e:	4298      	cmp	r0, r3
 800c1a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c1a4:	d8f2      	bhi.n	800c18c <__lshift+0x70>
 800c1a6:	1b03      	subs	r3, r0, r4
 800c1a8:	3b15      	subs	r3, #21
 800c1aa:	f023 0303 	bic.w	r3, r3, #3
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	f104 0215 	add.w	r2, r4, #21
 800c1b4:	4290      	cmp	r0, r2
 800c1b6:	bf38      	it	cc
 800c1b8:	2304      	movcc	r3, #4
 800c1ba:	f841 c003 	str.w	ip, [r1, r3]
 800c1be:	f1bc 0f00 	cmp.w	ip, #0
 800c1c2:	d001      	beq.n	800c1c8 <__lshift+0xac>
 800c1c4:	f108 0602 	add.w	r6, r8, #2
 800c1c8:	3e01      	subs	r6, #1
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	612e      	str	r6, [r5, #16]
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	f7ff fdd2 	bl	800bd78 <_Bfree>
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1da:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1de:	3301      	adds	r3, #1
 800c1e0:	e7c1      	b.n	800c166 <__lshift+0x4a>
 800c1e2:	3904      	subs	r1, #4
 800c1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1ec:	4298      	cmp	r0, r3
 800c1ee:	d8f9      	bhi.n	800c1e4 <__lshift+0xc8>
 800c1f0:	e7ea      	b.n	800c1c8 <__lshift+0xac>
 800c1f2:	bf00      	nop
 800c1f4:	0800df18 	.word	0x0800df18
 800c1f8:	0800df8c 	.word	0x0800df8c

0800c1fc <__mcmp>:
 800c1fc:	b530      	push	{r4, r5, lr}
 800c1fe:	6902      	ldr	r2, [r0, #16]
 800c200:	690c      	ldr	r4, [r1, #16]
 800c202:	1b12      	subs	r2, r2, r4
 800c204:	d10e      	bne.n	800c224 <__mcmp+0x28>
 800c206:	f100 0314 	add.w	r3, r0, #20
 800c20a:	3114      	adds	r1, #20
 800c20c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c210:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c214:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c218:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c21c:	42a5      	cmp	r5, r4
 800c21e:	d003      	beq.n	800c228 <__mcmp+0x2c>
 800c220:	d305      	bcc.n	800c22e <__mcmp+0x32>
 800c222:	2201      	movs	r2, #1
 800c224:	4610      	mov	r0, r2
 800c226:	bd30      	pop	{r4, r5, pc}
 800c228:	4283      	cmp	r3, r0
 800c22a:	d3f3      	bcc.n	800c214 <__mcmp+0x18>
 800c22c:	e7fa      	b.n	800c224 <__mcmp+0x28>
 800c22e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c232:	e7f7      	b.n	800c224 <__mcmp+0x28>

0800c234 <__mdiff>:
 800c234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c238:	460c      	mov	r4, r1
 800c23a:	4606      	mov	r6, r0
 800c23c:	4611      	mov	r1, r2
 800c23e:	4620      	mov	r0, r4
 800c240:	4690      	mov	r8, r2
 800c242:	f7ff ffdb 	bl	800c1fc <__mcmp>
 800c246:	1e05      	subs	r5, r0, #0
 800c248:	d110      	bne.n	800c26c <__mdiff+0x38>
 800c24a:	4629      	mov	r1, r5
 800c24c:	4630      	mov	r0, r6
 800c24e:	f7ff fd53 	bl	800bcf8 <_Balloc>
 800c252:	b930      	cbnz	r0, 800c262 <__mdiff+0x2e>
 800c254:	4b3a      	ldr	r3, [pc, #232]	; (800c340 <__mdiff+0x10c>)
 800c256:	4602      	mov	r2, r0
 800c258:	f240 2132 	movw	r1, #562	; 0x232
 800c25c:	4839      	ldr	r0, [pc, #228]	; (800c344 <__mdiff+0x110>)
 800c25e:	f7fe fd91 	bl	800ad84 <__assert_func>
 800c262:	2301      	movs	r3, #1
 800c264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26c:	bfa4      	itt	ge
 800c26e:	4643      	movge	r3, r8
 800c270:	46a0      	movge	r8, r4
 800c272:	4630      	mov	r0, r6
 800c274:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c278:	bfa6      	itte	ge
 800c27a:	461c      	movge	r4, r3
 800c27c:	2500      	movge	r5, #0
 800c27e:	2501      	movlt	r5, #1
 800c280:	f7ff fd3a 	bl	800bcf8 <_Balloc>
 800c284:	b920      	cbnz	r0, 800c290 <__mdiff+0x5c>
 800c286:	4b2e      	ldr	r3, [pc, #184]	; (800c340 <__mdiff+0x10c>)
 800c288:	4602      	mov	r2, r0
 800c28a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c28e:	e7e5      	b.n	800c25c <__mdiff+0x28>
 800c290:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c294:	6926      	ldr	r6, [r4, #16]
 800c296:	60c5      	str	r5, [r0, #12]
 800c298:	f104 0914 	add.w	r9, r4, #20
 800c29c:	f108 0514 	add.w	r5, r8, #20
 800c2a0:	f100 0e14 	add.w	lr, r0, #20
 800c2a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c2a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c2ac:	f108 0210 	add.w	r2, r8, #16
 800c2b0:	46f2      	mov	sl, lr
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c2b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c2bc:	fa1f f883 	uxth.w	r8, r3
 800c2c0:	fa11 f18b 	uxtah	r1, r1, fp
 800c2c4:	0c1b      	lsrs	r3, r3, #16
 800c2c6:	eba1 0808 	sub.w	r8, r1, r8
 800c2ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c2ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c2d2:	fa1f f888 	uxth.w	r8, r8
 800c2d6:	1419      	asrs	r1, r3, #16
 800c2d8:	454e      	cmp	r6, r9
 800c2da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c2de:	f84a 3b04 	str.w	r3, [sl], #4
 800c2e2:	d8e7      	bhi.n	800c2b4 <__mdiff+0x80>
 800c2e4:	1b33      	subs	r3, r6, r4
 800c2e6:	3b15      	subs	r3, #21
 800c2e8:	f023 0303 	bic.w	r3, r3, #3
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	3415      	adds	r4, #21
 800c2f0:	42a6      	cmp	r6, r4
 800c2f2:	bf38      	it	cc
 800c2f4:	2304      	movcc	r3, #4
 800c2f6:	441d      	add	r5, r3
 800c2f8:	4473      	add	r3, lr
 800c2fa:	469e      	mov	lr, r3
 800c2fc:	462e      	mov	r6, r5
 800c2fe:	4566      	cmp	r6, ip
 800c300:	d30e      	bcc.n	800c320 <__mdiff+0xec>
 800c302:	f10c 0203 	add.w	r2, ip, #3
 800c306:	1b52      	subs	r2, r2, r5
 800c308:	f022 0203 	bic.w	r2, r2, #3
 800c30c:	3d03      	subs	r5, #3
 800c30e:	45ac      	cmp	ip, r5
 800c310:	bf38      	it	cc
 800c312:	2200      	movcc	r2, #0
 800c314:	441a      	add	r2, r3
 800c316:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c31a:	b17b      	cbz	r3, 800c33c <__mdiff+0x108>
 800c31c:	6107      	str	r7, [r0, #16]
 800c31e:	e7a3      	b.n	800c268 <__mdiff+0x34>
 800c320:	f856 8b04 	ldr.w	r8, [r6], #4
 800c324:	fa11 f288 	uxtah	r2, r1, r8
 800c328:	1414      	asrs	r4, r2, #16
 800c32a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c32e:	b292      	uxth	r2, r2
 800c330:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c334:	f84e 2b04 	str.w	r2, [lr], #4
 800c338:	1421      	asrs	r1, r4, #16
 800c33a:	e7e0      	b.n	800c2fe <__mdiff+0xca>
 800c33c:	3f01      	subs	r7, #1
 800c33e:	e7ea      	b.n	800c316 <__mdiff+0xe2>
 800c340:	0800df18 	.word	0x0800df18
 800c344:	0800df8c 	.word	0x0800df8c

0800c348 <__d2b>:
 800c348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c34c:	4689      	mov	r9, r1
 800c34e:	2101      	movs	r1, #1
 800c350:	ec57 6b10 	vmov	r6, r7, d0
 800c354:	4690      	mov	r8, r2
 800c356:	f7ff fccf 	bl	800bcf8 <_Balloc>
 800c35a:	4604      	mov	r4, r0
 800c35c:	b930      	cbnz	r0, 800c36c <__d2b+0x24>
 800c35e:	4602      	mov	r2, r0
 800c360:	4b25      	ldr	r3, [pc, #148]	; (800c3f8 <__d2b+0xb0>)
 800c362:	4826      	ldr	r0, [pc, #152]	; (800c3fc <__d2b+0xb4>)
 800c364:	f240 310a 	movw	r1, #778	; 0x30a
 800c368:	f7fe fd0c 	bl	800ad84 <__assert_func>
 800c36c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c374:	bb35      	cbnz	r5, 800c3c4 <__d2b+0x7c>
 800c376:	2e00      	cmp	r6, #0
 800c378:	9301      	str	r3, [sp, #4]
 800c37a:	d028      	beq.n	800c3ce <__d2b+0x86>
 800c37c:	4668      	mov	r0, sp
 800c37e:	9600      	str	r6, [sp, #0]
 800c380:	f7ff fd82 	bl	800be88 <__lo0bits>
 800c384:	9900      	ldr	r1, [sp, #0]
 800c386:	b300      	cbz	r0, 800c3ca <__d2b+0x82>
 800c388:	9a01      	ldr	r2, [sp, #4]
 800c38a:	f1c0 0320 	rsb	r3, r0, #32
 800c38e:	fa02 f303 	lsl.w	r3, r2, r3
 800c392:	430b      	orrs	r3, r1
 800c394:	40c2      	lsrs	r2, r0
 800c396:	6163      	str	r3, [r4, #20]
 800c398:	9201      	str	r2, [sp, #4]
 800c39a:	9b01      	ldr	r3, [sp, #4]
 800c39c:	61a3      	str	r3, [r4, #24]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bf14      	ite	ne
 800c3a2:	2202      	movne	r2, #2
 800c3a4:	2201      	moveq	r2, #1
 800c3a6:	6122      	str	r2, [r4, #16]
 800c3a8:	b1d5      	cbz	r5, 800c3e0 <__d2b+0x98>
 800c3aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c3ae:	4405      	add	r5, r0
 800c3b0:	f8c9 5000 	str.w	r5, [r9]
 800c3b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3b8:	f8c8 0000 	str.w	r0, [r8]
 800c3bc:	4620      	mov	r0, r4
 800c3be:	b003      	add	sp, #12
 800c3c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3c8:	e7d5      	b.n	800c376 <__d2b+0x2e>
 800c3ca:	6161      	str	r1, [r4, #20]
 800c3cc:	e7e5      	b.n	800c39a <__d2b+0x52>
 800c3ce:	a801      	add	r0, sp, #4
 800c3d0:	f7ff fd5a 	bl	800be88 <__lo0bits>
 800c3d4:	9b01      	ldr	r3, [sp, #4]
 800c3d6:	6163      	str	r3, [r4, #20]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	6122      	str	r2, [r4, #16]
 800c3dc:	3020      	adds	r0, #32
 800c3de:	e7e3      	b.n	800c3a8 <__d2b+0x60>
 800c3e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3e8:	f8c9 0000 	str.w	r0, [r9]
 800c3ec:	6918      	ldr	r0, [r3, #16]
 800c3ee:	f7ff fd2b 	bl	800be48 <__hi0bits>
 800c3f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3f6:	e7df      	b.n	800c3b8 <__d2b+0x70>
 800c3f8:	0800df18 	.word	0x0800df18
 800c3fc:	0800df8c 	.word	0x0800df8c

0800c400 <_realloc_r>:
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	4680      	mov	r8, r0
 800c406:	4614      	mov	r4, r2
 800c408:	460e      	mov	r6, r1
 800c40a:	b921      	cbnz	r1, 800c416 <_realloc_r+0x16>
 800c40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c410:	4611      	mov	r1, r2
 800c412:	f7fd bd5d 	b.w	8009ed0 <_malloc_r>
 800c416:	b92a      	cbnz	r2, 800c424 <_realloc_r+0x24>
 800c418:	f7fd fcba 	bl	8009d90 <_free_r>
 800c41c:	4625      	mov	r5, r4
 800c41e:	4628      	mov	r0, r5
 800c420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c424:	f000 fbe6 	bl	800cbf4 <_malloc_usable_size_r>
 800c428:	4284      	cmp	r4, r0
 800c42a:	4607      	mov	r7, r0
 800c42c:	d802      	bhi.n	800c434 <_realloc_r+0x34>
 800c42e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c432:	d812      	bhi.n	800c45a <_realloc_r+0x5a>
 800c434:	4621      	mov	r1, r4
 800c436:	4640      	mov	r0, r8
 800c438:	f7fd fd4a 	bl	8009ed0 <_malloc_r>
 800c43c:	4605      	mov	r5, r0
 800c43e:	2800      	cmp	r0, #0
 800c440:	d0ed      	beq.n	800c41e <_realloc_r+0x1e>
 800c442:	42bc      	cmp	r4, r7
 800c444:	4622      	mov	r2, r4
 800c446:	4631      	mov	r1, r6
 800c448:	bf28      	it	cs
 800c44a:	463a      	movcs	r2, r7
 800c44c:	f7fd fc50 	bl	8009cf0 <memcpy>
 800c450:	4631      	mov	r1, r6
 800c452:	4640      	mov	r0, r8
 800c454:	f7fd fc9c 	bl	8009d90 <_free_r>
 800c458:	e7e1      	b.n	800c41e <_realloc_r+0x1e>
 800c45a:	4635      	mov	r5, r6
 800c45c:	e7df      	b.n	800c41e <_realloc_r+0x1e>

0800c45e <__sfputc_r>:
 800c45e:	6893      	ldr	r3, [r2, #8]
 800c460:	3b01      	subs	r3, #1
 800c462:	2b00      	cmp	r3, #0
 800c464:	b410      	push	{r4}
 800c466:	6093      	str	r3, [r2, #8]
 800c468:	da08      	bge.n	800c47c <__sfputc_r+0x1e>
 800c46a:	6994      	ldr	r4, [r2, #24]
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	db01      	blt.n	800c474 <__sfputc_r+0x16>
 800c470:	290a      	cmp	r1, #10
 800c472:	d103      	bne.n	800c47c <__sfputc_r+0x1e>
 800c474:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c478:	f000 b98e 	b.w	800c798 <__swbuf_r>
 800c47c:	6813      	ldr	r3, [r2, #0]
 800c47e:	1c58      	adds	r0, r3, #1
 800c480:	6010      	str	r0, [r2, #0]
 800c482:	7019      	strb	r1, [r3, #0]
 800c484:	4608      	mov	r0, r1
 800c486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <__sfputs_r>:
 800c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48e:	4606      	mov	r6, r0
 800c490:	460f      	mov	r7, r1
 800c492:	4614      	mov	r4, r2
 800c494:	18d5      	adds	r5, r2, r3
 800c496:	42ac      	cmp	r4, r5
 800c498:	d101      	bne.n	800c49e <__sfputs_r+0x12>
 800c49a:	2000      	movs	r0, #0
 800c49c:	e007      	b.n	800c4ae <__sfputs_r+0x22>
 800c49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4a2:	463a      	mov	r2, r7
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f7ff ffda 	bl	800c45e <__sfputc_r>
 800c4aa:	1c43      	adds	r3, r0, #1
 800c4ac:	d1f3      	bne.n	800c496 <__sfputs_r+0xa>
 800c4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4b0 <_vfiprintf_r>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	460d      	mov	r5, r1
 800c4b6:	b09d      	sub	sp, #116	; 0x74
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	4698      	mov	r8, r3
 800c4bc:	4606      	mov	r6, r0
 800c4be:	b118      	cbz	r0, 800c4c8 <_vfiprintf_r+0x18>
 800c4c0:	6983      	ldr	r3, [r0, #24]
 800c4c2:	b90b      	cbnz	r3, 800c4c8 <_vfiprintf_r+0x18>
 800c4c4:	f7ff fb54 	bl	800bb70 <__sinit>
 800c4c8:	4b89      	ldr	r3, [pc, #548]	; (800c6f0 <_vfiprintf_r+0x240>)
 800c4ca:	429d      	cmp	r5, r3
 800c4cc:	d11b      	bne.n	800c506 <_vfiprintf_r+0x56>
 800c4ce:	6875      	ldr	r5, [r6, #4]
 800c4d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4d2:	07d9      	lsls	r1, r3, #31
 800c4d4:	d405      	bmi.n	800c4e2 <_vfiprintf_r+0x32>
 800c4d6:	89ab      	ldrh	r3, [r5, #12]
 800c4d8:	059a      	lsls	r2, r3, #22
 800c4da:	d402      	bmi.n	800c4e2 <_vfiprintf_r+0x32>
 800c4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4de:	f7ff fbfc 	bl	800bcda <__retarget_lock_acquire_recursive>
 800c4e2:	89ab      	ldrh	r3, [r5, #12]
 800c4e4:	071b      	lsls	r3, r3, #28
 800c4e6:	d501      	bpl.n	800c4ec <_vfiprintf_r+0x3c>
 800c4e8:	692b      	ldr	r3, [r5, #16]
 800c4ea:	b9eb      	cbnz	r3, 800c528 <_vfiprintf_r+0x78>
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f000 f9b6 	bl	800c860 <__swsetup_r>
 800c4f4:	b1c0      	cbz	r0, 800c528 <_vfiprintf_r+0x78>
 800c4f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4f8:	07dc      	lsls	r4, r3, #31
 800c4fa:	d50e      	bpl.n	800c51a <_vfiprintf_r+0x6a>
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c500:	b01d      	add	sp, #116	; 0x74
 800c502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c506:	4b7b      	ldr	r3, [pc, #492]	; (800c6f4 <_vfiprintf_r+0x244>)
 800c508:	429d      	cmp	r5, r3
 800c50a:	d101      	bne.n	800c510 <_vfiprintf_r+0x60>
 800c50c:	68b5      	ldr	r5, [r6, #8]
 800c50e:	e7df      	b.n	800c4d0 <_vfiprintf_r+0x20>
 800c510:	4b79      	ldr	r3, [pc, #484]	; (800c6f8 <_vfiprintf_r+0x248>)
 800c512:	429d      	cmp	r5, r3
 800c514:	bf08      	it	eq
 800c516:	68f5      	ldreq	r5, [r6, #12]
 800c518:	e7da      	b.n	800c4d0 <_vfiprintf_r+0x20>
 800c51a:	89ab      	ldrh	r3, [r5, #12]
 800c51c:	0598      	lsls	r0, r3, #22
 800c51e:	d4ed      	bmi.n	800c4fc <_vfiprintf_r+0x4c>
 800c520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c522:	f7ff fbdb 	bl	800bcdc <__retarget_lock_release_recursive>
 800c526:	e7e9      	b.n	800c4fc <_vfiprintf_r+0x4c>
 800c528:	2300      	movs	r3, #0
 800c52a:	9309      	str	r3, [sp, #36]	; 0x24
 800c52c:	2320      	movs	r3, #32
 800c52e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c532:	f8cd 800c 	str.w	r8, [sp, #12]
 800c536:	2330      	movs	r3, #48	; 0x30
 800c538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6fc <_vfiprintf_r+0x24c>
 800c53c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c540:	f04f 0901 	mov.w	r9, #1
 800c544:	4623      	mov	r3, r4
 800c546:	469a      	mov	sl, r3
 800c548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c54c:	b10a      	cbz	r2, 800c552 <_vfiprintf_r+0xa2>
 800c54e:	2a25      	cmp	r2, #37	; 0x25
 800c550:	d1f9      	bne.n	800c546 <_vfiprintf_r+0x96>
 800c552:	ebba 0b04 	subs.w	fp, sl, r4
 800c556:	d00b      	beq.n	800c570 <_vfiprintf_r+0xc0>
 800c558:	465b      	mov	r3, fp
 800c55a:	4622      	mov	r2, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	4630      	mov	r0, r6
 800c560:	f7ff ff94 	bl	800c48c <__sfputs_r>
 800c564:	3001      	adds	r0, #1
 800c566:	f000 80aa 	beq.w	800c6be <_vfiprintf_r+0x20e>
 800c56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c56c:	445a      	add	r2, fp
 800c56e:	9209      	str	r2, [sp, #36]	; 0x24
 800c570:	f89a 3000 	ldrb.w	r3, [sl]
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 80a2 	beq.w	800c6be <_vfiprintf_r+0x20e>
 800c57a:	2300      	movs	r3, #0
 800c57c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c584:	f10a 0a01 	add.w	sl, sl, #1
 800c588:	9304      	str	r3, [sp, #16]
 800c58a:	9307      	str	r3, [sp, #28]
 800c58c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c590:	931a      	str	r3, [sp, #104]	; 0x68
 800c592:	4654      	mov	r4, sl
 800c594:	2205      	movs	r2, #5
 800c596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59a:	4858      	ldr	r0, [pc, #352]	; (800c6fc <_vfiprintf_r+0x24c>)
 800c59c:	f7f3 fe40 	bl	8000220 <memchr>
 800c5a0:	9a04      	ldr	r2, [sp, #16]
 800c5a2:	b9d8      	cbnz	r0, 800c5dc <_vfiprintf_r+0x12c>
 800c5a4:	06d1      	lsls	r1, r2, #27
 800c5a6:	bf44      	itt	mi
 800c5a8:	2320      	movmi	r3, #32
 800c5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ae:	0713      	lsls	r3, r2, #28
 800c5b0:	bf44      	itt	mi
 800c5b2:	232b      	movmi	r3, #43	; 0x2b
 800c5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c5be:	d015      	beq.n	800c5ec <_vfiprintf_r+0x13c>
 800c5c0:	9a07      	ldr	r2, [sp, #28]
 800c5c2:	4654      	mov	r4, sl
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	f04f 0c0a 	mov.w	ip, #10
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5d0:	3b30      	subs	r3, #48	; 0x30
 800c5d2:	2b09      	cmp	r3, #9
 800c5d4:	d94e      	bls.n	800c674 <_vfiprintf_r+0x1c4>
 800c5d6:	b1b0      	cbz	r0, 800c606 <_vfiprintf_r+0x156>
 800c5d8:	9207      	str	r2, [sp, #28]
 800c5da:	e014      	b.n	800c606 <_vfiprintf_r+0x156>
 800c5dc:	eba0 0308 	sub.w	r3, r0, r8
 800c5e0:	fa09 f303 	lsl.w	r3, r9, r3
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	9304      	str	r3, [sp, #16]
 800c5e8:	46a2      	mov	sl, r4
 800c5ea:	e7d2      	b.n	800c592 <_vfiprintf_r+0xe2>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	1d19      	adds	r1, r3, #4
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	9103      	str	r1, [sp, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	bfbb      	ittet	lt
 800c5f8:	425b      	neglt	r3, r3
 800c5fa:	f042 0202 	orrlt.w	r2, r2, #2
 800c5fe:	9307      	strge	r3, [sp, #28]
 800c600:	9307      	strlt	r3, [sp, #28]
 800c602:	bfb8      	it	lt
 800c604:	9204      	strlt	r2, [sp, #16]
 800c606:	7823      	ldrb	r3, [r4, #0]
 800c608:	2b2e      	cmp	r3, #46	; 0x2e
 800c60a:	d10c      	bne.n	800c626 <_vfiprintf_r+0x176>
 800c60c:	7863      	ldrb	r3, [r4, #1]
 800c60e:	2b2a      	cmp	r3, #42	; 0x2a
 800c610:	d135      	bne.n	800c67e <_vfiprintf_r+0x1ce>
 800c612:	9b03      	ldr	r3, [sp, #12]
 800c614:	1d1a      	adds	r2, r3, #4
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	9203      	str	r2, [sp, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	bfb8      	it	lt
 800c61e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c622:	3402      	adds	r4, #2
 800c624:	9305      	str	r3, [sp, #20]
 800c626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c70c <_vfiprintf_r+0x25c>
 800c62a:	7821      	ldrb	r1, [r4, #0]
 800c62c:	2203      	movs	r2, #3
 800c62e:	4650      	mov	r0, sl
 800c630:	f7f3 fdf6 	bl	8000220 <memchr>
 800c634:	b140      	cbz	r0, 800c648 <_vfiprintf_r+0x198>
 800c636:	2340      	movs	r3, #64	; 0x40
 800c638:	eba0 000a 	sub.w	r0, r0, sl
 800c63c:	fa03 f000 	lsl.w	r0, r3, r0
 800c640:	9b04      	ldr	r3, [sp, #16]
 800c642:	4303      	orrs	r3, r0
 800c644:	3401      	adds	r4, #1
 800c646:	9304      	str	r3, [sp, #16]
 800c648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c64c:	482c      	ldr	r0, [pc, #176]	; (800c700 <_vfiprintf_r+0x250>)
 800c64e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c652:	2206      	movs	r2, #6
 800c654:	f7f3 fde4 	bl	8000220 <memchr>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d03f      	beq.n	800c6dc <_vfiprintf_r+0x22c>
 800c65c:	4b29      	ldr	r3, [pc, #164]	; (800c704 <_vfiprintf_r+0x254>)
 800c65e:	bb1b      	cbnz	r3, 800c6a8 <_vfiprintf_r+0x1f8>
 800c660:	9b03      	ldr	r3, [sp, #12]
 800c662:	3307      	adds	r3, #7
 800c664:	f023 0307 	bic.w	r3, r3, #7
 800c668:	3308      	adds	r3, #8
 800c66a:	9303      	str	r3, [sp, #12]
 800c66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c66e:	443b      	add	r3, r7
 800c670:	9309      	str	r3, [sp, #36]	; 0x24
 800c672:	e767      	b.n	800c544 <_vfiprintf_r+0x94>
 800c674:	fb0c 3202 	mla	r2, ip, r2, r3
 800c678:	460c      	mov	r4, r1
 800c67a:	2001      	movs	r0, #1
 800c67c:	e7a5      	b.n	800c5ca <_vfiprintf_r+0x11a>
 800c67e:	2300      	movs	r3, #0
 800c680:	3401      	adds	r4, #1
 800c682:	9305      	str	r3, [sp, #20]
 800c684:	4619      	mov	r1, r3
 800c686:	f04f 0c0a 	mov.w	ip, #10
 800c68a:	4620      	mov	r0, r4
 800c68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c690:	3a30      	subs	r2, #48	; 0x30
 800c692:	2a09      	cmp	r2, #9
 800c694:	d903      	bls.n	800c69e <_vfiprintf_r+0x1ee>
 800c696:	2b00      	cmp	r3, #0
 800c698:	d0c5      	beq.n	800c626 <_vfiprintf_r+0x176>
 800c69a:	9105      	str	r1, [sp, #20]
 800c69c:	e7c3      	b.n	800c626 <_vfiprintf_r+0x176>
 800c69e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e7f0      	b.n	800c68a <_vfiprintf_r+0x1da>
 800c6a8:	ab03      	add	r3, sp, #12
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	462a      	mov	r2, r5
 800c6ae:	4b16      	ldr	r3, [pc, #88]	; (800c708 <_vfiprintf_r+0x258>)
 800c6b0:	a904      	add	r1, sp, #16
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	f7fd fe7c 	bl	800a3b0 <_printf_float>
 800c6b8:	4607      	mov	r7, r0
 800c6ba:	1c78      	adds	r0, r7, #1
 800c6bc:	d1d6      	bne.n	800c66c <_vfiprintf_r+0x1bc>
 800c6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6c0:	07d9      	lsls	r1, r3, #31
 800c6c2:	d405      	bmi.n	800c6d0 <_vfiprintf_r+0x220>
 800c6c4:	89ab      	ldrh	r3, [r5, #12]
 800c6c6:	059a      	lsls	r2, r3, #22
 800c6c8:	d402      	bmi.n	800c6d0 <_vfiprintf_r+0x220>
 800c6ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6cc:	f7ff fb06 	bl	800bcdc <__retarget_lock_release_recursive>
 800c6d0:	89ab      	ldrh	r3, [r5, #12]
 800c6d2:	065b      	lsls	r3, r3, #25
 800c6d4:	f53f af12 	bmi.w	800c4fc <_vfiprintf_r+0x4c>
 800c6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6da:	e711      	b.n	800c500 <_vfiprintf_r+0x50>
 800c6dc:	ab03      	add	r3, sp, #12
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	462a      	mov	r2, r5
 800c6e2:	4b09      	ldr	r3, [pc, #36]	; (800c708 <_vfiprintf_r+0x258>)
 800c6e4:	a904      	add	r1, sp, #16
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7fe f906 	bl	800a8f8 <_printf_i>
 800c6ec:	e7e4      	b.n	800c6b8 <_vfiprintf_r+0x208>
 800c6ee:	bf00      	nop
 800c6f0:	0800df4c 	.word	0x0800df4c
 800c6f4:	0800df6c 	.word	0x0800df6c
 800c6f8:	0800df2c 	.word	0x0800df2c
 800c6fc:	0800de18 	.word	0x0800de18
 800c700:	0800de22 	.word	0x0800de22
 800c704:	0800a3b1 	.word	0x0800a3b1
 800c708:	0800c48d 	.word	0x0800c48d
 800c70c:	0800de1e 	.word	0x0800de1e

0800c710 <__sread>:
 800c710:	b510      	push	{r4, lr}
 800c712:	460c      	mov	r4, r1
 800c714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c718:	f000 fa74 	bl	800cc04 <_read_r>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	bfab      	itete	ge
 800c720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c722:	89a3      	ldrhlt	r3, [r4, #12]
 800c724:	181b      	addge	r3, r3, r0
 800c726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c72a:	bfac      	ite	ge
 800c72c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c72e:	81a3      	strhlt	r3, [r4, #12]
 800c730:	bd10      	pop	{r4, pc}

0800c732 <__swrite>:
 800c732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c736:	461f      	mov	r7, r3
 800c738:	898b      	ldrh	r3, [r1, #12]
 800c73a:	05db      	lsls	r3, r3, #23
 800c73c:	4605      	mov	r5, r0
 800c73e:	460c      	mov	r4, r1
 800c740:	4616      	mov	r6, r2
 800c742:	d505      	bpl.n	800c750 <__swrite+0x1e>
 800c744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c748:	2302      	movs	r3, #2
 800c74a:	2200      	movs	r2, #0
 800c74c:	f000 f9c8 	bl	800cae0 <_lseek_r>
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c75a:	81a3      	strh	r3, [r4, #12]
 800c75c:	4632      	mov	r2, r6
 800c75e:	463b      	mov	r3, r7
 800c760:	4628      	mov	r0, r5
 800c762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c766:	f000 b869 	b.w	800c83c <_write_r>

0800c76a <__sseek>:
 800c76a:	b510      	push	{r4, lr}
 800c76c:	460c      	mov	r4, r1
 800c76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c772:	f000 f9b5 	bl	800cae0 <_lseek_r>
 800c776:	1c43      	adds	r3, r0, #1
 800c778:	89a3      	ldrh	r3, [r4, #12]
 800c77a:	bf15      	itete	ne
 800c77c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c77e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c786:	81a3      	strheq	r3, [r4, #12]
 800c788:	bf18      	it	ne
 800c78a:	81a3      	strhne	r3, [r4, #12]
 800c78c:	bd10      	pop	{r4, pc}

0800c78e <__sclose>:
 800c78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c792:	f000 b8d3 	b.w	800c93c <_close_r>
	...

0800c798 <__swbuf_r>:
 800c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79a:	460e      	mov	r6, r1
 800c79c:	4614      	mov	r4, r2
 800c79e:	4605      	mov	r5, r0
 800c7a0:	b118      	cbz	r0, 800c7aa <__swbuf_r+0x12>
 800c7a2:	6983      	ldr	r3, [r0, #24]
 800c7a4:	b90b      	cbnz	r3, 800c7aa <__swbuf_r+0x12>
 800c7a6:	f7ff f9e3 	bl	800bb70 <__sinit>
 800c7aa:	4b21      	ldr	r3, [pc, #132]	; (800c830 <__swbuf_r+0x98>)
 800c7ac:	429c      	cmp	r4, r3
 800c7ae:	d12b      	bne.n	800c808 <__swbuf_r+0x70>
 800c7b0:	686c      	ldr	r4, [r5, #4]
 800c7b2:	69a3      	ldr	r3, [r4, #24]
 800c7b4:	60a3      	str	r3, [r4, #8]
 800c7b6:	89a3      	ldrh	r3, [r4, #12]
 800c7b8:	071a      	lsls	r2, r3, #28
 800c7ba:	d52f      	bpl.n	800c81c <__swbuf_r+0x84>
 800c7bc:	6923      	ldr	r3, [r4, #16]
 800c7be:	b36b      	cbz	r3, 800c81c <__swbuf_r+0x84>
 800c7c0:	6923      	ldr	r3, [r4, #16]
 800c7c2:	6820      	ldr	r0, [r4, #0]
 800c7c4:	1ac0      	subs	r0, r0, r3
 800c7c6:	6963      	ldr	r3, [r4, #20]
 800c7c8:	b2f6      	uxtb	r6, r6
 800c7ca:	4283      	cmp	r3, r0
 800c7cc:	4637      	mov	r7, r6
 800c7ce:	dc04      	bgt.n	800c7da <__swbuf_r+0x42>
 800c7d0:	4621      	mov	r1, r4
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	f000 f948 	bl	800ca68 <_fflush_r>
 800c7d8:	bb30      	cbnz	r0, 800c828 <__swbuf_r+0x90>
 800c7da:	68a3      	ldr	r3, [r4, #8]
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	60a3      	str	r3, [r4, #8]
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	1c5a      	adds	r2, r3, #1
 800c7e4:	6022      	str	r2, [r4, #0]
 800c7e6:	701e      	strb	r6, [r3, #0]
 800c7e8:	6963      	ldr	r3, [r4, #20]
 800c7ea:	3001      	adds	r0, #1
 800c7ec:	4283      	cmp	r3, r0
 800c7ee:	d004      	beq.n	800c7fa <__swbuf_r+0x62>
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	07db      	lsls	r3, r3, #31
 800c7f4:	d506      	bpl.n	800c804 <__swbuf_r+0x6c>
 800c7f6:	2e0a      	cmp	r6, #10
 800c7f8:	d104      	bne.n	800c804 <__swbuf_r+0x6c>
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f000 f933 	bl	800ca68 <_fflush_r>
 800c802:	b988      	cbnz	r0, 800c828 <__swbuf_r+0x90>
 800c804:	4638      	mov	r0, r7
 800c806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c808:	4b0a      	ldr	r3, [pc, #40]	; (800c834 <__swbuf_r+0x9c>)
 800c80a:	429c      	cmp	r4, r3
 800c80c:	d101      	bne.n	800c812 <__swbuf_r+0x7a>
 800c80e:	68ac      	ldr	r4, [r5, #8]
 800c810:	e7cf      	b.n	800c7b2 <__swbuf_r+0x1a>
 800c812:	4b09      	ldr	r3, [pc, #36]	; (800c838 <__swbuf_r+0xa0>)
 800c814:	429c      	cmp	r4, r3
 800c816:	bf08      	it	eq
 800c818:	68ec      	ldreq	r4, [r5, #12]
 800c81a:	e7ca      	b.n	800c7b2 <__swbuf_r+0x1a>
 800c81c:	4621      	mov	r1, r4
 800c81e:	4628      	mov	r0, r5
 800c820:	f000 f81e 	bl	800c860 <__swsetup_r>
 800c824:	2800      	cmp	r0, #0
 800c826:	d0cb      	beq.n	800c7c0 <__swbuf_r+0x28>
 800c828:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c82c:	e7ea      	b.n	800c804 <__swbuf_r+0x6c>
 800c82e:	bf00      	nop
 800c830:	0800df4c 	.word	0x0800df4c
 800c834:	0800df6c 	.word	0x0800df6c
 800c838:	0800df2c 	.word	0x0800df2c

0800c83c <_write_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4d07      	ldr	r5, [pc, #28]	; (800c85c <_write_r+0x20>)
 800c840:	4604      	mov	r4, r0
 800c842:	4608      	mov	r0, r1
 800c844:	4611      	mov	r1, r2
 800c846:	2200      	movs	r2, #0
 800c848:	602a      	str	r2, [r5, #0]
 800c84a:	461a      	mov	r2, r3
 800c84c:	f7f4 fca8 	bl	80011a0 <_write>
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d102      	bne.n	800c85a <_write_r+0x1e>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	b103      	cbz	r3, 800c85a <_write_r+0x1e>
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
 800c85c:	2000b220 	.word	0x2000b220

0800c860 <__swsetup_r>:
 800c860:	4b32      	ldr	r3, [pc, #200]	; (800c92c <__swsetup_r+0xcc>)
 800c862:	b570      	push	{r4, r5, r6, lr}
 800c864:	681d      	ldr	r5, [r3, #0]
 800c866:	4606      	mov	r6, r0
 800c868:	460c      	mov	r4, r1
 800c86a:	b125      	cbz	r5, 800c876 <__swsetup_r+0x16>
 800c86c:	69ab      	ldr	r3, [r5, #24]
 800c86e:	b913      	cbnz	r3, 800c876 <__swsetup_r+0x16>
 800c870:	4628      	mov	r0, r5
 800c872:	f7ff f97d 	bl	800bb70 <__sinit>
 800c876:	4b2e      	ldr	r3, [pc, #184]	; (800c930 <__swsetup_r+0xd0>)
 800c878:	429c      	cmp	r4, r3
 800c87a:	d10f      	bne.n	800c89c <__swsetup_r+0x3c>
 800c87c:	686c      	ldr	r4, [r5, #4]
 800c87e:	89a3      	ldrh	r3, [r4, #12]
 800c880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c884:	0719      	lsls	r1, r3, #28
 800c886:	d42c      	bmi.n	800c8e2 <__swsetup_r+0x82>
 800c888:	06dd      	lsls	r5, r3, #27
 800c88a:	d411      	bmi.n	800c8b0 <__swsetup_r+0x50>
 800c88c:	2309      	movs	r3, #9
 800c88e:	6033      	str	r3, [r6, #0]
 800c890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c894:	81a3      	strh	r3, [r4, #12]
 800c896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c89a:	e03e      	b.n	800c91a <__swsetup_r+0xba>
 800c89c:	4b25      	ldr	r3, [pc, #148]	; (800c934 <__swsetup_r+0xd4>)
 800c89e:	429c      	cmp	r4, r3
 800c8a0:	d101      	bne.n	800c8a6 <__swsetup_r+0x46>
 800c8a2:	68ac      	ldr	r4, [r5, #8]
 800c8a4:	e7eb      	b.n	800c87e <__swsetup_r+0x1e>
 800c8a6:	4b24      	ldr	r3, [pc, #144]	; (800c938 <__swsetup_r+0xd8>)
 800c8a8:	429c      	cmp	r4, r3
 800c8aa:	bf08      	it	eq
 800c8ac:	68ec      	ldreq	r4, [r5, #12]
 800c8ae:	e7e6      	b.n	800c87e <__swsetup_r+0x1e>
 800c8b0:	0758      	lsls	r0, r3, #29
 800c8b2:	d512      	bpl.n	800c8da <__swsetup_r+0x7a>
 800c8b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8b6:	b141      	cbz	r1, 800c8ca <__swsetup_r+0x6a>
 800c8b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8bc:	4299      	cmp	r1, r3
 800c8be:	d002      	beq.n	800c8c6 <__swsetup_r+0x66>
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	f7fd fa65 	bl	8009d90 <_free_r>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	6363      	str	r3, [r4, #52]	; 0x34
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8d0:	81a3      	strh	r3, [r4, #12]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	6063      	str	r3, [r4, #4]
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	6023      	str	r3, [r4, #0]
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	f043 0308 	orr.w	r3, r3, #8
 800c8e0:	81a3      	strh	r3, [r4, #12]
 800c8e2:	6923      	ldr	r3, [r4, #16]
 800c8e4:	b94b      	cbnz	r3, 800c8fa <__swsetup_r+0x9a>
 800c8e6:	89a3      	ldrh	r3, [r4, #12]
 800c8e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8f0:	d003      	beq.n	800c8fa <__swsetup_r+0x9a>
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f000 f92b 	bl	800cb50 <__smakebuf_r>
 800c8fa:	89a0      	ldrh	r0, [r4, #12]
 800c8fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c900:	f010 0301 	ands.w	r3, r0, #1
 800c904:	d00a      	beq.n	800c91c <__swsetup_r+0xbc>
 800c906:	2300      	movs	r3, #0
 800c908:	60a3      	str	r3, [r4, #8]
 800c90a:	6963      	ldr	r3, [r4, #20]
 800c90c:	425b      	negs	r3, r3
 800c90e:	61a3      	str	r3, [r4, #24]
 800c910:	6923      	ldr	r3, [r4, #16]
 800c912:	b943      	cbnz	r3, 800c926 <__swsetup_r+0xc6>
 800c914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c918:	d1ba      	bne.n	800c890 <__swsetup_r+0x30>
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
 800c91c:	0781      	lsls	r1, r0, #30
 800c91e:	bf58      	it	pl
 800c920:	6963      	ldrpl	r3, [r4, #20]
 800c922:	60a3      	str	r3, [r4, #8]
 800c924:	e7f4      	b.n	800c910 <__swsetup_r+0xb0>
 800c926:	2000      	movs	r0, #0
 800c928:	e7f7      	b.n	800c91a <__swsetup_r+0xba>
 800c92a:	bf00      	nop
 800c92c:	200000dc 	.word	0x200000dc
 800c930:	0800df4c 	.word	0x0800df4c
 800c934:	0800df6c 	.word	0x0800df6c
 800c938:	0800df2c 	.word	0x0800df2c

0800c93c <_close_r>:
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	4d06      	ldr	r5, [pc, #24]	; (800c958 <_close_r+0x1c>)
 800c940:	2300      	movs	r3, #0
 800c942:	4604      	mov	r4, r0
 800c944:	4608      	mov	r0, r1
 800c946:	602b      	str	r3, [r5, #0]
 800c948:	f7f4 fc38 	bl	80011bc <_close>
 800c94c:	1c43      	adds	r3, r0, #1
 800c94e:	d102      	bne.n	800c956 <_close_r+0x1a>
 800c950:	682b      	ldr	r3, [r5, #0]
 800c952:	b103      	cbz	r3, 800c956 <_close_r+0x1a>
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	2000b220 	.word	0x2000b220

0800c95c <__sflush_r>:
 800c95c:	898a      	ldrh	r2, [r1, #12]
 800c95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c962:	4605      	mov	r5, r0
 800c964:	0710      	lsls	r0, r2, #28
 800c966:	460c      	mov	r4, r1
 800c968:	d458      	bmi.n	800ca1c <__sflush_r+0xc0>
 800c96a:	684b      	ldr	r3, [r1, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	dc05      	bgt.n	800c97c <__sflush_r+0x20>
 800c970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c972:	2b00      	cmp	r3, #0
 800c974:	dc02      	bgt.n	800c97c <__sflush_r+0x20>
 800c976:	2000      	movs	r0, #0
 800c978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c97c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c97e:	2e00      	cmp	r6, #0
 800c980:	d0f9      	beq.n	800c976 <__sflush_r+0x1a>
 800c982:	2300      	movs	r3, #0
 800c984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c988:	682f      	ldr	r7, [r5, #0]
 800c98a:	602b      	str	r3, [r5, #0]
 800c98c:	d032      	beq.n	800c9f4 <__sflush_r+0x98>
 800c98e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c990:	89a3      	ldrh	r3, [r4, #12]
 800c992:	075a      	lsls	r2, r3, #29
 800c994:	d505      	bpl.n	800c9a2 <__sflush_r+0x46>
 800c996:	6863      	ldr	r3, [r4, #4]
 800c998:	1ac0      	subs	r0, r0, r3
 800c99a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c99c:	b10b      	cbz	r3, 800c9a2 <__sflush_r+0x46>
 800c99e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9a0:	1ac0      	subs	r0, r0, r3
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9a8:	6a21      	ldr	r1, [r4, #32]
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	47b0      	blx	r6
 800c9ae:	1c43      	adds	r3, r0, #1
 800c9b0:	89a3      	ldrh	r3, [r4, #12]
 800c9b2:	d106      	bne.n	800c9c2 <__sflush_r+0x66>
 800c9b4:	6829      	ldr	r1, [r5, #0]
 800c9b6:	291d      	cmp	r1, #29
 800c9b8:	d82c      	bhi.n	800ca14 <__sflush_r+0xb8>
 800c9ba:	4a2a      	ldr	r2, [pc, #168]	; (800ca64 <__sflush_r+0x108>)
 800c9bc:	40ca      	lsrs	r2, r1
 800c9be:	07d6      	lsls	r6, r2, #31
 800c9c0:	d528      	bpl.n	800ca14 <__sflush_r+0xb8>
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	6062      	str	r2, [r4, #4]
 800c9c6:	04d9      	lsls	r1, r3, #19
 800c9c8:	6922      	ldr	r2, [r4, #16]
 800c9ca:	6022      	str	r2, [r4, #0]
 800c9cc:	d504      	bpl.n	800c9d8 <__sflush_r+0x7c>
 800c9ce:	1c42      	adds	r2, r0, #1
 800c9d0:	d101      	bne.n	800c9d6 <__sflush_r+0x7a>
 800c9d2:	682b      	ldr	r3, [r5, #0]
 800c9d4:	b903      	cbnz	r3, 800c9d8 <__sflush_r+0x7c>
 800c9d6:	6560      	str	r0, [r4, #84]	; 0x54
 800c9d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9da:	602f      	str	r7, [r5, #0]
 800c9dc:	2900      	cmp	r1, #0
 800c9de:	d0ca      	beq.n	800c976 <__sflush_r+0x1a>
 800c9e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9e4:	4299      	cmp	r1, r3
 800c9e6:	d002      	beq.n	800c9ee <__sflush_r+0x92>
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f7fd f9d1 	bl	8009d90 <_free_r>
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	6360      	str	r0, [r4, #52]	; 0x34
 800c9f2:	e7c1      	b.n	800c978 <__sflush_r+0x1c>
 800c9f4:	6a21      	ldr	r1, [r4, #32]
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	47b0      	blx	r6
 800c9fc:	1c41      	adds	r1, r0, #1
 800c9fe:	d1c7      	bne.n	800c990 <__sflush_r+0x34>
 800ca00:	682b      	ldr	r3, [r5, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d0c4      	beq.n	800c990 <__sflush_r+0x34>
 800ca06:	2b1d      	cmp	r3, #29
 800ca08:	d001      	beq.n	800ca0e <__sflush_r+0xb2>
 800ca0a:	2b16      	cmp	r3, #22
 800ca0c:	d101      	bne.n	800ca12 <__sflush_r+0xb6>
 800ca0e:	602f      	str	r7, [r5, #0]
 800ca10:	e7b1      	b.n	800c976 <__sflush_r+0x1a>
 800ca12:	89a3      	ldrh	r3, [r4, #12]
 800ca14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca18:	81a3      	strh	r3, [r4, #12]
 800ca1a:	e7ad      	b.n	800c978 <__sflush_r+0x1c>
 800ca1c:	690f      	ldr	r7, [r1, #16]
 800ca1e:	2f00      	cmp	r7, #0
 800ca20:	d0a9      	beq.n	800c976 <__sflush_r+0x1a>
 800ca22:	0793      	lsls	r3, r2, #30
 800ca24:	680e      	ldr	r6, [r1, #0]
 800ca26:	bf08      	it	eq
 800ca28:	694b      	ldreq	r3, [r1, #20]
 800ca2a:	600f      	str	r7, [r1, #0]
 800ca2c:	bf18      	it	ne
 800ca2e:	2300      	movne	r3, #0
 800ca30:	eba6 0807 	sub.w	r8, r6, r7
 800ca34:	608b      	str	r3, [r1, #8]
 800ca36:	f1b8 0f00 	cmp.w	r8, #0
 800ca3a:	dd9c      	ble.n	800c976 <__sflush_r+0x1a>
 800ca3c:	6a21      	ldr	r1, [r4, #32]
 800ca3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca40:	4643      	mov	r3, r8
 800ca42:	463a      	mov	r2, r7
 800ca44:	4628      	mov	r0, r5
 800ca46:	47b0      	blx	r6
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	dc06      	bgt.n	800ca5a <__sflush_r+0xfe>
 800ca4c:	89a3      	ldrh	r3, [r4, #12]
 800ca4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca52:	81a3      	strh	r3, [r4, #12]
 800ca54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca58:	e78e      	b.n	800c978 <__sflush_r+0x1c>
 800ca5a:	4407      	add	r7, r0
 800ca5c:	eba8 0800 	sub.w	r8, r8, r0
 800ca60:	e7e9      	b.n	800ca36 <__sflush_r+0xda>
 800ca62:	bf00      	nop
 800ca64:	20400001 	.word	0x20400001

0800ca68 <_fflush_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	690b      	ldr	r3, [r1, #16]
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	b913      	cbnz	r3, 800ca78 <_fflush_r+0x10>
 800ca72:	2500      	movs	r5, #0
 800ca74:	4628      	mov	r0, r5
 800ca76:	bd38      	pop	{r3, r4, r5, pc}
 800ca78:	b118      	cbz	r0, 800ca82 <_fflush_r+0x1a>
 800ca7a:	6983      	ldr	r3, [r0, #24]
 800ca7c:	b90b      	cbnz	r3, 800ca82 <_fflush_r+0x1a>
 800ca7e:	f7ff f877 	bl	800bb70 <__sinit>
 800ca82:	4b14      	ldr	r3, [pc, #80]	; (800cad4 <_fflush_r+0x6c>)
 800ca84:	429c      	cmp	r4, r3
 800ca86:	d11b      	bne.n	800cac0 <_fflush_r+0x58>
 800ca88:	686c      	ldr	r4, [r5, #4]
 800ca8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d0ef      	beq.n	800ca72 <_fflush_r+0xa>
 800ca92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca94:	07d0      	lsls	r0, r2, #31
 800ca96:	d404      	bmi.n	800caa2 <_fflush_r+0x3a>
 800ca98:	0599      	lsls	r1, r3, #22
 800ca9a:	d402      	bmi.n	800caa2 <_fflush_r+0x3a>
 800ca9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca9e:	f7ff f91c 	bl	800bcda <__retarget_lock_acquire_recursive>
 800caa2:	4628      	mov	r0, r5
 800caa4:	4621      	mov	r1, r4
 800caa6:	f7ff ff59 	bl	800c95c <__sflush_r>
 800caaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800caac:	07da      	lsls	r2, r3, #31
 800caae:	4605      	mov	r5, r0
 800cab0:	d4e0      	bmi.n	800ca74 <_fflush_r+0xc>
 800cab2:	89a3      	ldrh	r3, [r4, #12]
 800cab4:	059b      	lsls	r3, r3, #22
 800cab6:	d4dd      	bmi.n	800ca74 <_fflush_r+0xc>
 800cab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caba:	f7ff f90f 	bl	800bcdc <__retarget_lock_release_recursive>
 800cabe:	e7d9      	b.n	800ca74 <_fflush_r+0xc>
 800cac0:	4b05      	ldr	r3, [pc, #20]	; (800cad8 <_fflush_r+0x70>)
 800cac2:	429c      	cmp	r4, r3
 800cac4:	d101      	bne.n	800caca <_fflush_r+0x62>
 800cac6:	68ac      	ldr	r4, [r5, #8]
 800cac8:	e7df      	b.n	800ca8a <_fflush_r+0x22>
 800caca:	4b04      	ldr	r3, [pc, #16]	; (800cadc <_fflush_r+0x74>)
 800cacc:	429c      	cmp	r4, r3
 800cace:	bf08      	it	eq
 800cad0:	68ec      	ldreq	r4, [r5, #12]
 800cad2:	e7da      	b.n	800ca8a <_fflush_r+0x22>
 800cad4:	0800df4c 	.word	0x0800df4c
 800cad8:	0800df6c 	.word	0x0800df6c
 800cadc:	0800df2c 	.word	0x0800df2c

0800cae0 <_lseek_r>:
 800cae0:	b538      	push	{r3, r4, r5, lr}
 800cae2:	4d07      	ldr	r5, [pc, #28]	; (800cb00 <_lseek_r+0x20>)
 800cae4:	4604      	mov	r4, r0
 800cae6:	4608      	mov	r0, r1
 800cae8:	4611      	mov	r1, r2
 800caea:	2200      	movs	r2, #0
 800caec:	602a      	str	r2, [r5, #0]
 800caee:	461a      	mov	r2, r3
 800caf0:	f7f4 fb70 	bl	80011d4 <_lseek>
 800caf4:	1c43      	adds	r3, r0, #1
 800caf6:	d102      	bne.n	800cafe <_lseek_r+0x1e>
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	b103      	cbz	r3, 800cafe <_lseek_r+0x1e>
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	bd38      	pop	{r3, r4, r5, pc}
 800cb00:	2000b220 	.word	0x2000b220

0800cb04 <__swhatbuf_r>:
 800cb04:	b570      	push	{r4, r5, r6, lr}
 800cb06:	460e      	mov	r6, r1
 800cb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb0c:	2900      	cmp	r1, #0
 800cb0e:	b096      	sub	sp, #88	; 0x58
 800cb10:	4614      	mov	r4, r2
 800cb12:	461d      	mov	r5, r3
 800cb14:	da08      	bge.n	800cb28 <__swhatbuf_r+0x24>
 800cb16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	602a      	str	r2, [r5, #0]
 800cb1e:	061a      	lsls	r2, r3, #24
 800cb20:	d410      	bmi.n	800cb44 <__swhatbuf_r+0x40>
 800cb22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb26:	e00e      	b.n	800cb46 <__swhatbuf_r+0x42>
 800cb28:	466a      	mov	r2, sp
 800cb2a:	f000 f88b 	bl	800cc44 <_fstat_r>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	dbf1      	blt.n	800cb16 <__swhatbuf_r+0x12>
 800cb32:	9a01      	ldr	r2, [sp, #4]
 800cb34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb3c:	425a      	negs	r2, r3
 800cb3e:	415a      	adcs	r2, r3
 800cb40:	602a      	str	r2, [r5, #0]
 800cb42:	e7ee      	b.n	800cb22 <__swhatbuf_r+0x1e>
 800cb44:	2340      	movs	r3, #64	; 0x40
 800cb46:	2000      	movs	r0, #0
 800cb48:	6023      	str	r3, [r4, #0]
 800cb4a:	b016      	add	sp, #88	; 0x58
 800cb4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb50 <__smakebuf_r>:
 800cb50:	898b      	ldrh	r3, [r1, #12]
 800cb52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb54:	079d      	lsls	r5, r3, #30
 800cb56:	4606      	mov	r6, r0
 800cb58:	460c      	mov	r4, r1
 800cb5a:	d507      	bpl.n	800cb6c <__smakebuf_r+0x1c>
 800cb5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	6123      	str	r3, [r4, #16]
 800cb64:	2301      	movs	r3, #1
 800cb66:	6163      	str	r3, [r4, #20]
 800cb68:	b002      	add	sp, #8
 800cb6a:	bd70      	pop	{r4, r5, r6, pc}
 800cb6c:	ab01      	add	r3, sp, #4
 800cb6e:	466a      	mov	r2, sp
 800cb70:	f7ff ffc8 	bl	800cb04 <__swhatbuf_r>
 800cb74:	9900      	ldr	r1, [sp, #0]
 800cb76:	4605      	mov	r5, r0
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f7fd f9a9 	bl	8009ed0 <_malloc_r>
 800cb7e:	b948      	cbnz	r0, 800cb94 <__smakebuf_r+0x44>
 800cb80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb84:	059a      	lsls	r2, r3, #22
 800cb86:	d4ef      	bmi.n	800cb68 <__smakebuf_r+0x18>
 800cb88:	f023 0303 	bic.w	r3, r3, #3
 800cb8c:	f043 0302 	orr.w	r3, r3, #2
 800cb90:	81a3      	strh	r3, [r4, #12]
 800cb92:	e7e3      	b.n	800cb5c <__smakebuf_r+0xc>
 800cb94:	4b0d      	ldr	r3, [pc, #52]	; (800cbcc <__smakebuf_r+0x7c>)
 800cb96:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	6020      	str	r0, [r4, #0]
 800cb9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cba0:	81a3      	strh	r3, [r4, #12]
 800cba2:	9b00      	ldr	r3, [sp, #0]
 800cba4:	6163      	str	r3, [r4, #20]
 800cba6:	9b01      	ldr	r3, [sp, #4]
 800cba8:	6120      	str	r0, [r4, #16]
 800cbaa:	b15b      	cbz	r3, 800cbc4 <__smakebuf_r+0x74>
 800cbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f000 f859 	bl	800cc68 <_isatty_r>
 800cbb6:	b128      	cbz	r0, 800cbc4 <__smakebuf_r+0x74>
 800cbb8:	89a3      	ldrh	r3, [r4, #12]
 800cbba:	f023 0303 	bic.w	r3, r3, #3
 800cbbe:	f043 0301 	orr.w	r3, r3, #1
 800cbc2:	81a3      	strh	r3, [r4, #12]
 800cbc4:	89a0      	ldrh	r0, [r4, #12]
 800cbc6:	4305      	orrs	r5, r0
 800cbc8:	81a5      	strh	r5, [r4, #12]
 800cbca:	e7cd      	b.n	800cb68 <__smakebuf_r+0x18>
 800cbcc:	0800bb09 	.word	0x0800bb09

0800cbd0 <__ascii_mbtowc>:
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	b901      	cbnz	r1, 800cbd6 <__ascii_mbtowc+0x6>
 800cbd4:	a901      	add	r1, sp, #4
 800cbd6:	b142      	cbz	r2, 800cbea <__ascii_mbtowc+0x1a>
 800cbd8:	b14b      	cbz	r3, 800cbee <__ascii_mbtowc+0x1e>
 800cbda:	7813      	ldrb	r3, [r2, #0]
 800cbdc:	600b      	str	r3, [r1, #0]
 800cbde:	7812      	ldrb	r2, [r2, #0]
 800cbe0:	1e10      	subs	r0, r2, #0
 800cbe2:	bf18      	it	ne
 800cbe4:	2001      	movne	r0, #1
 800cbe6:	b002      	add	sp, #8
 800cbe8:	4770      	bx	lr
 800cbea:	4610      	mov	r0, r2
 800cbec:	e7fb      	b.n	800cbe6 <__ascii_mbtowc+0x16>
 800cbee:	f06f 0001 	mvn.w	r0, #1
 800cbf2:	e7f8      	b.n	800cbe6 <__ascii_mbtowc+0x16>

0800cbf4 <_malloc_usable_size_r>:
 800cbf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf8:	1f18      	subs	r0, r3, #4
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	bfbc      	itt	lt
 800cbfe:	580b      	ldrlt	r3, [r1, r0]
 800cc00:	18c0      	addlt	r0, r0, r3
 800cc02:	4770      	bx	lr

0800cc04 <_read_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4d07      	ldr	r5, [pc, #28]	; (800cc24 <_read_r+0x20>)
 800cc08:	4604      	mov	r4, r0
 800cc0a:	4608      	mov	r0, r1
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	2200      	movs	r2, #0
 800cc10:	602a      	str	r2, [r5, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	f7f4 fab6 	bl	8001184 <_read>
 800cc18:	1c43      	adds	r3, r0, #1
 800cc1a:	d102      	bne.n	800cc22 <_read_r+0x1e>
 800cc1c:	682b      	ldr	r3, [r5, #0]
 800cc1e:	b103      	cbz	r3, 800cc22 <_read_r+0x1e>
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	bd38      	pop	{r3, r4, r5, pc}
 800cc24:	2000b220 	.word	0x2000b220

0800cc28 <__ascii_wctomb>:
 800cc28:	b149      	cbz	r1, 800cc3e <__ascii_wctomb+0x16>
 800cc2a:	2aff      	cmp	r2, #255	; 0xff
 800cc2c:	bf85      	ittet	hi
 800cc2e:	238a      	movhi	r3, #138	; 0x8a
 800cc30:	6003      	strhi	r3, [r0, #0]
 800cc32:	700a      	strbls	r2, [r1, #0]
 800cc34:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cc38:	bf98      	it	ls
 800cc3a:	2001      	movls	r0, #1
 800cc3c:	4770      	bx	lr
 800cc3e:	4608      	mov	r0, r1
 800cc40:	4770      	bx	lr
	...

0800cc44 <_fstat_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4d07      	ldr	r5, [pc, #28]	; (800cc64 <_fstat_r+0x20>)
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	4608      	mov	r0, r1
 800cc4e:	4611      	mov	r1, r2
 800cc50:	602b      	str	r3, [r5, #0]
 800cc52:	f7f4 fab7 	bl	80011c4 <_fstat>
 800cc56:	1c43      	adds	r3, r0, #1
 800cc58:	d102      	bne.n	800cc60 <_fstat_r+0x1c>
 800cc5a:	682b      	ldr	r3, [r5, #0]
 800cc5c:	b103      	cbz	r3, 800cc60 <_fstat_r+0x1c>
 800cc5e:	6023      	str	r3, [r4, #0]
 800cc60:	bd38      	pop	{r3, r4, r5, pc}
 800cc62:	bf00      	nop
 800cc64:	2000b220 	.word	0x2000b220

0800cc68 <_isatty_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	4d06      	ldr	r5, [pc, #24]	; (800cc84 <_isatty_r+0x1c>)
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4604      	mov	r4, r0
 800cc70:	4608      	mov	r0, r1
 800cc72:	602b      	str	r3, [r5, #0]
 800cc74:	f7f4 faac 	bl	80011d0 <_isatty>
 800cc78:	1c43      	adds	r3, r0, #1
 800cc7a:	d102      	bne.n	800cc82 <_isatty_r+0x1a>
 800cc7c:	682b      	ldr	r3, [r5, #0]
 800cc7e:	b103      	cbz	r3, 800cc82 <_isatty_r+0x1a>
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	bd38      	pop	{r3, r4, r5, pc}
 800cc84:	2000b220 	.word	0x2000b220

0800cc88 <_init>:
 800cc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc8a:	bf00      	nop
 800cc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc8e:	bc08      	pop	{r3}
 800cc90:	469e      	mov	lr, r3
 800cc92:	4770      	bx	lr

0800cc94 <_fini>:
 800cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc96:	bf00      	nop
 800cc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc9a:	bc08      	pop	{r3}
 800cc9c:	469e      	mov	lr, r3
 800cc9e:	4770      	bx	lr
